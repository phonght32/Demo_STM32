
STM32F405_Kalman_Height_Estimation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afbc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800b150  0800b150  0000c150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b528  0800b528  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b528  0800b528  0000c528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b530  0800b530  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b530  0800b530  0000c530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b534  0800b534  0000c534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b538  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d4  2**0
                  CONTENTS
 10 .bss          000002d4  200001d4  200001d4  0000d1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004a8  200004a8  0000d1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa0c  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002803  00000000  00000000  0001cc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  0001f418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aac  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021754  00000000  00000000  00020c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013415  00000000  00000000  000423d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0fb0  00000000  00000000  000557ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011679d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d68  00000000  00000000  001167e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  0011b548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b134 	.word	0x0800b134

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800b134 	.word	0x0800b134

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	3a01      	subs	r2, #1
 8000d02:	bf28      	it	cs
 8000d04:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d08:	d2ed      	bcs.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_ldivmod>:
 8000e64:	b97b      	cbnz	r3, 8000e86 <__aeabi_ldivmod+0x22>
 8000e66:	b972      	cbnz	r2, 8000e86 <__aeabi_ldivmod+0x22>
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	bfbe      	ittt	lt
 8000e6c:	2000      	movlt	r0, #0
 8000e6e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000e72:	e006      	blt.n	8000e82 <__aeabi_ldivmod+0x1e>
 8000e74:	bf08      	it	eq
 8000e76:	2800      	cmpeq	r0, #0
 8000e78:	bf1c      	itt	ne
 8000e7a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000e7e:	f04f 30ff 	movne.w	r0, #4294967295
 8000e82:	f000 b9d3 	b.w	800122c <__aeabi_idiv0>
 8000e86:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e8a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e8e:	2900      	cmp	r1, #0
 8000e90:	db09      	blt.n	8000ea6 <__aeabi_ldivmod+0x42>
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db1a      	blt.n	8000ecc <__aeabi_ldivmod+0x68>
 8000e96:	f000 f84d 	bl	8000f34 <__udivmoddi4>
 8000e9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea2:	b004      	add	sp, #16
 8000ea4:	4770      	bx	lr
 8000ea6:	4240      	negs	r0, r0
 8000ea8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db1b      	blt.n	8000ee8 <__aeabi_ldivmod+0x84>
 8000eb0:	f000 f840 	bl	8000f34 <__udivmoddi4>
 8000eb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ebc:	b004      	add	sp, #16
 8000ebe:	4240      	negs	r0, r0
 8000ec0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ec4:	4252      	negs	r2, r2
 8000ec6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eca:	4770      	bx	lr
 8000ecc:	4252      	negs	r2, r2
 8000ece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ed2:	f000 f82f 	bl	8000f34 <__udivmoddi4>
 8000ed6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ede:	b004      	add	sp, #16
 8000ee0:	4240      	negs	r0, r0
 8000ee2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ee6:	4770      	bx	lr
 8000ee8:	4252      	negs	r2, r2
 8000eea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eee:	f000 f821 	bl	8000f34 <__udivmoddi4>
 8000ef2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efa:	b004      	add	sp, #16
 8000efc:	4252      	negs	r2, r2
 8000efe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f02:	4770      	bx	lr

08000f04 <__aeabi_uldivmod>:
 8000f04:	b953      	cbnz	r3, 8000f1c <__aeabi_uldivmod+0x18>
 8000f06:	b94a      	cbnz	r2, 8000f1c <__aeabi_uldivmod+0x18>
 8000f08:	2900      	cmp	r1, #0
 8000f0a:	bf08      	it	eq
 8000f0c:	2800      	cmpeq	r0, #0
 8000f0e:	bf1c      	itt	ne
 8000f10:	f04f 31ff 	movne.w	r1, #4294967295
 8000f14:	f04f 30ff 	movne.w	r0, #4294967295
 8000f18:	f000 b988 	b.w	800122c <__aeabi_idiv0>
 8000f1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f24:	f000 f806 	bl	8000f34 <__udivmoddi4>
 8000f28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f30:	b004      	add	sp, #16
 8000f32:	4770      	bx	lr

08000f34 <__udivmoddi4>:
 8000f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f38:	9d08      	ldr	r5, [sp, #32]
 8000f3a:	468e      	mov	lr, r1
 8000f3c:	4604      	mov	r4, r0
 8000f3e:	4688      	mov	r8, r1
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d14a      	bne.n	8000fda <__udivmoddi4+0xa6>
 8000f44:	428a      	cmp	r2, r1
 8000f46:	4617      	mov	r7, r2
 8000f48:	d962      	bls.n	8001010 <__udivmoddi4+0xdc>
 8000f4a:	fab2 f682 	clz	r6, r2
 8000f4e:	b14e      	cbz	r6, 8000f64 <__udivmoddi4+0x30>
 8000f50:	f1c6 0320 	rsb	r3, r6, #32
 8000f54:	fa01 f806 	lsl.w	r8, r1, r6
 8000f58:	fa20 f303 	lsr.w	r3, r0, r3
 8000f5c:	40b7      	lsls	r7, r6
 8000f5e:	ea43 0808 	orr.w	r8, r3, r8
 8000f62:	40b4      	lsls	r4, r6
 8000f64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f68:	fa1f fc87 	uxth.w	ip, r7
 8000f6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000f76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d909      	bls.n	8000f96 <__udivmoddi4+0x62>
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000f88:	f080 80ea 	bcs.w	8001160 <__udivmoddi4+0x22c>
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f240 80e7 	bls.w	8001160 <__udivmoddi4+0x22c>
 8000f92:	3902      	subs	r1, #2
 8000f94:	443b      	add	r3, r7
 8000f96:	1a9a      	subs	r2, r3, r2
 8000f98:	b2a3      	uxth	r3, r4
 8000f9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000fa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fa6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000faa:	459c      	cmp	ip, r3
 8000fac:	d909      	bls.n	8000fc2 <__udivmoddi4+0x8e>
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fb4:	f080 80d6 	bcs.w	8001164 <__udivmoddi4+0x230>
 8000fb8:	459c      	cmp	ip, r3
 8000fba:	f240 80d3 	bls.w	8001164 <__udivmoddi4+0x230>
 8000fbe:	443b      	add	r3, r7
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fc6:	eba3 030c 	sub.w	r3, r3, ip
 8000fca:	2100      	movs	r1, #0
 8000fcc:	b11d      	cbz	r5, 8000fd6 <__udivmoddi4+0xa2>
 8000fce:	40f3      	lsrs	r3, r6
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d905      	bls.n	8000fea <__udivmoddi4+0xb6>
 8000fde:	b10d      	cbz	r5, 8000fe4 <__udivmoddi4+0xb0>
 8000fe0:	e9c5 0100 	strd	r0, r1, [r5]
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e7f5      	b.n	8000fd6 <__udivmoddi4+0xa2>
 8000fea:	fab3 f183 	clz	r1, r3
 8000fee:	2900      	cmp	r1, #0
 8000ff0:	d146      	bne.n	8001080 <__udivmoddi4+0x14c>
 8000ff2:	4573      	cmp	r3, lr
 8000ff4:	d302      	bcc.n	8000ffc <__udivmoddi4+0xc8>
 8000ff6:	4282      	cmp	r2, r0
 8000ff8:	f200 8105 	bhi.w	8001206 <__udivmoddi4+0x2d2>
 8000ffc:	1a84      	subs	r4, r0, r2
 8000ffe:	eb6e 0203 	sbc.w	r2, lr, r3
 8001002:	2001      	movs	r0, #1
 8001004:	4690      	mov	r8, r2
 8001006:	2d00      	cmp	r5, #0
 8001008:	d0e5      	beq.n	8000fd6 <__udivmoddi4+0xa2>
 800100a:	e9c5 4800 	strd	r4, r8, [r5]
 800100e:	e7e2      	b.n	8000fd6 <__udivmoddi4+0xa2>
 8001010:	2a00      	cmp	r2, #0
 8001012:	f000 8090 	beq.w	8001136 <__udivmoddi4+0x202>
 8001016:	fab2 f682 	clz	r6, r2
 800101a:	2e00      	cmp	r6, #0
 800101c:	f040 80a4 	bne.w	8001168 <__udivmoddi4+0x234>
 8001020:	1a8a      	subs	r2, r1, r2
 8001022:	0c03      	lsrs	r3, r0, #16
 8001024:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001028:	b280      	uxth	r0, r0
 800102a:	b2bc      	uxth	r4, r7
 800102c:	2101      	movs	r1, #1
 800102e:	fbb2 fcfe 	udiv	ip, r2, lr
 8001032:	fb0e 221c 	mls	r2, lr, ip, r2
 8001036:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800103a:	fb04 f20c 	mul.w	r2, r4, ip
 800103e:	429a      	cmp	r2, r3
 8001040:	d907      	bls.n	8001052 <__udivmoddi4+0x11e>
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001048:	d202      	bcs.n	8001050 <__udivmoddi4+0x11c>
 800104a:	429a      	cmp	r2, r3
 800104c:	f200 80e0 	bhi.w	8001210 <__udivmoddi4+0x2dc>
 8001050:	46c4      	mov	ip, r8
 8001052:	1a9b      	subs	r3, r3, r2
 8001054:	fbb3 f2fe 	udiv	r2, r3, lr
 8001058:	fb0e 3312 	mls	r3, lr, r2, r3
 800105c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001060:	fb02 f404 	mul.w	r4, r2, r4
 8001064:	429c      	cmp	r4, r3
 8001066:	d907      	bls.n	8001078 <__udivmoddi4+0x144>
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	f102 30ff 	add.w	r0, r2, #4294967295
 800106e:	d202      	bcs.n	8001076 <__udivmoddi4+0x142>
 8001070:	429c      	cmp	r4, r3
 8001072:	f200 80ca 	bhi.w	800120a <__udivmoddi4+0x2d6>
 8001076:	4602      	mov	r2, r0
 8001078:	1b1b      	subs	r3, r3, r4
 800107a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800107e:	e7a5      	b.n	8000fcc <__udivmoddi4+0x98>
 8001080:	f1c1 0620 	rsb	r6, r1, #32
 8001084:	408b      	lsls	r3, r1
 8001086:	fa22 f706 	lsr.w	r7, r2, r6
 800108a:	431f      	orrs	r7, r3
 800108c:	fa0e f401 	lsl.w	r4, lr, r1
 8001090:	fa20 f306 	lsr.w	r3, r0, r6
 8001094:	fa2e fe06 	lsr.w	lr, lr, r6
 8001098:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800109c:	4323      	orrs	r3, r4
 800109e:	fa00 f801 	lsl.w	r8, r0, r1
 80010a2:	fa1f fc87 	uxth.w	ip, r7
 80010a6:	fbbe f0f9 	udiv	r0, lr, r9
 80010aa:	0c1c      	lsrs	r4, r3, #16
 80010ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80010b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80010b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80010b8:	45a6      	cmp	lr, r4
 80010ba:	fa02 f201 	lsl.w	r2, r2, r1
 80010be:	d909      	bls.n	80010d4 <__udivmoddi4+0x1a0>
 80010c0:	193c      	adds	r4, r7, r4
 80010c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80010c6:	f080 809c 	bcs.w	8001202 <__udivmoddi4+0x2ce>
 80010ca:	45a6      	cmp	lr, r4
 80010cc:	f240 8099 	bls.w	8001202 <__udivmoddi4+0x2ce>
 80010d0:	3802      	subs	r0, #2
 80010d2:	443c      	add	r4, r7
 80010d4:	eba4 040e 	sub.w	r4, r4, lr
 80010d8:	fa1f fe83 	uxth.w	lr, r3
 80010dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80010e0:	fb09 4413 	mls	r4, r9, r3, r4
 80010e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80010e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80010ec:	45a4      	cmp	ip, r4
 80010ee:	d908      	bls.n	8001102 <__udivmoddi4+0x1ce>
 80010f0:	193c      	adds	r4, r7, r4
 80010f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80010f6:	f080 8082 	bcs.w	80011fe <__udivmoddi4+0x2ca>
 80010fa:	45a4      	cmp	ip, r4
 80010fc:	d97f      	bls.n	80011fe <__udivmoddi4+0x2ca>
 80010fe:	3b02      	subs	r3, #2
 8001100:	443c      	add	r4, r7
 8001102:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001106:	eba4 040c 	sub.w	r4, r4, ip
 800110a:	fba0 ec02 	umull	lr, ip, r0, r2
 800110e:	4564      	cmp	r4, ip
 8001110:	4673      	mov	r3, lr
 8001112:	46e1      	mov	r9, ip
 8001114:	d362      	bcc.n	80011dc <__udivmoddi4+0x2a8>
 8001116:	d05f      	beq.n	80011d8 <__udivmoddi4+0x2a4>
 8001118:	b15d      	cbz	r5, 8001132 <__udivmoddi4+0x1fe>
 800111a:	ebb8 0203 	subs.w	r2, r8, r3
 800111e:	eb64 0409 	sbc.w	r4, r4, r9
 8001122:	fa04 f606 	lsl.w	r6, r4, r6
 8001126:	fa22 f301 	lsr.w	r3, r2, r1
 800112a:	431e      	orrs	r6, r3
 800112c:	40cc      	lsrs	r4, r1
 800112e:	e9c5 6400 	strd	r6, r4, [r5]
 8001132:	2100      	movs	r1, #0
 8001134:	e74f      	b.n	8000fd6 <__udivmoddi4+0xa2>
 8001136:	fbb1 fcf2 	udiv	ip, r1, r2
 800113a:	0c01      	lsrs	r1, r0, #16
 800113c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001140:	b280      	uxth	r0, r0
 8001142:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001146:	463b      	mov	r3, r7
 8001148:	4638      	mov	r0, r7
 800114a:	463c      	mov	r4, r7
 800114c:	46b8      	mov	r8, r7
 800114e:	46be      	mov	lr, r7
 8001150:	2620      	movs	r6, #32
 8001152:	fbb1 f1f7 	udiv	r1, r1, r7
 8001156:	eba2 0208 	sub.w	r2, r2, r8
 800115a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800115e:	e766      	b.n	800102e <__udivmoddi4+0xfa>
 8001160:	4601      	mov	r1, r0
 8001162:	e718      	b.n	8000f96 <__udivmoddi4+0x62>
 8001164:	4610      	mov	r0, r2
 8001166:	e72c      	b.n	8000fc2 <__udivmoddi4+0x8e>
 8001168:	f1c6 0220 	rsb	r2, r6, #32
 800116c:	fa2e f302 	lsr.w	r3, lr, r2
 8001170:	40b7      	lsls	r7, r6
 8001172:	40b1      	lsls	r1, r6
 8001174:	fa20 f202 	lsr.w	r2, r0, r2
 8001178:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800117c:	430a      	orrs	r2, r1
 800117e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001182:	b2bc      	uxth	r4, r7
 8001184:	fb0e 3318 	mls	r3, lr, r8, r3
 8001188:	0c11      	lsrs	r1, r2, #16
 800118a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800118e:	fb08 f904 	mul.w	r9, r8, r4
 8001192:	40b0      	lsls	r0, r6
 8001194:	4589      	cmp	r9, r1
 8001196:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800119a:	b280      	uxth	r0, r0
 800119c:	d93e      	bls.n	800121c <__udivmoddi4+0x2e8>
 800119e:	1879      	adds	r1, r7, r1
 80011a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80011a4:	d201      	bcs.n	80011aa <__udivmoddi4+0x276>
 80011a6:	4589      	cmp	r9, r1
 80011a8:	d81f      	bhi.n	80011ea <__udivmoddi4+0x2b6>
 80011aa:	eba1 0109 	sub.w	r1, r1, r9
 80011ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80011b2:	fb09 f804 	mul.w	r8, r9, r4
 80011b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80011ba:	b292      	uxth	r2, r2
 80011bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011c0:	4542      	cmp	r2, r8
 80011c2:	d229      	bcs.n	8001218 <__udivmoddi4+0x2e4>
 80011c4:	18ba      	adds	r2, r7, r2
 80011c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80011ca:	d2c4      	bcs.n	8001156 <__udivmoddi4+0x222>
 80011cc:	4542      	cmp	r2, r8
 80011ce:	d2c2      	bcs.n	8001156 <__udivmoddi4+0x222>
 80011d0:	f1a9 0102 	sub.w	r1, r9, #2
 80011d4:	443a      	add	r2, r7
 80011d6:	e7be      	b.n	8001156 <__udivmoddi4+0x222>
 80011d8:	45f0      	cmp	r8, lr
 80011da:	d29d      	bcs.n	8001118 <__udivmoddi4+0x1e4>
 80011dc:	ebbe 0302 	subs.w	r3, lr, r2
 80011e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80011e4:	3801      	subs	r0, #1
 80011e6:	46e1      	mov	r9, ip
 80011e8:	e796      	b.n	8001118 <__udivmoddi4+0x1e4>
 80011ea:	eba7 0909 	sub.w	r9, r7, r9
 80011ee:	4449      	add	r1, r9
 80011f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80011f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80011f8:	fb09 f804 	mul.w	r8, r9, r4
 80011fc:	e7db      	b.n	80011b6 <__udivmoddi4+0x282>
 80011fe:	4673      	mov	r3, lr
 8001200:	e77f      	b.n	8001102 <__udivmoddi4+0x1ce>
 8001202:	4650      	mov	r0, sl
 8001204:	e766      	b.n	80010d4 <__udivmoddi4+0x1a0>
 8001206:	4608      	mov	r0, r1
 8001208:	e6fd      	b.n	8001006 <__udivmoddi4+0xd2>
 800120a:	443b      	add	r3, r7
 800120c:	3a02      	subs	r2, #2
 800120e:	e733      	b.n	8001078 <__udivmoddi4+0x144>
 8001210:	f1ac 0c02 	sub.w	ip, ip, #2
 8001214:	443b      	add	r3, r7
 8001216:	e71c      	b.n	8001052 <__udivmoddi4+0x11e>
 8001218:	4649      	mov	r1, r9
 800121a:	e79c      	b.n	8001156 <__udivmoddi4+0x222>
 800121c:	eba1 0109 	sub.w	r1, r1, r9
 8001220:	46c4      	mov	ip, r8
 8001222:	fbb1 f9fe 	udiv	r9, r1, lr
 8001226:	fb09 f804 	mul.w	r8, r9, r4
 800122a:	e7c4      	b.n	80011b6 <__udivmoddi4+0x282>

0800122c <__aeabi_idiv0>:
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop

08001230 <CLinearAlgebra_Matrix_SetValue>:
//        }
//    }
//}

void CLinearAlgebra_Matrix_SetValue(CLinearAlgebra_Matrix_t *Matrix, uint8_t RowIdx, uint8_t ColIdx, float Val)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	460b      	mov	r3, r1
 800123a:	ed87 0a01 	vstr	s0, [r7, #4]
 800123e:	72fb      	strb	r3, [r7, #11]
 8001240:	4613      	mov	r3, r2
 8001242:	72bb      	strb	r3, [r7, #10]
    Matrix->Data[RowIdx * Matrix->NumCols + ColIdx] = Val;
 8001244:	7afb      	ldrb	r3, [r7, #11]
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	7852      	ldrb	r2, [r2, #1]
 800124a:	fb03 f202 	mul.w	r2, r3, r2
 800124e:	7abb      	ldrb	r3, [r7, #10]
 8001250:	4413      	add	r3, r2
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	3304      	adds	r3, #4
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	601a      	str	r2, [r3, #0]
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <CLinearAlgebra_Matrix_GetValue>:

float CLinearAlgebra_Matrix_GetValue(CLinearAlgebra_Matrix_t Matrix, uint8_t RowIdx, uint8_t ColIdx)
{
 800126a:	b084      	sub	sp, #16
 800126c:	b490      	push	{r4, r7}
 800126e:	af00      	add	r7, sp, #0
 8001270:	f107 0408 	add.w	r4, r7, #8
 8001274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return Matrix.Data[RowIdx * Matrix.NumCols + ColIdx];
 8001278:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800127c:	7a7a      	ldrb	r2, [r7, #9]
 800127e:	fb03 f202 	mul.w	r2, r3, r2
 8001282:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8001286:	4413      	add	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	3304      	adds	r3, #4
 800128c:	1d3a      	adds	r2, r7, #4
 800128e:	4413      	add	r3, r2
 8001290:	3304      	adds	r3, #4
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	ee07 3a90 	vmov	s15, r3
}
 8001298:	eeb0 0a67 	vmov.f32	s0, s15
 800129c:	46bd      	mov	sp, r7
 800129e:	bc90      	pop	{r4, r7}
 80012a0:	b004      	add	sp, #16
 80012a2:	4770      	bx	lr

080012a4 <CLinearAlgebra_Matrix_Add>:
{
    memcpy(Matrix->Data, Data, sizeof(float) * Matrix->NumRows * Matrix->NumCols);
}

CLinearAlgebra_Matrix_t CLinearAlgebra_Matrix_Add(CLinearAlgebra_Matrix_t MatrixA, CLinearAlgebra_Matrix_t MatrixB)
{
 80012a4:	b084      	sub	sp, #16
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b0a4      	sub	sp, #144	@ 0x90
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 80012b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    CLinearAlgebra_Matrix_t MatrixResult = {0};
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	2284      	movs	r2, #132	@ 0x84
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f006 ffcf 	bl	8008262 <memset>

    // Assign matrix dimension
    MatrixResult.NumRows = MatrixA.NumRows;
 80012c4:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 80012c8:	723b      	strb	r3, [r7, #8]
    MatrixResult.NumCols = MatrixA.NumCols;
 80012ca:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 80012ce:	727b      	strb	r3, [r7, #9]

    for (uint8_t i = 0 ; i < MatrixA.NumRows ; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80012d6:	e042      	b.n	800135e <CLinearAlgebra_Matrix_Add+0xba>
    {
        for (uint8_t j = 0 ; j < MatrixA.NumCols ; j++)
 80012d8:	2300      	movs	r3, #0
 80012da:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 80012de:	e033      	b.n	8001348 <CLinearAlgebra_Matrix_Add+0xa4>
        {
            MatrixResult.Data[i * MatrixA.NumCols + j] = MatrixA.Data[i * MatrixA.NumCols + j] + MatrixB.Data[i * MatrixA.NumCols + j];
 80012e0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80012e4:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 80012e8:	fb03 f202 	mul.w	r2, r3, r2
 80012ec:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	3398      	adds	r3, #152	@ 0x98
 80012f6:	443b      	add	r3, r7
 80012f8:	3308      	adds	r3, #8
 80012fa:	ed93 7a00 	vldr	s14, [r3]
 80012fe:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001302:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 8001306:	fb03 f202 	mul.w	r2, r3, r2
 800130a:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800130e:	4413      	add	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	3398      	adds	r3, #152	@ 0x98
 8001314:	443b      	add	r3, r7
 8001316:	338c      	adds	r3, #140	@ 0x8c
 8001318:	edd3 7a00 	vldr	s15, [r3]
 800131c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001320:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 8001324:	fb03 f202 	mul.w	r2, r3, r2
 8001328:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800132c:	4413      	add	r3, r2
 800132e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	3390      	adds	r3, #144	@ 0x90
 8001336:	443b      	add	r3, r7
 8001338:	3b84      	subs	r3, #132	@ 0x84
 800133a:	edc3 7a00 	vstr	s15, [r3]
        for (uint8_t j = 0 ; j < MatrixA.NumCols ; j++)
 800133e:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8001342:	3301      	adds	r3, #1
 8001344:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8001348:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 800134c:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 8001350:	429a      	cmp	r2, r3
 8001352:	d3c5      	bcc.n	80012e0 <CLinearAlgebra_Matrix_Add+0x3c>
    for (uint8_t i = 0 ; i < MatrixA.NumRows ; i++)
 8001354:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001358:	3301      	adds	r3, #1
 800135a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800135e:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001362:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8001366:	429a      	cmp	r2, r3
 8001368:	d3b6      	bcc.n	80012d8 <CLinearAlgebra_Matrix_Add+0x34>
        }
    }

    return MatrixResult;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4618      	mov	r0, r3
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	2284      	movs	r2, #132	@ 0x84
 8001374:	4619      	mov	r1, r3
 8001376:	f007 f804 	bl	8008382 <memcpy>
}
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	3790      	adds	r7, #144	@ 0x90
 800137e:	46bd      	mov	sp, r7
 8001380:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001384:	b004      	add	sp, #16
 8001386:	4770      	bx	lr

08001388 <CLinearAlgebra_Matrix_Subtract>:


CLinearAlgebra_Matrix_t CLinearAlgebra_Matrix_Subtract(CLinearAlgebra_Matrix_t MatrixA, CLinearAlgebra_Matrix_t MatrixB)
{
 8001388:	b084      	sub	sp, #16
 800138a:	b580      	push	{r7, lr}
 800138c:	b0a4      	sub	sp, #144	@ 0x90
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8001396:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    CLinearAlgebra_Matrix_t MatrixResult = {0};
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	2284      	movs	r2, #132	@ 0x84
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f006 ff5d 	bl	8008262 <memset>

    // Assign matrix dimension
    MatrixResult.NumRows = MatrixA.NumRows;
 80013a8:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 80013ac:	723b      	strb	r3, [r7, #8]
    MatrixResult.NumCols = MatrixA.NumCols;
 80013ae:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 80013b2:	727b      	strb	r3, [r7, #9]

    for (uint8_t i = 0 ; i < MatrixA.NumRows ; i++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80013ba:	e042      	b.n	8001442 <CLinearAlgebra_Matrix_Subtract+0xba>
    {
        for (uint8_t j = 0 ; j < MatrixA.NumCols ; j++)
 80013bc:	2300      	movs	r3, #0
 80013be:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 80013c2:	e033      	b.n	800142c <CLinearAlgebra_Matrix_Subtract+0xa4>
        {
            MatrixResult.Data[i * MatrixA.NumCols + j] = MatrixA.Data[i * MatrixA.NumCols + j] - MatrixB.Data[i * MatrixA.NumCols + j];
 80013c4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80013c8:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 80013cc:	fb03 f202 	mul.w	r2, r3, r2
 80013d0:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	3398      	adds	r3, #152	@ 0x98
 80013da:	443b      	add	r3, r7
 80013dc:	3308      	adds	r3, #8
 80013de:	ed93 7a00 	vldr	s14, [r3]
 80013e2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80013e6:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 80013ea:	fb03 f202 	mul.w	r2, r3, r2
 80013ee:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	3398      	adds	r3, #152	@ 0x98
 80013f8:	443b      	add	r3, r7
 80013fa:	338c      	adds	r3, #140	@ 0x8c
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001404:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 8001408:	fb03 f202 	mul.w	r2, r3, r2
 800140c:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8001410:	4413      	add	r3, r2
 8001412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	3390      	adds	r3, #144	@ 0x90
 800141a:	443b      	add	r3, r7
 800141c:	3b84      	subs	r3, #132	@ 0x84
 800141e:	edc3 7a00 	vstr	s15, [r3]
        for (uint8_t j = 0 ; j < MatrixA.NumCols ; j++)
 8001422:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8001426:	3301      	adds	r3, #1
 8001428:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800142c:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8001430:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 8001434:	429a      	cmp	r2, r3
 8001436:	d3c5      	bcc.n	80013c4 <CLinearAlgebra_Matrix_Subtract+0x3c>
    for (uint8_t i = 0 ; i < MatrixA.NumRows ; i++)
 8001438:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800143c:	3301      	adds	r3, #1
 800143e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8001442:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001446:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800144a:	429a      	cmp	r2, r3
 800144c:	d3b6      	bcc.n	80013bc <CLinearAlgebra_Matrix_Subtract+0x34>
        }
    }

    return MatrixResult;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4618      	mov	r0, r3
 8001452:	f107 0308 	add.w	r3, r7, #8
 8001456:	2284      	movs	r2, #132	@ 0x84
 8001458:	4619      	mov	r1, r3
 800145a:	f006 ff92 	bl	8008382 <memcpy>
}
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	3790      	adds	r7, #144	@ 0x90
 8001462:	46bd      	mov	sp, r7
 8001464:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001468:	b004      	add	sp, #16
 800146a:	4770      	bx	lr

0800146c <CLinearAlgebra_Matrix_Multiply>:


CLinearAlgebra_Matrix_t CLinearAlgebra_Matrix_Multiply(CLinearAlgebra_Matrix_t MatrixA, CLinearAlgebra_Matrix_t MatrixB)
{
 800146c:	b084      	sub	sp, #16
 800146e:	b580      	push	{r7, lr}
 8001470:	b0a6      	sub	sp, #152	@ 0x98
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800147a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    CLinearAlgebra_Matrix_t MatrixResult = {0};
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	2284      	movs	r2, #132	@ 0x84
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f006 feeb 	bl	8008262 <memset>

    uint8_t m = MatrixA.NumRows;
 800148c:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 8001490:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
    uint8_t n = MatrixA.NumCols;
 8001494:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8001498:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    uint8_t k = MatrixB.NumCols;
 800149c:	f897 3129 	ldrb.w	r3, [r7, #297]	@ 0x129
 80014a0:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92

    // Assign matrix dimension
    MatrixResult.NumRows = m;
 80014a4:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80014a8:	733b      	strb	r3, [r7, #12]
    MatrixResult.NumCols = k;
 80014aa:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80014ae:	737b      	strb	r3, [r7, #13]

    for (uint8_t i = 0 ; i < m ; i++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80014b6:	e087      	b.n	80015c8 <CLinearAlgebra_Matrix_Multiply+0x15c>
    {
        for (uint8_t j = 0 ; j < k ; j++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80014be:	e078      	b.n	80015b2 <CLinearAlgebra_Matrix_Multiply+0x146>
        {
            MatrixResult.Data[i * k + j] = MatrixA.Data[i * n] * MatrixB.Data[j];
 80014c0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80014c4:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	33a0      	adds	r3, #160	@ 0xa0
 80014d0:	443b      	add	r3, r7
 80014d2:	3308      	adds	r3, #8
 80014d4:	ed93 7a00 	vldr	s14, [r3]
 80014d8:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	33a0      	adds	r3, #160	@ 0xa0
 80014e0:	443b      	add	r3, r7
 80014e2:	338c      	adds	r3, #140	@ 0x8c
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80014ec:	f897 2092 	ldrb.w	r2, [r7, #146]	@ 0x92
 80014f0:	fb03 f202 	mul.w	r2, r3, r2
 80014f4:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80014f8:	4413      	add	r3, r2
 80014fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	3398      	adds	r3, #152	@ 0x98
 8001502:	443b      	add	r3, r7
 8001504:	3b88      	subs	r3, #136	@ 0x88
 8001506:	edc3 7a00 	vstr	s15, [r3]
            for (uint8_t s = 1; s < n ; s++)
 800150a:	2301      	movs	r3, #1
 800150c:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 8001510:	e044      	b.n	800159c <CLinearAlgebra_Matrix_Multiply+0x130>
            {
                MatrixResult.Data[i * k + j] += MatrixA.Data[i * n + s] * MatrixB.Data[s * k + j];
 8001512:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001516:	f897 2092 	ldrb.w	r2, [r7, #146]	@ 0x92
 800151a:	fb03 f202 	mul.w	r2, r3, r2
 800151e:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	3398      	adds	r3, #152	@ 0x98
 8001528:	443b      	add	r3, r7
 800152a:	3b88      	subs	r3, #136	@ 0x88
 800152c:	ed93 7a00 	vldr	s14, [r3]
 8001530:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001534:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 8001538:	fb03 f202 	mul.w	r2, r3, r2
 800153c:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8001540:	4413      	add	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	33a0      	adds	r3, #160	@ 0xa0
 8001546:	443b      	add	r3, r7
 8001548:	3308      	adds	r3, #8
 800154a:	edd3 6a00 	vldr	s13, [r3]
 800154e:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8001552:	f897 2092 	ldrb.w	r2, [r7, #146]	@ 0x92
 8001556:	fb03 f202 	mul.w	r2, r3, r2
 800155a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	33a0      	adds	r3, #160	@ 0xa0
 8001564:	443b      	add	r3, r7
 8001566:	338c      	adds	r3, #140	@ 0x8c
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001570:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001574:	f897 2092 	ldrb.w	r2, [r7, #146]	@ 0x92
 8001578:	fb03 f202 	mul.w	r2, r3, r2
 800157c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8001580:	4413      	add	r3, r2
 8001582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	3398      	adds	r3, #152	@ 0x98
 800158a:	443b      	add	r3, r7
 800158c:	3b88      	subs	r3, #136	@ 0x88
 800158e:	edc3 7a00 	vstr	s15, [r3]
            for (uint8_t s = 1; s < n ; s++)
 8001592:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8001596:	3301      	adds	r3, #1
 8001598:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 800159c:	f897 2095 	ldrb.w	r2, [r7, #149]	@ 0x95
 80015a0:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d3b4      	bcc.n	8001512 <CLinearAlgebra_Matrix_Multiply+0xa6>
        for (uint8_t j = 0 ; j < k ; j++)
 80015a8:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80015ac:	3301      	adds	r3, #1
 80015ae:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80015b2:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 80015b6:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d380      	bcc.n	80014c0 <CLinearAlgebra_Matrix_Multiply+0x54>
    for (uint8_t i = 0 ; i < m ; i++)
 80015be:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80015c2:	3301      	adds	r3, #1
 80015c4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80015c8:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80015cc:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80015d0:	429a      	cmp	r2, r3
 80015d2:	f4ff af71 	bcc.w	80014b8 <CLinearAlgebra_Matrix_Multiply+0x4c>
            }
        }
    }

    return MatrixResult;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4618      	mov	r0, r3
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	2284      	movs	r2, #132	@ 0x84
 80015e0:	4619      	mov	r1, r3
 80015e2:	f006 fece 	bl	8008382 <memcpy>
}
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	3798      	adds	r7, #152	@ 0x98
 80015ea:	46bd      	mov	sp, r7
 80015ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015f0:	b004      	add	sp, #16
 80015f2:	4770      	bx	lr

080015f4 <CLinearAlgebra_Matrix_Transpose>:

CLinearAlgebra_Matrix_t CLinearAlgebra_Matrix_Transpose(CLinearAlgebra_Matrix_t MatrixA)
{
 80015f4:	b084      	sub	sp, #16
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b0a4      	sub	sp, #144	@ 0x90
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8001602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    CLinearAlgebra_Matrix_t MatrixResult = {0};
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	2284      	movs	r2, #132	@ 0x84
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f006 fe27 	bl	8008262 <memset>

    // Assign matrix dimension
    MatrixResult.NumRows = MatrixA.NumCols;
 8001614:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8001618:	723b      	strb	r3, [r7, #8]
    MatrixResult.NumCols = MatrixA.NumRows;
 800161a:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 800161e:	727b      	strb	r3, [r7, #9]

    for (uint8_t i = 0 ; i < MatrixResult.NumRows ; i++)
 8001620:	2300      	movs	r3, #0
 8001622:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8001626:	e02d      	b.n	8001684 <CLinearAlgebra_Matrix_Transpose+0x90>
    {
        for (uint8_t j = 0 ; j < MatrixResult.NumCols ; j++)
 8001628:	2300      	movs	r3, #0
 800162a:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800162e:	e01f      	b.n	8001670 <CLinearAlgebra_Matrix_Transpose+0x7c>
        {
            MatrixResult.Data[i * MatrixResult.NumCols + j] = MatrixA.Data[j * MatrixA.NumCols + i];
 8001630:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8001634:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 8001638:	fb03 f202 	mul.w	r2, r3, r2
 800163c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001640:	441a      	add	r2, r3
 8001642:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001646:	7a79      	ldrb	r1, [r7, #9]
 8001648:	fb03 f101 	mul.w	r1, r3, r1
 800164c:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8001650:	440b      	add	r3, r1
 8001652:	0092      	lsls	r2, r2, #2
 8001654:	3298      	adds	r2, #152	@ 0x98
 8001656:	443a      	add	r2, r7
 8001658:	3208      	adds	r2, #8
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	3390      	adds	r3, #144	@ 0x90
 8001660:	443b      	add	r3, r7
 8001662:	3b84      	subs	r3, #132	@ 0x84
 8001664:	601a      	str	r2, [r3, #0]
        for (uint8_t j = 0 ; j < MatrixResult.NumCols ; j++)
 8001666:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800166a:	3301      	adds	r3, #1
 800166c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8001670:	7a7b      	ldrb	r3, [r7, #9]
 8001672:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 8001676:	429a      	cmp	r2, r3
 8001678:	d3da      	bcc.n	8001630 <CLinearAlgebra_Matrix_Transpose+0x3c>
    for (uint8_t i = 0 ; i < MatrixResult.NumRows ; i++)
 800167a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800167e:	3301      	adds	r3, #1
 8001680:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8001684:	7a3b      	ldrb	r3, [r7, #8]
 8001686:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800168a:	429a      	cmp	r2, r3
 800168c:	d3cc      	bcc.n	8001628 <CLinearAlgebra_Matrix_Transpose+0x34>
        }
    }

    return MatrixResult;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4618      	mov	r0, r3
 8001692:	f107 0308 	add.w	r3, r7, #8
 8001696:	2284      	movs	r2, #132	@ 0x84
 8001698:	4619      	mov	r1, r3
 800169a:	f006 fe72 	bl	8008382 <memcpy>
}
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	3790      	adds	r7, #144	@ 0x90
 80016a2:	46bd      	mov	sp, r7
 80016a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016a8:	b004      	add	sp, #16
 80016aa:	4770      	bx	lr

080016ac <CLinearAlgebra_Matrix_Determinant>:

float CLinearAlgebra_Matrix_Determinant(CLinearAlgebra_Matrix_t Matrix)
{
 80016ac:	b084      	sub	sp, #16
 80016ae:	b580      	push	{r7, lr}
 80016b0:	ed2d 8b02 	vpush	{d8}
 80016b4:	b0c6      	sub	sp, #280	@ 0x118
 80016b6:	af1e      	add	r7, sp, #120	@ 0x78
 80016b8:	f107 0cb0 	add.w	ip, r7, #176	@ 0xb0
 80016bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint8_t NumRows = Matrix.NumRows;
 80016c0:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 80016c4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t NumCols = Matrix.NumCols;
 80016c8:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 80016cc:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

    if (NumRows == 1)
 80016d0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d102      	bne.n	80016de <CLinearAlgebra_Matrix_Determinant+0x32>
    {
        return Matrix.Data[0];
 80016d8:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80016dc:	e0a6      	b.n	800182c <CLinearAlgebra_Matrix_Determinant+0x180>
    }
    else if (NumRows == 2)
 80016de:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d10e      	bne.n	8001704 <CLinearAlgebra_Matrix_Determinant+0x58>
    {
        return Matrix.Data[0] * Matrix.Data[3] - Matrix.Data[1] * Matrix.Data[2];
 80016e6:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80016ea:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 80016ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f2:	edd7 6a2e 	vldr	s13, [r7, #184]	@ 0xb8
 80016f6:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80016fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001702:	e093      	b.n	800182c <CLinearAlgebra_Matrix_Determinant+0x180>
    }

    float det = 0;
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    int sign = 1;
 800170c:	2301      	movs	r3, #1
 800170e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    CLinearAlgebra_Matrix_t SubMatrix = {0};
 8001712:	463b      	mov	r3, r7
 8001714:	2284      	movs	r2, #132	@ 0x84
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f006 fda2 	bl	8008262 <memset>

    for (int col = 0; col < NumCols; col++)
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001724:	e079      	b.n	800181a <CLinearAlgebra_Matrix_Determinant+0x16e>
    {
        int subIndex = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        for (int i = 1; i < NumRows; i++)
 800172c:	2301      	movs	r3, #1
 800172e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001732:	e033      	b.n	800179c <CLinearAlgebra_Matrix_Determinant+0xf0>
        {
            for (int j = 0; j < NumRows; j++)
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800173a:	e024      	b.n	8001786 <CLinearAlgebra_Matrix_Determinant+0xda>
            {
                if (j == col)
 800173c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001740:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001744:	429a      	cmp	r2, r3
 8001746:	d018      	beq.n	800177a <CLinearAlgebra_Matrix_Determinant+0xce>
                    continue;
                SubMatrix.Data[subIndex++] = Matrix.Data[i * NumRows + j];
 8001748:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800174c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001750:	fb03 f202 	mul.w	r2, r3, r2
 8001754:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001758:	441a      	add	r2, r3
 800175a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800175e:	1c59      	adds	r1, r3, #1
 8001760:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001764:	0092      	lsls	r2, r2, #2
 8001766:	32b0      	adds	r2, #176	@ 0xb0
 8001768:	443a      	add	r2, r7
 800176a:	3204      	adds	r2, #4
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	33a0      	adds	r3, #160	@ 0xa0
 8001772:	443b      	add	r3, r7
 8001774:	3b9c      	subs	r3, #156	@ 0x9c
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	e000      	b.n	800177c <CLinearAlgebra_Matrix_Determinant+0xd0>
                    continue;
 800177a:	bf00      	nop
            for (int j = 0; j < NumRows; j++)
 800177c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001780:	3301      	adds	r3, #1
 8001782:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001786:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800178a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800178e:	429a      	cmp	r2, r3
 8001790:	dbd4      	blt.n	800173c <CLinearAlgebra_Matrix_Determinant+0x90>
        for (int i = 1; i < NumRows; i++)
 8001792:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001796:	3301      	adds	r3, #1
 8001798:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800179c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80017a0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80017a4:	429a      	cmp	r2, r3
 80017a6:	dbc5      	blt.n	8001734 <CLinearAlgebra_Matrix_Determinant+0x88>
            }
        }
        SubMatrix.NumRows = NumRows - 1;
 80017a8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	703b      	strb	r3, [r7, #0]
        SubMatrix.NumCols = NumCols - 1;
 80017b2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80017b6:	3b01      	subs	r3, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	707b      	strb	r3, [r7, #1]
        det += sign * Matrix.Data[col] * CLinearAlgebra_Matrix_Determinant(SubMatrix);
 80017bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017c0:	ee07 3a90 	vmov	s15, r3
 80017c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	33b0      	adds	r3, #176	@ 0xb0
 80017d0:	443b      	add	r3, r7
 80017d2:	3304      	adds	r3, #4
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80017dc:	4668      	mov	r0, sp
 80017de:	f107 0310 	add.w	r3, r7, #16
 80017e2:	2274      	movs	r2, #116	@ 0x74
 80017e4:	4619      	mov	r1, r3
 80017e6:	f006 fdcc 	bl	8008382 <memcpy>
 80017ea:	463b      	mov	r3, r7
 80017ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ee:	f7ff ff5d 	bl	80016ac <CLinearAlgebra_Matrix_Determinant>
 80017f2:	eef0 7a40 	vmov.f32	s15, s0
 80017f6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80017fa:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 80017fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001802:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
        sign = -sign;
 8001806:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800180a:	425b      	negs	r3, r3
 800180c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    for (int col = 0; col < NumCols; col++)
 8001810:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001814:	3301      	adds	r3, #1
 8001816:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800181a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800181e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001822:	429a      	cmp	r2, r3
 8001824:	f6ff af7f 	blt.w	8001726 <CLinearAlgebra_Matrix_Determinant+0x7a>
    }

    return det;
 8001828:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
}
 800182c:	eeb0 0a67 	vmov.f32	s0, s15
 8001830:	37a0      	adds	r7, #160	@ 0xa0
 8001832:	46bd      	mov	sp, r7
 8001834:	ecbd 8b02 	vpop	{d8}
 8001838:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800183c:	b004      	add	sp, #16
 800183e:	4770      	bx	lr

08001840 <CLinearAlgebra_Matrix_Cofactor>:

CLinearAlgebra_Matrix_t CLinearAlgebra_Matrix_Cofactor(CLinearAlgebra_Matrix_t Matrix, uint8_t p, uint8_t q)
{
 8001840:	b084      	sub	sp, #16
 8001842:	b580      	push	{r7, lr}
 8001844:	b0a8      	sub	sp, #160	@ 0xa0
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 800184e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    CLinearAlgebra_Matrix_t MatrixCofactor = {0};
 8001852:	f107 0308 	add.w	r3, r7, #8
 8001856:	2284      	movs	r2, #132	@ 0x84
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f006 fd01 	bl	8008262 <memset>
    uint8_t N = Matrix.NumRows;
 8001860:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8001864:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

    // Assign matrix dimension
    MatrixCofactor.NumRows = N - 1;
 8001868:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800186c:	3b01      	subs	r3, #1
 800186e:	b2db      	uxtb	r3, r3
 8001870:	723b      	strb	r3, [r7, #8]
    MatrixCofactor.NumCols = N - 1;
 8001872:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001876:	3b01      	subs	r3, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	727b      	strb	r3, [r7, #9]

    int i = 0, j = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001882:	2300      	movs	r3, #0
 8001884:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    for (int row = 0; row < N; row++) 
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800188e:	e04e      	b.n	800192e <CLinearAlgebra_Matrix_Cofactor+0xee>
    {
        for (int col = 0; col < N; col++) 
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001896:	e03f      	b.n	8001918 <CLinearAlgebra_Matrix_Cofactor+0xd8>
        {
            if (row != p && col != q) 
 8001898:	f897 3130 	ldrb.w	r3, [r7, #304]	@ 0x130
 800189c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d034      	beq.n	800190e <CLinearAlgebra_Matrix_Cofactor+0xce>
 80018a4:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 80018a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d02e      	beq.n	800190e <CLinearAlgebra_Matrix_Cofactor+0xce>
            {
                MatrixCofactor.Data[i * (N - 1) + j++] = Matrix.Data[row * N + col];
 80018b0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80018b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80018b8:	fb03 f202 	mul.w	r2, r3, r2
 80018bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80018c0:	441a      	add	r2, r3
 80018c2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80018cc:	fb03 f101 	mul.w	r1, r3, r1
 80018d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018d4:	1c58      	adds	r0, r3, #1
 80018d6:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
 80018da:	440b      	add	r3, r1
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	32a8      	adds	r2, #168	@ 0xa8
 80018e0:	443a      	add	r2, r7
 80018e2:	3208      	adds	r2, #8
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	33a0      	adds	r3, #160	@ 0xa0
 80018ea:	443b      	add	r3, r7
 80018ec:	3b94      	subs	r3, #148	@ 0x94
 80018ee:	601a      	str	r2, [r3, #0]
                if (j == N - 1) 
 80018f0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80018f4:	3b01      	subs	r3, #1
 80018f6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d107      	bne.n	800190e <CLinearAlgebra_Matrix_Cofactor+0xce>
                {
                    j = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                    i++;
 8001904:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001908:	3301      	adds	r3, #1
 800190a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        for (int col = 0; col < N; col++) 
 800190e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001912:	3301      	adds	r3, #1
 8001914:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001918:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800191c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001920:	429a      	cmp	r2, r3
 8001922:	dbb9      	blt.n	8001898 <CLinearAlgebra_Matrix_Cofactor+0x58>
    for (int row = 0; row < N; row++) 
 8001924:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001928:	3301      	adds	r3, #1
 800192a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800192e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001932:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001936:	429a      	cmp	r2, r3
 8001938:	dbaa      	blt.n	8001890 <CLinearAlgebra_Matrix_Cofactor+0x50>
                }
            }
        }
    }

    return MatrixCofactor;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4618      	mov	r0, r3
 800193e:	f107 0308 	add.w	r3, r7, #8
 8001942:	2284      	movs	r2, #132	@ 0x84
 8001944:	4619      	mov	r1, r3
 8001946:	f006 fd1c 	bl	8008382 <memcpy>
}
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	37a0      	adds	r7, #160	@ 0xa0
 800194e:	46bd      	mov	sp, r7
 8001950:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001954:	b004      	add	sp, #16
 8001956:	4770      	bx	lr

08001958 <CLinearAlgebra_Matrix_Adjugate>:

CLinearAlgebra_Matrix_t CLinearAlgebra_Matrix_Adjugate(CLinearAlgebra_Matrix_t Matrix)
{
 8001958:	b084      	sub	sp, #16
 800195a:	b590      	push	{r4, r7, lr}
 800195c:	ed2d 8b02 	vpush	{d8}
 8001960:	b0e9      	sub	sp, #420	@ 0x1a4
 8001962:	af20      	add	r7, sp, #128	@ 0x80
 8001964:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8001968:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 800196c:	6020      	str	r0, [r4, #0]
 800196e:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8001972:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    CLinearAlgebra_Matrix_t MatrixAdjugate = {0};
 8001976:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800197a:	2284      	movs	r2, #132	@ 0x84
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f006 fc6f 	bl	8008262 <memset>
    CLinearAlgebra_Matrix_t MatrixCofactor = {0};
 8001984:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001988:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800198c:	4618      	mov	r0, r3
 800198e:	2384      	movs	r3, #132	@ 0x84
 8001990:	461a      	mov	r2, r3
 8001992:	2100      	movs	r1, #0
 8001994:	f006 fc65 	bl	8008262 <memset>

    uint8_t N = Matrix.NumRows;
 8001998:	f897 313c 	ldrb.w	r3, [r7, #316]	@ 0x13c
 800199c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    if (N == 1) 
 80019a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d110      	bne.n	80019ca <CLinearAlgebra_Matrix_Adjugate+0x72>
    {
        MatrixAdjugate.Data[0] = 1;
 80019a8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80019ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

        return MatrixAdjugate;
 80019b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80019b4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80019c0:	2284      	movs	r2, #132	@ 0x84
 80019c2:	4619      	mov	r1, r3
 80019c4:	f006 fcdd 	bl	8008382 <memcpy>
 80019c8:	e07a      	b.n	8001ac0 <CLinearAlgebra_Matrix_Adjugate+0x168>
    }

    int sign;

    for (int i = 0; i < N; i++) 
 80019ca:	2300      	movs	r3, #0
 80019cc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80019d0:	e064      	b.n	8001a9c <CLinearAlgebra_Matrix_Adjugate+0x144>
    {
        for (int j = 0; j < N; j++) 
 80019d2:	2300      	movs	r3, #0
 80019d4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80019d8:	e055      	b.n	8001a86 <CLinearAlgebra_Matrix_Adjugate+0x12e>
        {
            MatrixCofactor = CLinearAlgebra_Matrix_Cofactor(Matrix, i, j);
 80019da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80019ea:	f5a1 748c 	sub.w	r4, r1, #280	@ 0x118
 80019ee:	921f      	str	r2, [sp, #124]	@ 0x7c
 80019f0:	931e      	str	r3, [sp, #120]	@ 0x78
 80019f2:	4668      	mov	r0, sp
 80019f4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80019f8:	2278      	movs	r2, #120	@ 0x78
 80019fa:	4619      	mov	r1, r3
 80019fc:	f006 fcc1 	bl	8008382 <memcpy>
 8001a00:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8001a04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a06:	4620      	mov	r0, r4
 8001a08:	f7ff ff1a 	bl	8001840 <CLinearAlgebra_Matrix_Cofactor>

            sign = ((i + j) % 2 == 0) ? 1 : -1;
 8001a0c:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a10:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a14:	4413      	add	r3, r2
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <CLinearAlgebra_Matrix_Adjugate+0xca>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e001      	b.n	8001a26 <CLinearAlgebra_Matrix_Adjugate+0xce>
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            MatrixAdjugate.Data[j * N + i] = sign * CLinearAlgebra_Matrix_Determinant(MatrixCofactor);
 8001a2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001a36:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001a3a:	f5a3 748c 	sub.w	r4, r3, #280	@ 0x118
 8001a3e:	4668      	mov	r0, sp
 8001a40:	f104 0310 	add.w	r3, r4, #16
 8001a44:	2274      	movs	r2, #116	@ 0x74
 8001a46:	4619      	mov	r1, r3
 8001a48:	f006 fc9b 	bl	8008382 <memcpy>
 8001a4c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a50:	f7ff fe2c 	bl	80016ac <CLinearAlgebra_Matrix_Determinant>
 8001a54:	eef0 7a40 	vmov.f32	s15, s0
 8001a58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001a5c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001a60:	fb03 f202 	mul.w	r2, r3, r2
 8001a64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001a68:	4413      	add	r3, r2
 8001a6a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8001a74:	443b      	add	r3, r7
 8001a76:	3b90      	subs	r3, #144	@ 0x90
 8001a78:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < N; j++) 
 8001a7c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a80:	3301      	adds	r3, #1
 8001a82:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001a86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001a8a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	dba3      	blt.n	80019da <CLinearAlgebra_Matrix_Adjugate+0x82>
    for (int i = 0; i < N; i++) 
 8001a92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001a96:	3301      	adds	r3, #1
 8001a98:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001a9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001aa0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	db94      	blt.n	80019d2 <CLinearAlgebra_Matrix_Adjugate+0x7a>
        }
    }

    return MatrixAdjugate;
 8001aa8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001aac:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001ab8:	2284      	movs	r2, #132	@ 0x84
 8001aba:	4619      	mov	r1, r3
 8001abc:	f006 fc61 	bl	8008382 <memcpy>
}
 8001ac0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ac4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	ecbd 8b02 	vpop	{d8}
 8001ad4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001ad8:	b004      	add	sp, #16
 8001ada:	4770      	bx	lr

08001adc <CLinearAlgebra_Matrix_Inverse>:

CLinearAlgebra_Matrix_t CLinearAlgebra_Matrix_Inverse(CLinearAlgebra_Matrix_t Matrix)
{
 8001adc:	b084      	sub	sp, #16
 8001ade:	b5b0      	push	{r4, r5, r7, lr}
 8001ae0:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8001ae4:	af1e      	add	r7, sp, #120	@ 0x78
 8001ae6:	f507 74d4 	add.w	r4, r7, #424	@ 0x1a8
 8001aea:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8001aee:	6020      	str	r0, [r4, #0]
 8001af0:	f507 70de 	add.w	r0, r7, #444	@ 0x1bc
 8001af4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    CLinearAlgebra_Matrix_t MatrixInverse = {0};
 8001af8:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001afc:	2284      	movs	r2, #132	@ 0x84
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f006 fbae 	bl	8008262 <memset>
    CLinearAlgebra_Matrix_t MatrixAdjugate = {0};
 8001b06:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001b0a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b0e:	4618      	mov	r0, r3
 8001b10:	2384      	movs	r3, #132	@ 0x84
 8001b12:	461a      	mov	r2, r3
 8001b14:	2100      	movs	r1, #0
 8001b16:	f006 fba4 	bl	8008262 <memset>

    // Assign matrix dimension
    MatrixInverse.NumRows = Matrix.NumRows;
 8001b1a:	f897 31bc 	ldrb.w	r3, [r7, #444]	@ 0x1bc
 8001b1e:	f887 3114 	strb.w	r3, [r7, #276]	@ 0x114
    MatrixInverse.NumCols = Matrix.NumCols;
 8001b22:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8001b26:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115

    uint8_t N = Matrix.NumRows;
 8001b2a:	f897 31bc 	ldrb.w	r3, [r7, #444]	@ 0x1bc
 8001b2e:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f

    float det = CLinearAlgebra_Matrix_Determinant(Matrix);
 8001b32:	4668      	mov	r0, sp
 8001b34:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 8001b38:	2274      	movs	r2, #116	@ 0x74
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f006 fc21 	bl	8008382 <memcpy>
 8001b40:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8001b44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b46:	f7ff fdb1 	bl	80016ac <CLinearAlgebra_Matrix_Determinant>
 8001b4a:	ed87 0a66 	vstr	s0, [r7, #408]	@ 0x198
    if (det == 0) 
 8001b4e:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8001b52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5a:	d10c      	bne.n	8001b76 <CLinearAlgebra_Matrix_Inverse+0x9a>
    {
        return MatrixInverse;
 8001b5c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001b60:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001b6c:	2284      	movs	r2, #132	@ 0x84
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f006 fc07 	bl	8008382 <memcpy>
 8001b74:	e06b      	b.n	8001c4e <CLinearAlgebra_Matrix_Inverse+0x172>
    }

    MatrixAdjugate = CLinearAlgebra_Matrix_Adjugate(Matrix);
 8001b76:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001b7a:	f5a3 758c 	sub.w	r5, r3, #280	@ 0x118
 8001b7e:	463c      	mov	r4, r7
 8001b80:	4668      	mov	r0, sp
 8001b82:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8001b86:	2278      	movs	r2, #120	@ 0x78
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f006 fbfa 	bl	8008382 <memcpy>
 8001b8e:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8001b92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b94:	4620      	mov	r0, r4
 8001b96:	f7ff fedf 	bl	8001958 <CLinearAlgebra_Matrix_Adjugate>
 8001b9a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001b9e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001ba2:	4628      	mov	r0, r5
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	2384      	movs	r3, #132	@ 0x84
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f006 fbea 	bl	8008382 <memcpy>

    for (int i = 0; i < N; i++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001bb4:	e039      	b.n	8001c2a <CLinearAlgebra_Matrix_Inverse+0x14e>
    {
        for (int j = 0; j < N; j++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001bbc:	e02a      	b.n	8001c14 <CLinearAlgebra_Matrix_Inverse+0x138>
        {
            MatrixInverse.Data[i * N + j] = MatrixAdjugate.Data[i * N + j] / det;
 8001bbe:	f897 319f 	ldrb.w	r3, [r7, #415]	@ 0x19f
 8001bc2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8001bc6:	fb03 f202 	mul.w	r2, r3, r2
 8001bca:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001bce:	4413      	add	r3, r2
 8001bd0:	f507 72d4 	add.w	r2, r7, #424	@ 0x1a8
 8001bd4:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	3304      	adds	r3, #4
 8001bde:	edd3 6a00 	vldr	s13, [r3]
 8001be2:	f897 319f 	ldrb.w	r3, [r7, #415]	@ 0x19f
 8001be6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8001bea:	fb03 f202 	mul.w	r2, r3, r2
 8001bee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001bf2:	4413      	add	r3, r2
 8001bf4:	ed97 7a66 	vldr	s14, [r7, #408]	@ 0x198
 8001bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8001c02:	443b      	add	r3, r7
 8001c04:	3b90      	subs	r3, #144	@ 0x90
 8001c06:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < N; j++)
 8001c0a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001c0e:	3301      	adds	r3, #1
 8001c10:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001c14:	f897 319f 	ldrb.w	r3, [r7, #415]	@ 0x19f
 8001c18:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	dbce      	blt.n	8001bbe <CLinearAlgebra_Matrix_Inverse+0xe2>
    for (int i = 0; i < N; i++)
 8001c20:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001c24:	3301      	adds	r3, #1
 8001c26:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001c2a:	f897 319f 	ldrb.w	r3, [r7, #415]	@ 0x19f
 8001c2e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8001c32:	429a      	cmp	r2, r3
 8001c34:	dbbf      	blt.n	8001bb6 <CLinearAlgebra_Matrix_Inverse+0xda>
        }
    }

    return MatrixInverse;
 8001c36:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001c3a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001c46:	2284      	movs	r2, #132	@ 0x84
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f006 fb9a 	bl	8008382 <memcpy>
}
 8001c4e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001c52:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001c62:	b004      	add	sp, #16
 8001c64:	4770      	bx	lr
	...

08001c68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b1f      	ldr	r3, [pc, #124]	@ (8001d00 <MX_GPIO_Init+0x98>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	4a1e      	ldr	r2, [pc, #120]	@ (8001d00 <MX_GPIO_Init+0x98>)
 8001c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d00 <MX_GPIO_Init+0x98>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	4b18      	ldr	r3, [pc, #96]	@ (8001d00 <MX_GPIO_Init+0x98>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a17      	ldr	r2, [pc, #92]	@ (8001d00 <MX_GPIO_Init+0x98>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <MX_GPIO_Init+0x98>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	603b      	str	r3, [r7, #0]
 8001cba:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <MX_GPIO_Init+0x98>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	4a10      	ldr	r2, [pc, #64]	@ (8001d00 <MX_GPIO_Init+0x98>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <MX_GPIO_Init+0x98>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2110      	movs	r1, #16
 8001cd6:	480b      	ldr	r0, [pc, #44]	@ (8001d04 <MX_GPIO_Init+0x9c>)
 8001cd8:	f001 f83a 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cdc:	2310      	movs	r3, #16
 8001cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	f107 030c 	add.w	r3, r7, #12
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4804      	ldr	r0, [pc, #16]	@ (8001d04 <MX_GPIO_Init+0x9c>)
 8001cf4:	f000 fe90 	bl	8002a18 <HAL_GPIO_Init>

}
 8001cf8:	bf00      	nop
 8001cfa:	3720      	adds	r7, #32
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020000 	.word	0x40020000

08001d08 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d0c:	4b12      	ldr	r3, [pc, #72]	@ (8001d58 <MX_I2C2_Init+0x50>)
 8001d0e:	4a13      	ldr	r2, [pc, #76]	@ (8001d5c <MX_I2C2_Init+0x54>)
 8001d10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001d12:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <MX_I2C2_Init+0x50>)
 8001d14:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <MX_I2C2_Init+0x58>)
 8001d16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	@ (8001d58 <MX_I2C2_Init+0x50>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d58 <MX_I2C2_Init+0x50>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	@ (8001d58 <MX_I2C2_Init+0x50>)
 8001d26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d2a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <MX_I2C2_Init+0x50>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001d32:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <MX_I2C2_Init+0x50>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d38:	4b07      	ldr	r3, [pc, #28]	@ (8001d58 <MX_I2C2_Init+0x50>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d3e:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <MX_I2C2_Init+0x50>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d44:	4804      	ldr	r0, [pc, #16]	@ (8001d58 <MX_I2C2_Init+0x50>)
 8001d46:	f001 f81d 	bl	8002d84 <HAL_I2C_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001d50:	f000 fa96 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200001f0 	.word	0x200001f0
 8001d5c:	40005800 	.word	0x40005800
 8001d60:	000186a0 	.word	0x000186a0

08001d64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	@ 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a19      	ldr	r2, [pc, #100]	@ (8001de8 <HAL_I2C_MspInit+0x84>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d12c      	bne.n	8001de0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b18      	ldr	r3, [pc, #96]	@ (8001dec <HAL_I2C_MspInit+0x88>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	4a17      	ldr	r2, [pc, #92]	@ (8001dec <HAL_I2C_MspInit+0x88>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d96:	4b15      	ldr	r3, [pc, #84]	@ (8001dec <HAL_I2C_MspInit+0x88>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001da2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da8:	2312      	movs	r3, #18
 8001daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db0:	2303      	movs	r3, #3
 8001db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001db4:	2304      	movs	r3, #4
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480c      	ldr	r0, [pc, #48]	@ (8001df0 <HAL_I2C_MspInit+0x8c>)
 8001dc0:	f000 fe2a 	bl	8002a18 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	4b08      	ldr	r3, [pc, #32]	@ (8001dec <HAL_I2C_MspInit+0x88>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dcc:	4a07      	ldr	r2, [pc, #28]	@ (8001dec <HAL_I2C_MspInit+0x88>)
 8001dce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001dd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd4:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <HAL_I2C_MspInit+0x88>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	@ 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40005800 	.word	0x40005800
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020400 	.word	0x40020400

08001df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df6:	b0a3      	sub	sp, #140	@ 0x8c
 8001df8:	af08      	add	r7, sp, #32
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001dfa:	f000 fc91 	bl	8002720 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001dfe:	f000 f907 	bl	8002010 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001e02:	f7ff ff31 	bl	8001c68 <MX_GPIO_Init>
    MX_I2C2_Init();
 8001e06:	f7ff ff7f 	bl	8001d08 <MX_I2C2_Init>
    MX_SPI1_Init();
 8001e0a:	f000 fa3f 	bl	800228c <MX_SPI1_Init>
    MX_USART1_UART_Init();
 8001e0e:	f000 fbeb 	bl	80025e8 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    icm42688_handle = icm42688_init();
 8001e12:	f004 fc7a 	bl	800670a <icm42688_init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4a70      	ldr	r2, [pc, #448]	@ (8001fdc <main+0x1e8>)
 8001e1a:	6013      	str	r3, [r2, #0]
    icm42688_cfg_t icm42688_cfg = {
 8001e1c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001e20:	222c      	movs	r2, #44	@ 0x2c
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f006 fa1c 	bl	8008262 <memset>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8001e30:	2306      	movs	r3, #6
 8001e32:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001e36:	2303      	movs	r3, #3
 8001e38:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001e3c:	2306      	movs	r3, #6
 8001e3e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8001e42:	2313      	movs	r3, #19
 8001e44:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001e48:	2315      	movs	r3, #21
 8001e4a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8001e4e:	231a      	movs	r3, #26
 8001e50:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001e54:	230c      	movs	r3, #12
 8001e56:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001e5a:	2311      	movs	r3, #17
 8001e5c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001e60:	2301      	movs	r3, #1
 8001e62:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8001e66:	4b5e      	ldr	r3, [pc, #376]	@ (8001fe0 <main+0x1ec>)
 8001e68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e6a:	4b5e      	ldr	r3, [pc, #376]	@ (8001fe4 <main+0x1f0>)
 8001e6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e6e:	4b5e      	ldr	r3, [pc, #376]	@ (8001fe8 <main+0x1f4>)
 8001e70:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e72:	4b5e      	ldr	r3, [pc, #376]	@ (8001fec <main+0x1f8>)
 8001e74:	667b      	str	r3, [r7, #100]	@ 0x64
        .spi_send       = hw_intf_icm42688_spi_send,
        .spi_recv       = hw_intf_icm42688_spi_recv,
        .set_cs         = hw_intf_icm42688_set_cs,
        .delay          = HAL_Delay
    };
    icm42688_set_config(icm42688_handle, icm42688_cfg);
 8001e76:	4b59      	ldr	r3, [pc, #356]	@ (8001fdc <main+0x1e8>)
 8001e78:	681e      	ldr	r6, [r3, #0]
 8001e7a:	466d      	mov	r5, sp
 8001e7c:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8001e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e88:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001e8c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001e90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e92:	4630      	mov	r0, r6
 8001e94:	f004 fc4c 	bl	8006730 <icm42688_set_config>
    icm42688_config(icm42688_handle);
 8001e98:	4b50      	ldr	r3, [pc, #320]	@ (8001fdc <main+0x1e8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f004 fd07 	bl	80068b0 <icm42688_config>

    bmp280_cfg_t bmp280_cfg = {
 8001ea2:	f107 031c 	add.w	r3, r7, #28
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f006 f9d9 	bl	8008262 <memset>
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	773b      	strb	r3, [r7, #28]
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	77bb      	strb	r3, [r7, #30]
 8001eb8:	2303      	movs	r3, #3
 8001eba:	77fb      	strb	r3, [r7, #31]
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	f887 3020 	strb.w	r3, [r7, #32]
 8001ec2:	4b4b      	ldr	r3, [pc, #300]	@ (8001ff0 <main+0x1fc>)
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ec6:	4b4b      	ldr	r3, [pc, #300]	@ (8001ff4 <main+0x200>)
 8001ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001eca:	4b48      	ldr	r3, [pc, #288]	@ (8001fec <main+0x1f8>)
 8001ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
        .comm_mode                  = CONFIG_BMP280_COMM_MODE,
        .i2c_send                   = hw_intf_bmp280_i2c_send,
        .i2c_recv                   = hw_intf_bmp280_i2c_recv,
        .delay                      = HAL_Delay,
    };
    bmp280_handle = bmp280_init();
 8001ece:	f004 f992 	bl	80061f6 <bmp280_init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4a48      	ldr	r2, [pc, #288]	@ (8001ff8 <main+0x204>)
 8001ed6:	6013      	str	r3, [r2, #0]
    bmp280_set_config(bmp280_handle, bmp280_cfg);
 8001ed8:	4b47      	ldr	r3, [pc, #284]	@ (8001ff8 <main+0x204>)
 8001eda:	681e      	ldr	r6, [r3, #0]
 8001edc:	466d      	mov	r5, sp
 8001ede:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	602b      	str	r3, [r5, #0]
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ef0:	4630      	mov	r0, r6
 8001ef2:	f004 f993 	bl	800621c <bmp280_set_config>
    bmp280_config(bmp280_handle);
 8001ef6:	4b40      	ldr	r3, [pc, #256]	@ (8001ff8 <main+0x204>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f004 f9cc 	bl	8006298 <bmp280_config>

    kalman_height_estimation_handle = kalman_height_estimation_init();
 8001f00:	f004 fdfc 	bl	8006afc <kalman_height_estimation_init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4a3d      	ldr	r2, [pc, #244]	@ (8001ffc <main+0x208>)
 8001f08:	6013      	str	r3, [r2, #0]
    kalman_height_estimation_cfg_t kalman_height_estimation_cfg = {
 8001f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002000 <main+0x20c>)
 8001f0c:	61bb      	str	r3, [r7, #24]
        .dt = 0.04f,
    };
    kalman_height_estimation_set_config(kalman_height_estimation_handle, kalman_height_estimation_cfg);
 8001f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001ffc <main+0x208>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	ed97 0a06 	vldr	s0, [r7, #24]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f004 fe04 	bl	8006b24 <kalman_height_estimation_set_config>
    kalman_height_estimation_config(kalman_height_estimation_handle);
 8001f1c:	4b37      	ldr	r3, [pc, #220]	@ (8001ffc <main+0x208>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f004 fe0f 	bl	8006b44 <kalman_height_estimation_config>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        float pressure = 0.0;
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
        float altitude = 0.0, altitude_kalman = 0.0;
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
        float accel_x, accel_y, accel_z;

        bmp280_get_pressure(bmp280_handle, &pressure);
 8001f38:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff8 <main+0x204>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f107 0214 	add.w	r2, r7, #20
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f004 fac7 	bl	80064d6 <bmp280_get_pressure>
        bmp280_convert_pressure_to_altitude(bmp280_handle, pressure / 100, &altitude);
 8001f48:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff8 <main+0x204>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f50:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8002004 <main+0x210>
 8001f54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f58:	f107 0210 	add.w	r2, r7, #16
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 faf0 	bl	8006548 <bmp280_convert_pressure_to_altitude>

        icm42688_get_accel_scale(icm42688_handle, &accel_x, &accel_y, &accel_z);
 8001f68:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <main+0x1e8>)
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	463b      	mov	r3, r7
 8001f6e:	1d3a      	adds	r2, r7, #4
 8001f70:	f107 0108 	add.w	r1, r7, #8
 8001f74:	f004 fd54 	bl	8006a20 <icm42688_get_accel_scale>

        kalman_height_estimation_update(kalman_height_estimation_handle, accel_z, altitude);
 8001f78:	4b20      	ldr	r3, [pc, #128]	@ (8001ffc <main+0x208>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	edd7 7a00 	vldr	s15, [r7]
 8001f80:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f84:	eef0 0a47 	vmov.f32	s1, s14
 8001f88:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f004 ff57 	bl	8006e40 <kalman_height_estimation_update>
        kalman_height_estimation_get_height(kalman_height_estimation_handle, &altitude_kalman);
 8001f92:	4b1a      	ldr	r3, [pc, #104]	@ (8001ffc <main+0x208>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f107 020c 	add.w	r2, r7, #12
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f005 faf3 	bl	8007588 <kalman_height_estimation_get_height>
//        sprintf((char *)log_buf, "\n%f,%f,%f,%f,%f,%f,%f,%f,%f,0",
//                accel_x, accel_y, accel_z,
//                0.0f, 0.0f, 0.0f,
//				0.0f, 0.0f, 0.0f);

        sprintf((char *)log_buf, "%f,%f\n", pressure, altitude_kalman);
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe facf 	bl	8000548 <__aeabi_f2d>
 8001faa:	4604      	mov	r4, r0
 8001fac:	460d      	mov	r5, r1
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fac9 	bl	8000548 <__aeabi_f2d>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	e9cd 2300 	strd	r2, r3, [sp]
 8001fbe:	4622      	mov	r2, r4
 8001fc0:	462b      	mov	r3, r5
 8001fc2:	4911      	ldr	r1, [pc, #68]	@ (8002008 <main+0x214>)
 8001fc4:	4811      	ldr	r0, [pc, #68]	@ (800200c <main+0x218>)
 8001fc6:	f006 f8e7 	bl	8008198 <siprintf>

        hw_intf_uart_debug_send(log_buf);
 8001fca:	4810      	ldr	r0, [pc, #64]	@ (800200c <main+0x218>)
 8001fcc:	f000 f942 	bl	8002254 <hw_intf_uart_debug_send>

        HAL_Delay(40);
 8001fd0:	2028      	movs	r0, #40	@ 0x28
 8001fd2:	f000 fc17 	bl	8002804 <HAL_Delay>
    {
 8001fd6:	bf00      	nop
 8001fd8:	e7a5      	b.n	8001f26 <main+0x132>
 8001fda:	bf00      	nop
 8001fdc:	20000248 	.word	0x20000248
 8001fe0:	080020e5 	.word	0x080020e5
 8001fe4:	0800210d 	.word	0x0800210d
 8001fe8:	08002135 	.word	0x08002135
 8001fec:	08002805 	.word	0x08002805
 8001ff0:	08002159 	.word	0x08002159
 8001ff4:	08002211 	.word	0x08002211
 8001ff8:	20000244 	.word	0x20000244
 8001ffc:	2000024c 	.word	0x2000024c
 8002000:	3d23d70a 	.word	0x3d23d70a
 8002004:	42c80000 	.word	0x42c80000
 8002008:	0800b150 	.word	0x0800b150
 800200c:	20000250 	.word	0x20000250

08002010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b094      	sub	sp, #80	@ 0x50
 8002014:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002016:	f107 0320 	add.w	r3, r7, #32
 800201a:	2230      	movs	r2, #48	@ 0x30
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f006 f91f 	bl	8008262 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	4b28      	ldr	r3, [pc, #160]	@ (80020dc <SystemClock_Config+0xcc>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203c:	4a27      	ldr	r2, [pc, #156]	@ (80020dc <SystemClock_Config+0xcc>)
 800203e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002042:	6413      	str	r3, [r2, #64]	@ 0x40
 8002044:	4b25      	ldr	r3, [pc, #148]	@ (80020dc <SystemClock_Config+0xcc>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002050:	2300      	movs	r3, #0
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	4b22      	ldr	r3, [pc, #136]	@ (80020e0 <SystemClock_Config+0xd0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a21      	ldr	r2, [pc, #132]	@ (80020e0 <SystemClock_Config+0xd0>)
 800205a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b1f      	ldr	r3, [pc, #124]	@ (80020e0 <SystemClock_Config+0xd0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800206c:	2302      	movs	r3, #2
 800206e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002070:	2301      	movs	r3, #1
 8002072:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002074:	2310      	movs	r3, #16
 8002076:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002078:	2302      	movs	r3, #2
 800207a:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800207c:	2300      	movs	r3, #0
 800207e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8002080:	2308      	movs	r3, #8
 8002082:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 8002084:	23a8      	movs	r3, #168	@ 0xa8
 8002086:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002088:	2302      	movs	r3, #2
 800208a:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 800208c:	2304      	movs	r3, #4
 800208e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002090:	f107 0320 	add.w	r3, r7, #32
 8002094:	4618      	mov	r0, r3
 8002096:	f001 fe6f 	bl	8003d78 <HAL_RCC_OscConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <SystemClock_Config+0x94>
    {
        Error_Handler();
 80020a0:	f000 f8ee 	bl	8002280 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80020a4:	230f      	movs	r3, #15
 80020a6:	60fb      	str	r3, [r7, #12]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020a8:	2302      	movs	r3, #2
 80020aa:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020b4:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ba:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	2105      	movs	r1, #5
 80020c2:	4618      	mov	r0, r3
 80020c4:	f002 f8d0 	bl	8004268 <HAL_RCC_ClockConfig>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <SystemClock_Config+0xc2>
    {
        Error_Handler();
 80020ce:	f000 f8d7 	bl	8002280 <Error_Handler>
    }
}
 80020d2:	bf00      	nop
 80020d4:	3750      	adds	r7, #80	@ 0x50
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40007000 	.word	0x40007000

080020e4 <hw_intf_icm42688_spi_send>:

/* USER CODE BEGIN 4 */
err_code_t hw_intf_icm42688_spi_send(uint8_t *buf_send, uint16_t len)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&ICM42688_SPI, buf_send, len, 100);
 80020f0:	887a      	ldrh	r2, [r7, #2]
 80020f2:	2364      	movs	r3, #100	@ 0x64
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4804      	ldr	r0, [pc, #16]	@ (8002108 <hw_intf_icm42688_spi_send+0x24>)
 80020f8:	f002 fb5f 	bl	80047ba <HAL_SPI_Transmit>

    return ERR_CODE_SUCCESS;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200002b4 	.word	0x200002b4

0800210c <hw_intf_icm42688_spi_recv>:

err_code_t hw_intf_icm42688_spi_recv(uint8_t *buf_recv, uint16_t len)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&ICM42688_SPI, buf_recv, len, 100);
 8002118:	887a      	ldrh	r2, [r7, #2]
 800211a:	2364      	movs	r3, #100	@ 0x64
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4804      	ldr	r0, [pc, #16]	@ (8002130 <hw_intf_icm42688_spi_recv+0x24>)
 8002120:	f002 fc8f 	bl	8004a42 <HAL_SPI_Receive>

    return ERR_CODE_SUCCESS;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200002b4 	.word	0x200002b4

08002134 <hw_intf_icm42688_set_cs>:

err_code_t hw_intf_icm42688_set_cs(uint8_t level)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ICM42688_GPIO_PORT_CS, ICM42688_GPIO_PIN_CS, level);
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	461a      	mov	r2, r3
 8002142:	2110      	movs	r1, #16
 8002144:	4803      	ldr	r0, [pc, #12]	@ (8002154 <hw_intf_icm42688_set_cs+0x20>)
 8002146:	f000 fe03 	bl	8002d50 <HAL_GPIO_WritePin>

    return ERR_CODE_SUCCESS;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40020000 	.word	0x40020000

08002158 <hw_intf_bmp280_i2c_send>:

err_code_t hw_intf_bmp280_i2c_send(uint8_t reg_addr, uint8_t *buf, uint16_t len)
{
 8002158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800215c:	b089      	sub	sp, #36	@ 0x24
 800215e:	af02      	add	r7, sp, #8
 8002160:	4603      	mov	r3, r0
 8002162:	6039      	str	r1, [r7, #0]
 8002164:	71fb      	strb	r3, [r7, #7]
 8002166:	4613      	mov	r3, r2
 8002168:	80bb      	strh	r3, [r7, #4]
 800216a:	466b      	mov	r3, sp
 800216c:	461e      	mov	r6, r3
    uint8_t buf_send[len + 1];
 800216e:	88bb      	ldrh	r3, [r7, #4]
 8002170:	1c59      	adds	r1, r3, #1
 8002172:	1e4b      	subs	r3, r1, #1
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	460a      	mov	r2, r1
 8002178:	2300      	movs	r3, #0
 800217a:	4690      	mov	r8, r2
 800217c:	4699      	mov	r9, r3
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	f04f 0300 	mov.w	r3, #0
 8002186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800218a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800218e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002192:	460a      	mov	r2, r1
 8002194:	2300      	movs	r3, #0
 8002196:	4614      	mov	r4, r2
 8002198:	461d      	mov	r5, r3
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	00eb      	lsls	r3, r5, #3
 80021a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021a8:	00e2      	lsls	r2, r4, #3
 80021aa:	460b      	mov	r3, r1
 80021ac:	3307      	adds	r3, #7
 80021ae:	08db      	lsrs	r3, r3, #3
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	ebad 0d03 	sub.w	sp, sp, r3
 80021b6:	ab02      	add	r3, sp, #8
 80021b8:	3300      	adds	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
    buf_send[0] = reg_addr;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	79fa      	ldrb	r2, [r7, #7]
 80021c0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < len; i++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	75fb      	strb	r3, [r7, #23]
 80021c6:	e00a      	b.n	80021de <hw_intf_bmp280_i2c_send+0x86>
    {
        buf_send[i + 1] = buf[i];
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	441a      	add	r2, r3
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
 80021d0:	3301      	adds	r3, #1
 80021d2:	7811      	ldrb	r1, [r2, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < len; i++)
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
 80021da:	3301      	adds	r3, #1
 80021dc:	75fb      	strb	r3, [r7, #23]
 80021de:	7dfb      	ldrb	r3, [r7, #23]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	88ba      	ldrh	r2, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d8ef      	bhi.n	80021c8 <hw_intf_bmp280_i2c_send+0x70>
    }

    HAL_I2C_Master_Transmit(&BMP280_I2C, I2C_ADDR_BMP280, buf_send, len + 1, 100);
 80021e8:	88bb      	ldrh	r3, [r7, #4]
 80021ea:	3301      	adds	r3, #1
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	2264      	movs	r2, #100	@ 0x64
 80021f0:	9200      	str	r2, [sp, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	21ec      	movs	r1, #236	@ 0xec
 80021f6:	4805      	ldr	r0, [pc, #20]	@ (800220c <hw_intf_bmp280_i2c_send+0xb4>)
 80021f8:	f000 ff08 	bl	800300c <HAL_I2C_Master_Transmit>

    return ERR_CODE_SUCCESS;
 80021fc:	2300      	movs	r3, #0
 80021fe:	46b5      	mov	sp, r6
}
 8002200:	4618      	mov	r0, r3
 8002202:	371c      	adds	r7, #28
 8002204:	46bd      	mov	sp, r7
 8002206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800220a:	bf00      	nop
 800220c:	200001f0 	.word	0x200001f0

08002210 <hw_intf_bmp280_i2c_recv>:

err_code_t hw_intf_bmp280_i2c_recv(uint8_t reg_addr, uint8_t *buf, uint16_t len)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af02      	add	r7, sp, #8
 8002216:	4603      	mov	r3, r0
 8002218:	6039      	str	r1, [r7, #0]
 800221a:	71fb      	strb	r3, [r7, #7]
 800221c:	4613      	mov	r3, r2
 800221e:	80bb      	strh	r3, [r7, #4]
    uint8_t buffer[1];
    buffer[0] = reg_addr;
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	733b      	strb	r3, [r7, #12]

    HAL_I2C_Master_Transmit(&BMP280_I2C, I2C_ADDR_BMP280, buffer, 1, 100);
 8002224:	f107 020c 	add.w	r2, r7, #12
 8002228:	2364      	movs	r3, #100	@ 0x64
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	2301      	movs	r3, #1
 800222e:	21ec      	movs	r1, #236	@ 0xec
 8002230:	4807      	ldr	r0, [pc, #28]	@ (8002250 <hw_intf_bmp280_i2c_recv+0x40>)
 8002232:	f000 feeb 	bl	800300c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BMP280_I2C, I2C_ADDR_BMP280, buf, len, 100);
 8002236:	88bb      	ldrh	r3, [r7, #4]
 8002238:	2264      	movs	r2, #100	@ 0x64
 800223a:	9200      	str	r2, [sp, #0]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	21ec      	movs	r1, #236	@ 0xec
 8002240:	4803      	ldr	r0, [pc, #12]	@ (8002250 <hw_intf_bmp280_i2c_recv+0x40>)
 8002242:	f000 ffe1 	bl	8003208 <HAL_I2C_Master_Receive>

    return ERR_CODE_SUCCESS;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	200001f0 	.word	0x200001f0

08002254 <hw_intf_uart_debug_send>:

err_code_t hw_intf_uart_debug_send(uint8_t *log_buf)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen((char*)log_buf);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7fe f807 	bl	8000270 <strlen>
 8002262:	4603      	mov	r3, r0
 8002264:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)log_buf, len, 100);
 8002266:	89fa      	ldrh	r2, [r7, #14]
 8002268:	2364      	movs	r3, #100	@ 0x64
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4803      	ldr	r0, [pc, #12]	@ (800227c <hw_intf_uart_debug_send+0x28>)
 800226e:	f003 f83d 	bl	80052ec <HAL_UART_Transmit>

    return ERR_CODE_SUCCESS;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000310 	.word	0x20000310

08002280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002284:	b672      	cpsid	i
}
 8002286:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8002288:	bf00      	nop
 800228a:	e7fd      	b.n	8002288 <Error_Handler+0x8>

0800228c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002290:	4b17      	ldr	r3, [pc, #92]	@ (80022f0 <MX_SPI1_Init+0x64>)
 8002292:	4a18      	ldr	r2, [pc, #96]	@ (80022f4 <MX_SPI1_Init+0x68>)
 8002294:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002296:	4b16      	ldr	r3, [pc, #88]	@ (80022f0 <MX_SPI1_Init+0x64>)
 8002298:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800229c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800229e:	4b14      	ldr	r3, [pc, #80]	@ (80022f0 <MX_SPI1_Init+0x64>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022a4:	4b12      	ldr	r3, [pc, #72]	@ (80022f0 <MX_SPI1_Init+0x64>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022aa:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <MX_SPI1_Init+0x64>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022b0:	4b0f      	ldr	r3, [pc, #60]	@ (80022f0 <MX_SPI1_Init+0x64>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022b6:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <MX_SPI1_Init+0x64>)
 80022b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022be:	4b0c      	ldr	r3, [pc, #48]	@ (80022f0 <MX_SPI1_Init+0x64>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022c4:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <MX_SPI1_Init+0x64>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022ca:	4b09      	ldr	r3, [pc, #36]	@ (80022f0 <MX_SPI1_Init+0x64>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d0:	4b07      	ldr	r3, [pc, #28]	@ (80022f0 <MX_SPI1_Init+0x64>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <MX_SPI1_Init+0x64>)
 80022d8:	220a      	movs	r2, #10
 80022da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022dc:	4804      	ldr	r0, [pc, #16]	@ (80022f0 <MX_SPI1_Init+0x64>)
 80022de:	f002 f9e3 	bl	80046a8 <HAL_SPI_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80022e8:	f7ff ffca 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	200002b4 	.word	0x200002b4
 80022f4:	40013000 	.word	0x40013000

080022f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	@ 0x28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a19      	ldr	r2, [pc, #100]	@ (800237c <HAL_SPI_MspInit+0x84>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d12b      	bne.n	8002372 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	4b18      	ldr	r3, [pc, #96]	@ (8002380 <HAL_SPI_MspInit+0x88>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	4a17      	ldr	r2, [pc, #92]	@ (8002380 <HAL_SPI_MspInit+0x88>)
 8002324:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002328:	6453      	str	r3, [r2, #68]	@ 0x44
 800232a:	4b15      	ldr	r3, [pc, #84]	@ (8002380 <HAL_SPI_MspInit+0x88>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <HAL_SPI_MspInit+0x88>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	4a10      	ldr	r2, [pc, #64]	@ (8002380 <HAL_SPI_MspInit+0x88>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6313      	str	r3, [r2, #48]	@ 0x30
 8002346:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <HAL_SPI_MspInit+0x88>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002352:	23e0      	movs	r3, #224	@ 0xe0
 8002354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235e:	2303      	movs	r3, #3
 8002360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002362:	2305      	movs	r3, #5
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	4805      	ldr	r0, [pc, #20]	@ (8002384 <HAL_SPI_MspInit+0x8c>)
 800236e:	f000 fb53 	bl	8002a18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002372:	bf00      	nop
 8002374:	3728      	adds	r7, #40	@ 0x28
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40013000 	.word	0x40013000
 8002380:	40023800 	.word	0x40023800
 8002384:	40020000 	.word	0x40020000

08002388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	4b10      	ldr	r3, [pc, #64]	@ (80023d4 <HAL_MspInit+0x4c>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	4a0f      	ldr	r2, [pc, #60]	@ (80023d4 <HAL_MspInit+0x4c>)
 8002398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800239c:	6453      	str	r3, [r2, #68]	@ 0x44
 800239e:	4b0d      	ldr	r3, [pc, #52]	@ (80023d4 <HAL_MspInit+0x4c>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	4b09      	ldr	r3, [pc, #36]	@ (80023d4 <HAL_MspInit+0x4c>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	4a08      	ldr	r2, [pc, #32]	@ (80023d4 <HAL_MspInit+0x4c>)
 80023b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ba:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <HAL_MspInit+0x4c>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800

080023d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023dc:	bf00      	nop
 80023de:	e7fd      	b.n	80023dc <NMI_Handler+0x4>

080023e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <HardFault_Handler+0x4>

080023e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <MemManage_Handler+0x4>

080023f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f4:	bf00      	nop
 80023f6:	e7fd      	b.n	80023f4 <BusFault_Handler+0x4>

080023f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023fc:	bf00      	nop
 80023fe:	e7fd      	b.n	80023fc <UsageFault_Handler+0x4>

08002400 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242e:	f000 f9c9 	bl	80027c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}

08002436 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0
  return 1;
 800243a:	2301      	movs	r3, #1
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <_kill>:

int _kill(int pid, int sig)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002450:	f005 ff6a 	bl	8008328 <__errno>
 8002454:	4603      	mov	r3, r0
 8002456:	2216      	movs	r2, #22
 8002458:	601a      	str	r2, [r3, #0]
  return -1;
 800245a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <_exit>:

void _exit (int status)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800246e:	f04f 31ff 	mov.w	r1, #4294967295
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ffe7 	bl	8002446 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002478:	bf00      	nop
 800247a:	e7fd      	b.n	8002478 <_exit+0x12>

0800247c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	e00a      	b.n	80024a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800248e:	f3af 8000 	nop.w
 8002492:	4601      	mov	r1, r0
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	60ba      	str	r2, [r7, #8]
 800249a:	b2ca      	uxtb	r2, r1
 800249c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3301      	adds	r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	dbf0      	blt.n	800248e <_read+0x12>
  }

  return len;
 80024ac:	687b      	ldr	r3, [r7, #4]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b086      	sub	sp, #24
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	e009      	b.n	80024dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	60ba      	str	r2, [r7, #8]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	3301      	adds	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	dbf1      	blt.n	80024c8 <_write+0x12>
  }
  return len;
 80024e4:	687b      	ldr	r3, [r7, #4]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <_close>:

int _close(int file)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002516:	605a      	str	r2, [r3, #4]
  return 0;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <_isatty>:

int _isatty(int file)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800252e:	2301      	movs	r3, #1
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002560:	4a14      	ldr	r2, [pc, #80]	@ (80025b4 <_sbrk+0x5c>)
 8002562:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <_sbrk+0x60>)
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800256c:	4b13      	ldr	r3, [pc, #76]	@ (80025bc <_sbrk+0x64>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <_sbrk+0x64>)
 8002576:	4a12      	ldr	r2, [pc, #72]	@ (80025c0 <_sbrk+0x68>)
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800257a:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <_sbrk+0x64>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	429a      	cmp	r2, r3
 8002586:	d207      	bcs.n	8002598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002588:	f005 fece 	bl	8008328 <__errno>
 800258c:	4603      	mov	r3, r0
 800258e:	220c      	movs	r2, #12
 8002590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	e009      	b.n	80025ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002598:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <_sbrk+0x64>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259e:	4b07      	ldr	r3, [pc, #28]	@ (80025bc <_sbrk+0x64>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	4a05      	ldr	r2, [pc, #20]	@ (80025bc <_sbrk+0x64>)
 80025a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025aa:	68fb      	ldr	r3, [r7, #12]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20020000 	.word	0x20020000
 80025b8:	00000400 	.word	0x00000400
 80025bc:	2000030c 	.word	0x2000030c
 80025c0:	200004a8 	.word	0x200004a8

080025c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c8:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <SystemInit+0x20>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ce:	4a05      	ldr	r2, [pc, #20]	@ (80025e4 <SystemInit+0x20>)
 80025d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025ec:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <MX_USART1_UART_Init+0x4c>)
 80025ee:	4a12      	ldr	r2, [pc, #72]	@ (8002638 <MX_USART1_UART_Init+0x50>)
 80025f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025f2:	4b10      	ldr	r3, [pc, #64]	@ (8002634 <MX_USART1_UART_Init+0x4c>)
 80025f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <MX_USART1_UART_Init+0x4c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002600:	4b0c      	ldr	r3, [pc, #48]	@ (8002634 <MX_USART1_UART_Init+0x4c>)
 8002602:	2200      	movs	r2, #0
 8002604:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002606:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <MX_USART1_UART_Init+0x4c>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800260c:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <MX_USART1_UART_Init+0x4c>)
 800260e:	220c      	movs	r2, #12
 8002610:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002612:	4b08      	ldr	r3, [pc, #32]	@ (8002634 <MX_USART1_UART_Init+0x4c>)
 8002614:	2200      	movs	r2, #0
 8002616:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002618:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <MX_USART1_UART_Init+0x4c>)
 800261a:	2200      	movs	r2, #0
 800261c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800261e:	4805      	ldr	r0, [pc, #20]	@ (8002634 <MX_USART1_UART_Init+0x4c>)
 8002620:	f002 fe14 	bl	800524c <HAL_UART_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800262a:	f7ff fe29 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000310 	.word	0x20000310
 8002638:	40011000 	.word	0x40011000

0800263c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	@ 0x28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a19      	ldr	r2, [pc, #100]	@ (80026c0 <HAL_UART_MspInit+0x84>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d12c      	bne.n	80026b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	4b18      	ldr	r3, [pc, #96]	@ (80026c4 <HAL_UART_MspInit+0x88>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002666:	4a17      	ldr	r2, [pc, #92]	@ (80026c4 <HAL_UART_MspInit+0x88>)
 8002668:	f043 0310 	orr.w	r3, r3, #16
 800266c:	6453      	str	r3, [r2, #68]	@ 0x44
 800266e:	4b15      	ldr	r3, [pc, #84]	@ (80026c4 <HAL_UART_MspInit+0x88>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	4b11      	ldr	r3, [pc, #68]	@ (80026c4 <HAL_UART_MspInit+0x88>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	4a10      	ldr	r2, [pc, #64]	@ (80026c4 <HAL_UART_MspInit+0x88>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6313      	str	r3, [r2, #48]	@ 0x30
 800268a:	4b0e      	ldr	r3, [pc, #56]	@ (80026c4 <HAL_UART_MspInit+0x88>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002696:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800269a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269c:	2302      	movs	r3, #2
 800269e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026a8:	2307      	movs	r3, #7
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	4619      	mov	r1, r3
 80026b2:	4805      	ldr	r0, [pc, #20]	@ (80026c8 <HAL_UART_MspInit+0x8c>)
 80026b4:	f000 f9b0 	bl	8002a18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026b8:	bf00      	nop
 80026ba:	3728      	adds	r7, #40	@ 0x28
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40011000 	.word	0x40011000
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020000 	.word	0x40020000

080026cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002704 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026d0:	f7ff ff78 	bl	80025c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026d4:	480c      	ldr	r0, [pc, #48]	@ (8002708 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026d6:	490d      	ldr	r1, [pc, #52]	@ (800270c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002710 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026dc:	e002      	b.n	80026e4 <LoopCopyDataInit>

080026de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026e2:	3304      	adds	r3, #4

080026e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e8:	d3f9      	bcc.n	80026de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002714 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002718 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f0:	e001      	b.n	80026f6 <LoopFillZerobss>

080026f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f4:	3204      	adds	r2, #4

080026f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f8:	d3fb      	bcc.n	80026f2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80026fa:	f005 fe1b 	bl	8008334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026fe:	f7ff fb79 	bl	8001df4 <main>
  bx  lr    
 8002702:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002704:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800270c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002710:	0800b538 	.word	0x0800b538
  ldr r2, =_sbss
 8002714:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002718:	200004a8 	.word	0x200004a8

0800271c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800271c:	e7fe      	b.n	800271c <ADC_IRQHandler>
	...

08002720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002724:	4b0e      	ldr	r3, [pc, #56]	@ (8002760 <HAL_Init+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0d      	ldr	r2, [pc, #52]	@ (8002760 <HAL_Init+0x40>)
 800272a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800272e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002730:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <HAL_Init+0x40>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <HAL_Init+0x40>)
 8002736:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800273a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800273c:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <HAL_Init+0x40>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a07      	ldr	r2, [pc, #28]	@ (8002760 <HAL_Init+0x40>)
 8002742:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002748:	2003      	movs	r0, #3
 800274a:	f000 f931 	bl	80029b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800274e:	200f      	movs	r0, #15
 8002750:	f000 f808 	bl	8002764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002754:	f7ff fe18 	bl	8002388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023c00 	.word	0x40023c00

08002764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800276c:	4b12      	ldr	r3, [pc, #72]	@ (80027b8 <HAL_InitTick+0x54>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b12      	ldr	r3, [pc, #72]	@ (80027bc <HAL_InitTick+0x58>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	4619      	mov	r1, r3
 8002776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800277a:	fbb3 f3f1 	udiv	r3, r3, r1
 800277e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f93b 	bl	80029fe <HAL_SYSTICK_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e00e      	b.n	80027b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b0f      	cmp	r3, #15
 8002796:	d80a      	bhi.n	80027ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002798:	2200      	movs	r2, #0
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	f04f 30ff 	mov.w	r0, #4294967295
 80027a0:	f000 f911 	bl	80029c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a4:	4a06      	ldr	r2, [pc, #24]	@ (80027c0 <HAL_InitTick+0x5c>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e000      	b.n	80027b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000000 	.word	0x20000000
 80027bc:	20000008 	.word	0x20000008
 80027c0:	20000004 	.word	0x20000004

080027c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c8:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <HAL_IncTick+0x20>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <HAL_IncTick+0x24>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	4a04      	ldr	r2, [pc, #16]	@ (80027e8 <HAL_IncTick+0x24>)
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000008 	.word	0x20000008
 80027e8:	20000358 	.word	0x20000358

080027ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return uwTick;
 80027f0:	4b03      	ldr	r3, [pc, #12]	@ (8002800 <HAL_GetTick+0x14>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000358 	.word	0x20000358

08002804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800280c:	f7ff ffee 	bl	80027ec <HAL_GetTick>
 8002810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d005      	beq.n	800282a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800281e:	4b0a      	ldr	r3, [pc, #40]	@ (8002848 <HAL_Delay+0x44>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4413      	add	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800282a:	bf00      	nop
 800282c:	f7ff ffde 	bl	80027ec <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	429a      	cmp	r2, r3
 800283a:	d8f7      	bhi.n	800282c <HAL_Delay+0x28>
  {
  }
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000008 	.word	0x20000008

0800284c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002874:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800287c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287e:	4a04      	ldr	r2, [pc, #16]	@ (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	60d3      	str	r3, [r2, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	@ (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	6039      	str	r1, [r7, #0]
 80028ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	db0a      	blt.n	80028da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	490c      	ldr	r1, [pc, #48]	@ (80028fc <__NVIC_SetPriority+0x4c>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	0112      	lsls	r2, r2, #4
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	440b      	add	r3, r1
 80028d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d8:	e00a      	b.n	80028f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4908      	ldr	r1, [pc, #32]	@ (8002900 <__NVIC_SetPriority+0x50>)
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	3b04      	subs	r3, #4
 80028e8:	0112      	lsls	r2, r2, #4
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	440b      	add	r3, r1
 80028ee:	761a      	strb	r2, [r3, #24]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000e100 	.word	0xe000e100
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	@ 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f1c3 0307 	rsb	r3, r3, #7
 800291e:	2b04      	cmp	r3, #4
 8002920:	bf28      	it	cs
 8002922:	2304      	movcs	r3, #4
 8002924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3304      	adds	r3, #4
 800292a:	2b06      	cmp	r3, #6
 800292c:	d902      	bls.n	8002934 <NVIC_EncodePriority+0x30>
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3b03      	subs	r3, #3
 8002932:	e000      	b.n	8002936 <NVIC_EncodePriority+0x32>
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	f04f 32ff 	mov.w	r2, #4294967295
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	401a      	ands	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800294c:	f04f 31ff 	mov.w	r1, #4294967295
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	43d9      	mvns	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	4313      	orrs	r3, r2
         );
}
 800295e:	4618      	mov	r0, r3
 8002960:	3724      	adds	r7, #36	@ 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800297c:	d301      	bcc.n	8002982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297e:	2301      	movs	r3, #1
 8002980:	e00f      	b.n	80029a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002982:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <SysTick_Config+0x40>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298a:	210f      	movs	r1, #15
 800298c:	f04f 30ff 	mov.w	r0, #4294967295
 8002990:	f7ff ff8e 	bl	80028b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002994:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <SysTick_Config+0x40>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299a:	4b04      	ldr	r3, [pc, #16]	@ (80029ac <SysTick_Config+0x40>)
 800299c:	2207      	movs	r2, #7
 800299e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	e000e010 	.word	0xe000e010

080029b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ff47 	bl	800284c <__NVIC_SetPriorityGrouping>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4603      	mov	r3, r0
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d8:	f7ff ff5c 	bl	8002894 <__NVIC_GetPriorityGrouping>
 80029dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	6978      	ldr	r0, [r7, #20]
 80029e4:	f7ff ff8e 	bl	8002904 <NVIC_EncodePriority>
 80029e8:	4602      	mov	r2, r0
 80029ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff5d 	bl	80028b0 <__NVIC_SetPriority>
}
 80029f6:	bf00      	nop
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff ffb0 	bl	800296c <SysTick_Config>
 8002a0c:	4603      	mov	r3, r0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	@ 0x24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	e16b      	b.n	8002d0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a34:	2201      	movs	r2, #1
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	f040 815a 	bne.w	8002d06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d005      	beq.n	8002a6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d130      	bne.n	8002acc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	2203      	movs	r2, #3
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 0201 	and.w	r2, r3, #1
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d017      	beq.n	8002b08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d123      	bne.n	8002b5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	08da      	lsrs	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3208      	adds	r2, #8
 8002b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	08da      	lsrs	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3208      	adds	r2, #8
 8002b56:	69b9      	ldr	r1, [r7, #24]
 8002b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	2203      	movs	r2, #3
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0203 	and.w	r2, r3, #3
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80b4 	beq.w	8002d06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b60      	ldr	r3, [pc, #384]	@ (8002d24 <HAL_GPIO_Init+0x30c>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	4a5f      	ldr	r2, [pc, #380]	@ (8002d24 <HAL_GPIO_Init+0x30c>)
 8002ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bae:	4b5d      	ldr	r3, [pc, #372]	@ (8002d24 <HAL_GPIO_Init+0x30c>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bba:	4a5b      	ldr	r2, [pc, #364]	@ (8002d28 <HAL_GPIO_Init+0x310>)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	220f      	movs	r2, #15
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a52      	ldr	r2, [pc, #328]	@ (8002d2c <HAL_GPIO_Init+0x314>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d02b      	beq.n	8002c3e <HAL_GPIO_Init+0x226>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a51      	ldr	r2, [pc, #324]	@ (8002d30 <HAL_GPIO_Init+0x318>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d025      	beq.n	8002c3a <HAL_GPIO_Init+0x222>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a50      	ldr	r2, [pc, #320]	@ (8002d34 <HAL_GPIO_Init+0x31c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d01f      	beq.n	8002c36 <HAL_GPIO_Init+0x21e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a4f      	ldr	r2, [pc, #316]	@ (8002d38 <HAL_GPIO_Init+0x320>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d019      	beq.n	8002c32 <HAL_GPIO_Init+0x21a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a4e      	ldr	r2, [pc, #312]	@ (8002d3c <HAL_GPIO_Init+0x324>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <HAL_GPIO_Init+0x216>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a4d      	ldr	r2, [pc, #308]	@ (8002d40 <HAL_GPIO_Init+0x328>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00d      	beq.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4c      	ldr	r2, [pc, #304]	@ (8002d44 <HAL_GPIO_Init+0x32c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d007      	beq.n	8002c26 <HAL_GPIO_Init+0x20e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a4b      	ldr	r2, [pc, #300]	@ (8002d48 <HAL_GPIO_Init+0x330>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d101      	bne.n	8002c22 <HAL_GPIO_Init+0x20a>
 8002c1e:	2307      	movs	r3, #7
 8002c20:	e00e      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c22:	2308      	movs	r3, #8
 8002c24:	e00c      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c26:	2306      	movs	r3, #6
 8002c28:	e00a      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c2a:	2305      	movs	r3, #5
 8002c2c:	e008      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c2e:	2304      	movs	r3, #4
 8002c30:	e006      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c32:	2303      	movs	r3, #3
 8002c34:	e004      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e002      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	f002 0203 	and.w	r2, r2, #3
 8002c46:	0092      	lsls	r2, r2, #2
 8002c48:	4093      	lsls	r3, r2
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c50:	4935      	ldr	r1, [pc, #212]	@ (8002d28 <HAL_GPIO_Init+0x310>)
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	089b      	lsrs	r3, r3, #2
 8002c56:	3302      	adds	r3, #2
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c82:	4a32      	ldr	r2, [pc, #200]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c88:	4b30      	ldr	r3, [pc, #192]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cac:	4a27      	ldr	r2, [pc, #156]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cb2:	4b26      	ldr	r3, [pc, #152]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d00:	4a12      	ldr	r2, [pc, #72]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	2b0f      	cmp	r3, #15
 8002d10:	f67f ae90 	bls.w	8002a34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3724      	adds	r7, #36	@ 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40013800 	.word	0x40013800
 8002d2c:	40020000 	.word	0x40020000
 8002d30:	40020400 	.word	0x40020400
 8002d34:	40020800 	.word	0x40020800
 8002d38:	40020c00 	.word	0x40020c00
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40021400 	.word	0x40021400
 8002d44:	40021800 	.word	0x40021800
 8002d48:	40021c00 	.word	0x40021c00
 8002d4c:	40013c00 	.word	0x40013c00

08002d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d60:	787b      	ldrb	r3, [r7, #1]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d6c:	e003      	b.n	8002d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d6e:	887b      	ldrh	r3, [r7, #2]
 8002d70:	041a      	lsls	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	619a      	str	r2, [r3, #24]
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e12b      	b.n	8002fee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fe ffda 	bl	8001d64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2224      	movs	r2, #36	@ 0x24
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002dd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002de6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002de8:	f001 fc36 	bl	8004658 <HAL_RCC_GetPCLK1Freq>
 8002dec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4a81      	ldr	r2, [pc, #516]	@ (8002ff8 <HAL_I2C_Init+0x274>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d807      	bhi.n	8002e08 <HAL_I2C_Init+0x84>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4a80      	ldr	r2, [pc, #512]	@ (8002ffc <HAL_I2C_Init+0x278>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	bf94      	ite	ls
 8002e00:	2301      	movls	r3, #1
 8002e02:	2300      	movhi	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	e006      	b.n	8002e16 <HAL_I2C_Init+0x92>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a7d      	ldr	r2, [pc, #500]	@ (8003000 <HAL_I2C_Init+0x27c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	bf94      	ite	ls
 8002e10:	2301      	movls	r3, #1
 8002e12:	2300      	movhi	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0e7      	b.n	8002fee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4a78      	ldr	r2, [pc, #480]	@ (8003004 <HAL_I2C_Init+0x280>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	0c9b      	lsrs	r3, r3, #18
 8002e28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ff8 <HAL_I2C_Init+0x274>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d802      	bhi.n	8002e58 <HAL_I2C_Init+0xd4>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	3301      	adds	r3, #1
 8002e56:	e009      	b.n	8002e6c <HAL_I2C_Init+0xe8>
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
 8002e62:	4a69      	ldr	r2, [pc, #420]	@ (8003008 <HAL_I2C_Init+0x284>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	099b      	lsrs	r3, r3, #6
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	495c      	ldr	r1, [pc, #368]	@ (8002ff8 <HAL_I2C_Init+0x274>)
 8002e88:	428b      	cmp	r3, r1
 8002e8a:	d819      	bhi.n	8002ec0 <HAL_I2C_Init+0x13c>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1e59      	subs	r1, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e9a:	1c59      	adds	r1, r3, #1
 8002e9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ea0:	400b      	ands	r3, r1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_I2C_Init+0x138>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1e59      	subs	r1, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eba:	e051      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	e04f      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d111      	bne.n	8002eec <HAL_I2C_Init+0x168>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1e58      	subs	r0, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6859      	ldr	r1, [r3, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	440b      	add	r3, r1
 8002ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	e012      	b.n	8002f12 <HAL_I2C_Init+0x18e>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1e58      	subs	r0, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	0099      	lsls	r1, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_I2C_Init+0x196>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e022      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10e      	bne.n	8002f40 <HAL_I2C_Init+0x1bc>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1e58      	subs	r0, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6859      	ldr	r1, [r3, #4]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	440b      	add	r3, r1
 8002f30:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f34:	3301      	adds	r3, #1
 8002f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f3e:	e00f      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1e58      	subs	r0, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	0099      	lsls	r1, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f56:	3301      	adds	r3, #1
 8002f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	6809      	ldr	r1, [r1, #0]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6911      	ldr	r1, [r2, #16]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68d2      	ldr	r2, [r2, #12]
 8002f9a:	4311      	orrs	r1, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	000186a0 	.word	0x000186a0
 8002ffc:	001e847f 	.word	0x001e847f
 8003000:	003d08ff 	.word	0x003d08ff
 8003004:	431bde83 	.word	0x431bde83
 8003008:	10624dd3 	.word	0x10624dd3

0800300c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af02      	add	r7, sp, #8
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	461a      	mov	r2, r3
 8003018:	460b      	mov	r3, r1
 800301a:	817b      	strh	r3, [r7, #10]
 800301c:	4613      	mov	r3, r2
 800301e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003020:	f7ff fbe4 	bl	80027ec <HAL_GetTick>
 8003024:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b20      	cmp	r3, #32
 8003030:	f040 80e0 	bne.w	80031f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	2319      	movs	r3, #25
 800303a:	2201      	movs	r2, #1
 800303c:	4970      	ldr	r1, [pc, #448]	@ (8003200 <HAL_I2C_Master_Transmit+0x1f4>)
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 fc64 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800304a:	2302      	movs	r3, #2
 800304c:	e0d3      	b.n	80031f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_I2C_Master_Transmit+0x50>
 8003058:	2302      	movs	r3, #2
 800305a:	e0cc      	b.n	80031f6 <HAL_I2C_Master_Transmit+0x1ea>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b01      	cmp	r3, #1
 8003070:	d007      	beq.n	8003082 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0201 	orr.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003090:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2221      	movs	r2, #33	@ 0x21
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2210      	movs	r2, #16
 800309e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	893a      	ldrh	r2, [r7, #8]
 80030b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4a50      	ldr	r2, [pc, #320]	@ (8003204 <HAL_I2C_Master_Transmit+0x1f8>)
 80030c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030c4:	8979      	ldrh	r1, [r7, #10]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	6a3a      	ldr	r2, [r7, #32]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 face 	bl	800366c <I2C_MasterRequestWrite>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e08d      	b.n	80031f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030f0:	e066      	b.n	80031c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	6a39      	ldr	r1, [r7, #32]
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fd22 	bl	8003b40 <I2C_WaitOnTXEFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00d      	beq.n	800311e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	2b04      	cmp	r3, #4
 8003108:	d107      	bne.n	800311a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003118:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e06b      	b.n	80031f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	781a      	ldrb	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b04      	cmp	r3, #4
 800315a:	d11b      	bne.n	8003194 <HAL_I2C_Master_Transmit+0x188>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003160:	2b00      	cmp	r3, #0
 8003162:	d017      	beq.n	8003194 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003168:	781a      	ldrb	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	6a39      	ldr	r1, [r7, #32]
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fd19 	bl	8003bd0 <I2C_WaitOnBTFFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00d      	beq.n	80031c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d107      	bne.n	80031bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e01a      	b.n	80031f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d194      	bne.n	80030f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	e000      	b.n	80031f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031f4:	2302      	movs	r3, #2
  }
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	00100002 	.word	0x00100002
 8003204:	ffff0000 	.word	0xffff0000

08003208 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08c      	sub	sp, #48	@ 0x30
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	461a      	mov	r2, r3
 8003214:	460b      	mov	r3, r1
 8003216:	817b      	strh	r3, [r7, #10]
 8003218:	4613      	mov	r3, r2
 800321a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800321c:	f7ff fae6 	bl	80027ec <HAL_GetTick>
 8003220:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b20      	cmp	r3, #32
 800322c:	f040 8217 	bne.w	800365e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	2319      	movs	r3, #25
 8003236:	2201      	movs	r2, #1
 8003238:	497c      	ldr	r1, [pc, #496]	@ (800342c <HAL_I2C_Master_Receive+0x224>)
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fb66 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003246:	2302      	movs	r3, #2
 8003248:	e20a      	b.n	8003660 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_I2C_Master_Receive+0x50>
 8003254:	2302      	movs	r3, #2
 8003256:	e203      	b.n	8003660 <HAL_I2C_Master_Receive+0x458>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b01      	cmp	r3, #1
 800326c:	d007      	beq.n	800327e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0201 	orr.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800328c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2222      	movs	r2, #34	@ 0x22
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2210      	movs	r2, #16
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	893a      	ldrh	r2, [r7, #8]
 80032ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4a5c      	ldr	r2, [pc, #368]	@ (8003430 <HAL_I2C_Master_Receive+0x228>)
 80032be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032c0:	8979      	ldrh	r1, [r7, #10]
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 fa52 	bl	8003770 <I2C_MasterRequestRead>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e1c4      	b.n	8003660 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d113      	bne.n	8003306 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032de:	2300      	movs	r3, #0
 80032e0:	623b      	str	r3, [r7, #32]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	623b      	str	r3, [r7, #32]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	623b      	str	r3, [r7, #32]
 80032f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e198      	b.n	8003638 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330a:	2b01      	cmp	r3, #1
 800330c:	d11b      	bne.n	8003346 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800331c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	61fb      	str	r3, [r7, #28]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	61fb      	str	r3, [r7, #28]
 8003332:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	e178      	b.n	8003638 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334a:	2b02      	cmp	r3, #2
 800334c:	d11b      	bne.n	8003386 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800335c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800336c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800336e:	2300      	movs	r3, #0
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	e158      	b.n	8003638 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003394:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033ac:	e144      	b.n	8003638 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	f200 80f1 	bhi.w	800359a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d123      	bne.n	8003408 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fc4b 	bl	8003c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e145      	b.n	8003660 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003406:	e117      	b.n	8003638 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800340c:	2b02      	cmp	r3, #2
 800340e:	d14e      	bne.n	80034ae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003416:	2200      	movs	r2, #0
 8003418:	4906      	ldr	r1, [pc, #24]	@ (8003434 <HAL_I2C_Master_Receive+0x22c>)
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 fa76 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e11a      	b.n	8003660 <HAL_I2C_Master_Receive+0x458>
 800342a:	bf00      	nop
 800342c:	00100002 	.word	0x00100002
 8003430:	ffff0000 	.word	0xffff0000
 8003434:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003446:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034ac:	e0c4      	b.n	8003638 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b4:	2200      	movs	r2, #0
 80034b6:	496c      	ldr	r1, [pc, #432]	@ (8003668 <HAL_I2C_Master_Receive+0x460>)
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 fa27 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0cb      	b.n	8003660 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691a      	ldr	r2, [r3, #16]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003510:	2200      	movs	r2, #0
 8003512:	4955      	ldr	r1, [pc, #340]	@ (8003668 <HAL_I2C_Master_Receive+0x460>)
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f9f9 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e09d      	b.n	8003660 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003532:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691a      	ldr	r2, [r3, #16]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355c:	b29b      	uxth	r3, r3
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003598:	e04e      	b.n	8003638 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800359a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800359c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 fb5e 	bl	8003c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e058      	b.n	8003660 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d124      	bne.n	8003638 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d107      	bne.n	8003606 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003604:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363c:	2b00      	cmp	r3, #0
 800363e:	f47f aeb6 	bne.w	80033ae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	e000      	b.n	8003660 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800365e:	2302      	movs	r3, #2
  }
}
 8003660:	4618      	mov	r0, r3
 8003662:	3728      	adds	r7, #40	@ 0x28
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	00010004 	.word	0x00010004

0800366c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	460b      	mov	r3, r1
 800367a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003680:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2b08      	cmp	r3, #8
 8003686:	d006      	beq.n	8003696 <I2C_MasterRequestWrite+0x2a>
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d003      	beq.n	8003696 <I2C_MasterRequestWrite+0x2a>
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003694:	d108      	bne.n	80036a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e00b      	b.n	80036c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ac:	2b12      	cmp	r3, #18
 80036ae:	d107      	bne.n	80036c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f91d 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00d      	beq.n	80036f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036e6:	d103      	bne.n	80036f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e035      	b.n	8003760 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036fc:	d108      	bne.n	8003710 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036fe:	897b      	ldrh	r3, [r7, #10]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800370c:	611a      	str	r2, [r3, #16]
 800370e:	e01b      	b.n	8003748 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003710:	897b      	ldrh	r3, [r7, #10]
 8003712:	11db      	asrs	r3, r3, #7
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f003 0306 	and.w	r3, r3, #6
 800371a:	b2db      	uxtb	r3, r3
 800371c:	f063 030f 	orn	r3, r3, #15
 8003720:	b2da      	uxtb	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	490e      	ldr	r1, [pc, #56]	@ (8003768 <I2C_MasterRequestWrite+0xfc>)
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f966 	bl	8003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e010      	b.n	8003760 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800373e:	897b      	ldrh	r3, [r7, #10]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	4907      	ldr	r1, [pc, #28]	@ (800376c <I2C_MasterRequestWrite+0x100>)
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f956 	bl	8003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	00010008 	.word	0x00010008
 800376c:	00010002 	.word	0x00010002

08003770 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	460b      	mov	r3, r1
 800377e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003784:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003794:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2b08      	cmp	r3, #8
 800379a:	d006      	beq.n	80037aa <I2C_MasterRequestRead+0x3a>
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d003      	beq.n	80037aa <I2C_MasterRequestRead+0x3a>
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037a8:	d108      	bne.n	80037bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	e00b      	b.n	80037d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c0:	2b11      	cmp	r3, #17
 80037c2:	d107      	bne.n	80037d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f893 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00d      	beq.n	8003808 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037fa:	d103      	bne.n	8003804 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003802:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e079      	b.n	80038fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003810:	d108      	bne.n	8003824 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003812:	897b      	ldrh	r3, [r7, #10]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	b2da      	uxtb	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	611a      	str	r2, [r3, #16]
 8003822:	e05f      	b.n	80038e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003824:	897b      	ldrh	r3, [r7, #10]
 8003826:	11db      	asrs	r3, r3, #7
 8003828:	b2db      	uxtb	r3, r3
 800382a:	f003 0306 	and.w	r3, r3, #6
 800382e:	b2db      	uxtb	r3, r3
 8003830:	f063 030f 	orn	r3, r3, #15
 8003834:	b2da      	uxtb	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	4930      	ldr	r1, [pc, #192]	@ (8003904 <I2C_MasterRequestRead+0x194>)
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f8dc 	bl	8003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e054      	b.n	80038fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003852:	897b      	ldrh	r3, [r7, #10]
 8003854:	b2da      	uxtb	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	4929      	ldr	r1, [pc, #164]	@ (8003908 <I2C_MasterRequestRead+0x198>)
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f8cc 	bl	8003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e044      	b.n	80038fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003896:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f831 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00d      	beq.n	80038cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038be:	d103      	bne.n	80038c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038c6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e017      	b.n	80038fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80038cc:	897b      	ldrh	r3, [r7, #10]
 80038ce:	11db      	asrs	r3, r3, #7
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	f003 0306 	and.w	r3, r3, #6
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	f063 030e 	orn	r3, r3, #14
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	4907      	ldr	r1, [pc, #28]	@ (8003908 <I2C_MasterRequestRead+0x198>)
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f888 	bl	8003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	00010008 	.word	0x00010008
 8003908:	00010002 	.word	0x00010002

0800390c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	4613      	mov	r3, r2
 800391a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800391c:	e048      	b.n	80039b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d044      	beq.n	80039b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003926:	f7fe ff61 	bl	80027ec <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d302      	bcc.n	800393c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d139      	bne.n	80039b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	0c1b      	lsrs	r3, r3, #16
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b01      	cmp	r3, #1
 8003944:	d10d      	bne.n	8003962 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	43da      	mvns	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	4013      	ands	r3, r2
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	bf0c      	ite	eq
 8003958:	2301      	moveq	r3, #1
 800395a:	2300      	movne	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	461a      	mov	r2, r3
 8003960:	e00c      	b.n	800397c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	43da      	mvns	r2, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	4013      	ands	r3, r2
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf0c      	ite	eq
 8003974:	2301      	moveq	r3, #1
 8003976:	2300      	movne	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	461a      	mov	r2, r3
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	429a      	cmp	r2, r3
 8003980:	d116      	bne.n	80039b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399c:	f043 0220 	orr.w	r2, r3, #32
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e023      	b.n	80039f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	0c1b      	lsrs	r3, r3, #16
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d10d      	bne.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	43da      	mvns	r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	4013      	ands	r3, r2
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	e00c      	b.n	80039f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	43da      	mvns	r2, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	4013      	ands	r3, r2
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf0c      	ite	eq
 80039e8:	2301      	moveq	r3, #1
 80039ea:	2300      	movne	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	461a      	mov	r2, r3
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d093      	beq.n	800391e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a0e:	e071      	b.n	8003af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a1e:	d123      	bne.n	8003a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a54:	f043 0204 	orr.w	r2, r3, #4
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e067      	b.n	8003b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6e:	d041      	beq.n	8003af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a70:	f7fe febc 	bl	80027ec <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d302      	bcc.n	8003a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d136      	bne.n	8003af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	0c1b      	lsrs	r3, r3, #16
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d10c      	bne.n	8003aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	43da      	mvns	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	bf14      	ite	ne
 8003aa2:	2301      	movne	r3, #1
 8003aa4:	2300      	moveq	r3, #0
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	e00b      	b.n	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	43da      	mvns	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d016      	beq.n	8003af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e021      	b.n	8003b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	0c1b      	lsrs	r3, r3, #16
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d10c      	bne.n	8003b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	43da      	mvns	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf14      	ite	ne
 8003b10:	2301      	movne	r3, #1
 8003b12:	2300      	moveq	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	e00b      	b.n	8003b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	43da      	mvns	r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4013      	ands	r3, r2
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	bf14      	ite	ne
 8003b2a:	2301      	movne	r3, #1
 8003b2c:	2300      	moveq	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f47f af6d 	bne.w	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b4c:	e034      	b.n	8003bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f8e3 	bl	8003d1a <I2C_IsAcknowledgeFailed>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e034      	b.n	8003bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b64:	d028      	beq.n	8003bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b66:	f7fe fe41 	bl	80027ec <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d302      	bcc.n	8003b7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d11d      	bne.n	8003bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b86:	2b80      	cmp	r3, #128	@ 0x80
 8003b88:	d016      	beq.n	8003bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	f043 0220 	orr.w	r2, r3, #32
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e007      	b.n	8003bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc2:	2b80      	cmp	r3, #128	@ 0x80
 8003bc4:	d1c3      	bne.n	8003b4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bdc:	e034      	b.n	8003c48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f89b 	bl	8003d1a <I2C_IsAcknowledgeFailed>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e034      	b.n	8003c58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf4:	d028      	beq.n	8003c48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf6:	f7fe fdf9 	bl	80027ec <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d302      	bcc.n	8003c0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d11d      	bne.n	8003c48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d016      	beq.n	8003c48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c34:	f043 0220 	orr.w	r2, r3, #32
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e007      	b.n	8003c58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d1c3      	bne.n	8003bde <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c6c:	e049      	b.n	8003d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d119      	bne.n	8003cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0210 	mvn.w	r2, #16
 8003c84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e030      	b.n	8003d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb0:	f7fe fd9c 	bl	80027ec <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d302      	bcc.n	8003cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d11d      	bne.n	8003d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd0:	2b40      	cmp	r3, #64	@ 0x40
 8003cd2:	d016      	beq.n	8003d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	f043 0220 	orr.w	r2, r3, #32
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e007      	b.n	8003d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d0c:	2b40      	cmp	r3, #64	@ 0x40
 8003d0e:	d1ae      	bne.n	8003c6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d30:	d11b      	bne.n	8003d6a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d3a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	f043 0204 	orr.w	r2, r3, #4
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e267      	b.n	800425a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d075      	beq.n	8003e82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d96:	4b88      	ldr	r3, [pc, #544]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d00c      	beq.n	8003dbc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003da2:	4b85      	ldr	r3, [pc, #532]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d112      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dae:	4b82      	ldr	r3, [pc, #520]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003db6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dba:	d10b      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dbc:	4b7e      	ldr	r3, [pc, #504]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d05b      	beq.n	8003e80 <HAL_RCC_OscConfig+0x108>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d157      	bne.n	8003e80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e242      	b.n	800425a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ddc:	d106      	bne.n	8003dec <HAL_RCC_OscConfig+0x74>
 8003dde:	4b76      	ldr	r3, [pc, #472]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a75      	ldr	r2, [pc, #468]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	e01d      	b.n	8003e28 <HAL_RCC_OscConfig+0xb0>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCC_OscConfig+0x98>
 8003df6:	4b70      	ldr	r3, [pc, #448]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a6f      	ldr	r2, [pc, #444]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	4b6d      	ldr	r3, [pc, #436]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a6c      	ldr	r2, [pc, #432]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	e00b      	b.n	8003e28 <HAL_RCC_OscConfig+0xb0>
 8003e10:	4b69      	ldr	r3, [pc, #420]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a68      	ldr	r2, [pc, #416]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	4b66      	ldr	r3, [pc, #408]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a65      	ldr	r2, [pc, #404]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003e22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d013      	beq.n	8003e58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e30:	f7fe fcdc 	bl	80027ec <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e38:	f7fe fcd8 	bl	80027ec <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b64      	cmp	r3, #100	@ 0x64
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e207      	b.n	800425a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4a:	4b5b      	ldr	r3, [pc, #364]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0xc0>
 8003e56:	e014      	b.n	8003e82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e58:	f7fe fcc8 	bl	80027ec <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e60:	f7fe fcc4 	bl	80027ec <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b64      	cmp	r3, #100	@ 0x64
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e1f3      	b.n	800425a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e72:	4b51      	ldr	r3, [pc, #324]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f0      	bne.n	8003e60 <HAL_RCC_OscConfig+0xe8>
 8003e7e:	e000      	b.n	8003e82 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d063      	beq.n	8003f56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 030c 	and.w	r3, r3, #12
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00b      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e9a:	4b47      	ldr	r3, [pc, #284]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d11c      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ea6:	4b44      	ldr	r3, [pc, #272]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d116      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb2:	4b41      	ldr	r3, [pc, #260]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d005      	beq.n	8003eca <HAL_RCC_OscConfig+0x152>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d001      	beq.n	8003eca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e1c7      	b.n	800425a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eca:	4b3b      	ldr	r3, [pc, #236]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4937      	ldr	r1, [pc, #220]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ede:	e03a      	b.n	8003f56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d020      	beq.n	8003f2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee8:	4b34      	ldr	r3, [pc, #208]	@ (8003fbc <HAL_RCC_OscConfig+0x244>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eee:	f7fe fc7d 	bl	80027ec <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef6:	f7fe fc79 	bl	80027ec <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e1a8      	b.n	800425a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f08:	4b2b      	ldr	r3, [pc, #172]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f14:	4b28      	ldr	r3, [pc, #160]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	4925      	ldr	r1, [pc, #148]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	600b      	str	r3, [r1, #0]
 8003f28:	e015      	b.n	8003f56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f2a:	4b24      	ldr	r3, [pc, #144]	@ (8003fbc <HAL_RCC_OscConfig+0x244>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fe fc5c 	bl	80027ec <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f38:	f7fe fc58 	bl	80027ec <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e187      	b.n	800425a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d036      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d016      	beq.n	8003f98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f6a:	4b15      	ldr	r3, [pc, #84]	@ (8003fc0 <HAL_RCC_OscConfig+0x248>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f70:	f7fe fc3c 	bl	80027ec <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f78:	f7fe fc38 	bl	80027ec <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e167      	b.n	800425a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb8 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f0      	beq.n	8003f78 <HAL_RCC_OscConfig+0x200>
 8003f96:	e01b      	b.n	8003fd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f98:	4b09      	ldr	r3, [pc, #36]	@ (8003fc0 <HAL_RCC_OscConfig+0x248>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f9e:	f7fe fc25 	bl	80027ec <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa4:	e00e      	b.n	8003fc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa6:	f7fe fc21 	bl	80027ec <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d907      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e150      	b.n	800425a <HAL_RCC_OscConfig+0x4e2>
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	42470000 	.word	0x42470000
 8003fc0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc4:	4b88      	ldr	r3, [pc, #544]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 8003fc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1ea      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 8097 	beq.w	800410c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fe2:	4b81      	ldr	r3, [pc, #516]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10f      	bne.n	800400e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	4b7d      	ldr	r3, [pc, #500]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	4a7c      	ldr	r2, [pc, #496]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 8003ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ffe:	4b7a      	ldr	r3, [pc, #488]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800400a:	2301      	movs	r3, #1
 800400c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400e:	4b77      	ldr	r3, [pc, #476]	@ (80041ec <HAL_RCC_OscConfig+0x474>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d118      	bne.n	800404c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800401a:	4b74      	ldr	r3, [pc, #464]	@ (80041ec <HAL_RCC_OscConfig+0x474>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a73      	ldr	r2, [pc, #460]	@ (80041ec <HAL_RCC_OscConfig+0x474>)
 8004020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004026:	f7fe fbe1 	bl	80027ec <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800402e:	f7fe fbdd 	bl	80027ec <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e10c      	b.n	800425a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004040:	4b6a      	ldr	r3, [pc, #424]	@ (80041ec <HAL_RCC_OscConfig+0x474>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0f0      	beq.n	800402e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d106      	bne.n	8004062 <HAL_RCC_OscConfig+0x2ea>
 8004054:	4b64      	ldr	r3, [pc, #400]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004058:	4a63      	ldr	r2, [pc, #396]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004060:	e01c      	b.n	800409c <HAL_RCC_OscConfig+0x324>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b05      	cmp	r3, #5
 8004068:	d10c      	bne.n	8004084 <HAL_RCC_OscConfig+0x30c>
 800406a:	4b5f      	ldr	r3, [pc, #380]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406e:	4a5e      	ldr	r2, [pc, #376]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 8004070:	f043 0304 	orr.w	r3, r3, #4
 8004074:	6713      	str	r3, [r2, #112]	@ 0x70
 8004076:	4b5c      	ldr	r3, [pc, #368]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 8004078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407a:	4a5b      	ldr	r2, [pc, #364]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 800407c:	f043 0301 	orr.w	r3, r3, #1
 8004080:	6713      	str	r3, [r2, #112]	@ 0x70
 8004082:	e00b      	b.n	800409c <HAL_RCC_OscConfig+0x324>
 8004084:	4b58      	ldr	r3, [pc, #352]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 8004086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004088:	4a57      	ldr	r2, [pc, #348]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 800408a:	f023 0301 	bic.w	r3, r3, #1
 800408e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004090:	4b55      	ldr	r3, [pc, #340]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004094:	4a54      	ldr	r2, [pc, #336]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 8004096:	f023 0304 	bic.w	r3, r3, #4
 800409a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d015      	beq.n	80040d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a4:	f7fe fba2 	bl	80027ec <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ac:	f7fe fb9e 	bl	80027ec <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e0cb      	b.n	800425a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c2:	4b49      	ldr	r3, [pc, #292]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0ee      	beq.n	80040ac <HAL_RCC_OscConfig+0x334>
 80040ce:	e014      	b.n	80040fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d0:	f7fe fb8c 	bl	80027ec <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d6:	e00a      	b.n	80040ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d8:	f7fe fb88 	bl	80027ec <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e0b5      	b.n	800425a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ee:	4b3e      	ldr	r3, [pc, #248]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1ee      	bne.n	80040d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040fa:	7dfb      	ldrb	r3, [r7, #23]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d105      	bne.n	800410c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004100:	4b39      	ldr	r3, [pc, #228]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 8004102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004104:	4a38      	ldr	r2, [pc, #224]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 8004106:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800410a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80a1 	beq.w	8004258 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004116:	4b34      	ldr	r3, [pc, #208]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 030c 	and.w	r3, r3, #12
 800411e:	2b08      	cmp	r3, #8
 8004120:	d05c      	beq.n	80041dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d141      	bne.n	80041ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412a:	4b31      	ldr	r3, [pc, #196]	@ (80041f0 <HAL_RCC_OscConfig+0x478>)
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004130:	f7fe fb5c 	bl	80027ec <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004138:	f7fe fb58 	bl	80027ec <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e087      	b.n	800425a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414a:	4b27      	ldr	r3, [pc, #156]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69da      	ldr	r2, [r3, #28]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004164:	019b      	lsls	r3, r3, #6
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416c:	085b      	lsrs	r3, r3, #1
 800416e:	3b01      	subs	r3, #1
 8004170:	041b      	lsls	r3, r3, #16
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004178:	061b      	lsls	r3, r3, #24
 800417a:	491b      	ldr	r1, [pc, #108]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 800417c:	4313      	orrs	r3, r2
 800417e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004180:	4b1b      	ldr	r3, [pc, #108]	@ (80041f0 <HAL_RCC_OscConfig+0x478>)
 8004182:	2201      	movs	r2, #1
 8004184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004186:	f7fe fb31 	bl	80027ec <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800418e:	f7fe fb2d 	bl	80027ec <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e05c      	b.n	800425a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a0:	4b11      	ldr	r3, [pc, #68]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x416>
 80041ac:	e054      	b.n	8004258 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ae:	4b10      	ldr	r3, [pc, #64]	@ (80041f0 <HAL_RCC_OscConfig+0x478>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b4:	f7fe fb1a 	bl	80027ec <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041bc:	f7fe fb16 	bl	80027ec <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e045      	b.n	800425a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ce:	4b06      	ldr	r3, [pc, #24]	@ (80041e8 <HAL_RCC_OscConfig+0x470>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0x444>
 80041da:	e03d      	b.n	8004258 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d107      	bne.n	80041f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e038      	b.n	800425a <HAL_RCC_OscConfig+0x4e2>
 80041e8:	40023800 	.word	0x40023800
 80041ec:	40007000 	.word	0x40007000
 80041f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004264 <HAL_RCC_OscConfig+0x4ec>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d028      	beq.n	8004254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d121      	bne.n	8004254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421a:	429a      	cmp	r2, r3
 800421c:	d11a      	bne.n	8004254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004224:	4013      	ands	r3, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800422a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800422c:	4293      	cmp	r3, r2
 800422e:	d111      	bne.n	8004254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423a:	085b      	lsrs	r3, r3, #1
 800423c:	3b01      	subs	r3, #1
 800423e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004240:	429a      	cmp	r2, r3
 8004242:	d107      	bne.n	8004254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004250:	429a      	cmp	r2, r3
 8004252:	d001      	beq.n	8004258 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40023800 	.word	0x40023800

08004268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0cc      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800427c:	4b68      	ldr	r3, [pc, #416]	@ (8004420 <HAL_RCC_ClockConfig+0x1b8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d90c      	bls.n	80042a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428a:	4b65      	ldr	r3, [pc, #404]	@ (8004420 <HAL_RCC_ClockConfig+0x1b8>)
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004292:	4b63      	ldr	r3, [pc, #396]	@ (8004420 <HAL_RCC_ClockConfig+0x1b8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	429a      	cmp	r2, r3
 800429e:	d001      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0b8      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d020      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042bc:	4b59      	ldr	r3, [pc, #356]	@ (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	4a58      	ldr	r2, [pc, #352]	@ (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042d4:	4b53      	ldr	r3, [pc, #332]	@ (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	4a52      	ldr	r2, [pc, #328]	@ (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e0:	4b50      	ldr	r3, [pc, #320]	@ (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	494d      	ldr	r1, [pc, #308]	@ (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d044      	beq.n	8004388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d107      	bne.n	8004316 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004306:	4b47      	ldr	r3, [pc, #284]	@ (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d119      	bne.n	8004346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e07f      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d003      	beq.n	8004326 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004322:	2b03      	cmp	r3, #3
 8004324:	d107      	bne.n	8004336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004326:	4b3f      	ldr	r3, [pc, #252]	@ (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e06f      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004336:	4b3b      	ldr	r3, [pc, #236]	@ (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e067      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004346:	4b37      	ldr	r3, [pc, #220]	@ (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f023 0203 	bic.w	r2, r3, #3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	4934      	ldr	r1, [pc, #208]	@ (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 8004354:	4313      	orrs	r3, r2
 8004356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004358:	f7fe fa48 	bl	80027ec <HAL_GetTick>
 800435c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435e:	e00a      	b.n	8004376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004360:	f7fe fa44 	bl	80027ec <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e04f      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004376:	4b2b      	ldr	r3, [pc, #172]	@ (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 020c 	and.w	r2, r3, #12
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	429a      	cmp	r2, r3
 8004386:	d1eb      	bne.n	8004360 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004388:	4b25      	ldr	r3, [pc, #148]	@ (8004420 <HAL_RCC_ClockConfig+0x1b8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d20c      	bcs.n	80043b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004396:	4b22      	ldr	r3, [pc, #136]	@ (8004420 <HAL_RCC_ClockConfig+0x1b8>)
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800439e:	4b20      	ldr	r3, [pc, #128]	@ (8004420 <HAL_RCC_ClockConfig+0x1b8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d001      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e032      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043bc:	4b19      	ldr	r3, [pc, #100]	@ (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	4916      	ldr	r1, [pc, #88]	@ (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d009      	beq.n	80043ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043da:	4b12      	ldr	r3, [pc, #72]	@ (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	490e      	ldr	r1, [pc, #56]	@ (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043ee:	f000 f821 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 80043f2:	4602      	mov	r2, r0
 80043f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	091b      	lsrs	r3, r3, #4
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	490a      	ldr	r1, [pc, #40]	@ (8004428 <HAL_RCC_ClockConfig+0x1c0>)
 8004400:	5ccb      	ldrb	r3, [r1, r3]
 8004402:	fa22 f303 	lsr.w	r3, r2, r3
 8004406:	4a09      	ldr	r2, [pc, #36]	@ (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800440a:	4b09      	ldr	r3, [pc, #36]	@ (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7fe f9a8 	bl	8002764 <HAL_InitTick>

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40023c00 	.word	0x40023c00
 8004424:	40023800 	.word	0x40023800
 8004428:	0800b158 	.word	0x0800b158
 800442c:	20000000 	.word	0x20000000
 8004430:	20000004 	.word	0x20000004

08004434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004438:	b094      	sub	sp, #80	@ 0x50
 800443a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800444c:	4b79      	ldr	r3, [pc, #484]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x200>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 030c 	and.w	r3, r3, #12
 8004454:	2b08      	cmp	r3, #8
 8004456:	d00d      	beq.n	8004474 <HAL_RCC_GetSysClockFreq+0x40>
 8004458:	2b08      	cmp	r3, #8
 800445a:	f200 80e1 	bhi.w	8004620 <HAL_RCC_GetSysClockFreq+0x1ec>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <HAL_RCC_GetSysClockFreq+0x34>
 8004462:	2b04      	cmp	r3, #4
 8004464:	d003      	beq.n	800446e <HAL_RCC_GetSysClockFreq+0x3a>
 8004466:	e0db      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004468:	4b73      	ldr	r3, [pc, #460]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x204>)
 800446a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800446c:	e0db      	b.n	8004626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800446e:	4b73      	ldr	r3, [pc, #460]	@ (800463c <HAL_RCC_GetSysClockFreq+0x208>)
 8004470:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004472:	e0d8      	b.n	8004626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004474:	4b6f      	ldr	r3, [pc, #444]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x200>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800447c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800447e:	4b6d      	ldr	r3, [pc, #436]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x200>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d063      	beq.n	8004552 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800448a:	4b6a      	ldr	r3, [pc, #424]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x200>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	099b      	lsrs	r3, r3, #6
 8004490:	2200      	movs	r2, #0
 8004492:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004494:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449c:	633b      	str	r3, [r7, #48]	@ 0x30
 800449e:	2300      	movs	r3, #0
 80044a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80044a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80044a6:	4622      	mov	r2, r4
 80044a8:	462b      	mov	r3, r5
 80044aa:	f04f 0000 	mov.w	r0, #0
 80044ae:	f04f 0100 	mov.w	r1, #0
 80044b2:	0159      	lsls	r1, r3, #5
 80044b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044b8:	0150      	lsls	r0, r2, #5
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	4621      	mov	r1, r4
 80044c0:	1a51      	subs	r1, r2, r1
 80044c2:	6139      	str	r1, [r7, #16]
 80044c4:	4629      	mov	r1, r5
 80044c6:	eb63 0301 	sbc.w	r3, r3, r1
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044d8:	4659      	mov	r1, fp
 80044da:	018b      	lsls	r3, r1, #6
 80044dc:	4651      	mov	r1, sl
 80044de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044e2:	4651      	mov	r1, sl
 80044e4:	018a      	lsls	r2, r1, #6
 80044e6:	4651      	mov	r1, sl
 80044e8:	ebb2 0801 	subs.w	r8, r2, r1
 80044ec:	4659      	mov	r1, fp
 80044ee:	eb63 0901 	sbc.w	r9, r3, r1
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004506:	4690      	mov	r8, r2
 8004508:	4699      	mov	r9, r3
 800450a:	4623      	mov	r3, r4
 800450c:	eb18 0303 	adds.w	r3, r8, r3
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	462b      	mov	r3, r5
 8004514:	eb49 0303 	adc.w	r3, r9, r3
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004526:	4629      	mov	r1, r5
 8004528:	024b      	lsls	r3, r1, #9
 800452a:	4621      	mov	r1, r4
 800452c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004530:	4621      	mov	r1, r4
 8004532:	024a      	lsls	r2, r1, #9
 8004534:	4610      	mov	r0, r2
 8004536:	4619      	mov	r1, r3
 8004538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800453a:	2200      	movs	r2, #0
 800453c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800453e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004540:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004544:	f7fc fcde 	bl	8000f04 <__aeabi_uldivmod>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4613      	mov	r3, r2
 800454e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004550:	e058      	b.n	8004604 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004552:	4b38      	ldr	r3, [pc, #224]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x200>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	099b      	lsrs	r3, r3, #6
 8004558:	2200      	movs	r2, #0
 800455a:	4618      	mov	r0, r3
 800455c:	4611      	mov	r1, r2
 800455e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004562:	623b      	str	r3, [r7, #32]
 8004564:	2300      	movs	r3, #0
 8004566:	627b      	str	r3, [r7, #36]	@ 0x24
 8004568:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800456c:	4642      	mov	r2, r8
 800456e:	464b      	mov	r3, r9
 8004570:	f04f 0000 	mov.w	r0, #0
 8004574:	f04f 0100 	mov.w	r1, #0
 8004578:	0159      	lsls	r1, r3, #5
 800457a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800457e:	0150      	lsls	r0, r2, #5
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4641      	mov	r1, r8
 8004586:	ebb2 0a01 	subs.w	sl, r2, r1
 800458a:	4649      	mov	r1, r9
 800458c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800459c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045a4:	ebb2 040a 	subs.w	r4, r2, sl
 80045a8:	eb63 050b 	sbc.w	r5, r3, fp
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	00eb      	lsls	r3, r5, #3
 80045b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045ba:	00e2      	lsls	r2, r4, #3
 80045bc:	4614      	mov	r4, r2
 80045be:	461d      	mov	r5, r3
 80045c0:	4643      	mov	r3, r8
 80045c2:	18e3      	adds	r3, r4, r3
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	464b      	mov	r3, r9
 80045c8:	eb45 0303 	adc.w	r3, r5, r3
 80045cc:	607b      	str	r3, [r7, #4]
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045da:	4629      	mov	r1, r5
 80045dc:	028b      	lsls	r3, r1, #10
 80045de:	4621      	mov	r1, r4
 80045e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045e4:	4621      	mov	r1, r4
 80045e6:	028a      	lsls	r2, r1, #10
 80045e8:	4610      	mov	r0, r2
 80045ea:	4619      	mov	r1, r3
 80045ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ee:	2200      	movs	r2, #0
 80045f0:	61bb      	str	r3, [r7, #24]
 80045f2:	61fa      	str	r2, [r7, #28]
 80045f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045f8:	f7fc fc84 	bl	8000f04 <__aeabi_uldivmod>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4613      	mov	r3, r2
 8004602:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004604:	4b0b      	ldr	r3, [pc, #44]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x200>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	0c1b      	lsrs	r3, r3, #16
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	3301      	adds	r3, #1
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004614:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004618:	fbb2 f3f3 	udiv	r3, r2, r3
 800461c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800461e:	e002      	b.n	8004626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004620:	4b05      	ldr	r3, [pc, #20]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x204>)
 8004622:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004628:	4618      	mov	r0, r3
 800462a:	3750      	adds	r7, #80	@ 0x50
 800462c:	46bd      	mov	sp, r7
 800462e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800
 8004638:	00f42400 	.word	0x00f42400
 800463c:	007a1200 	.word	0x007a1200

08004640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004644:	4b03      	ldr	r3, [pc, #12]	@ (8004654 <HAL_RCC_GetHCLKFreq+0x14>)
 8004646:	681b      	ldr	r3, [r3, #0]
}
 8004648:	4618      	mov	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	20000000 	.word	0x20000000

08004658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800465c:	f7ff fff0 	bl	8004640 <HAL_RCC_GetHCLKFreq>
 8004660:	4602      	mov	r2, r0
 8004662:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	0a9b      	lsrs	r3, r3, #10
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	4903      	ldr	r1, [pc, #12]	@ (800467c <HAL_RCC_GetPCLK1Freq+0x24>)
 800466e:	5ccb      	ldrb	r3, [r1, r3]
 8004670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004674:	4618      	mov	r0, r3
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40023800 	.word	0x40023800
 800467c:	0800b168 	.word	0x0800b168

08004680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004684:	f7ff ffdc 	bl	8004640 <HAL_RCC_GetHCLKFreq>
 8004688:	4602      	mov	r2, r0
 800468a:	4b05      	ldr	r3, [pc, #20]	@ (80046a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	0b5b      	lsrs	r3, r3, #13
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	4903      	ldr	r1, [pc, #12]	@ (80046a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004696:	5ccb      	ldrb	r3, [r1, r3]
 8004698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800469c:	4618      	mov	r0, r3
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40023800 	.word	0x40023800
 80046a4:	0800b168 	.word	0x0800b168

080046a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e07b      	b.n	80047b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d108      	bne.n	80046d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046ca:	d009      	beq.n	80046e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	61da      	str	r2, [r3, #28]
 80046d2:	e005      	b.n	80046e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fd fdfc 	bl	80022f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004716:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004764:	ea42 0103 	orr.w	r1, r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	0c1b      	lsrs	r3, r3, #16
 800477e:	f003 0104 	and.w	r1, r3, #4
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004786:	f003 0210 	and.w	r2, r3, #16
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b088      	sub	sp, #32
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	603b      	str	r3, [r7, #0]
 80047c6:	4613      	mov	r3, r2
 80047c8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047ca:	f7fe f80f 	bl	80027ec <HAL_GetTick>
 80047ce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80047d0:	88fb      	ldrh	r3, [r7, #6]
 80047d2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d001      	beq.n	80047e4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80047e0:	2302      	movs	r3, #2
 80047e2:	e12a      	b.n	8004a3a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_SPI_Transmit+0x36>
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e122      	b.n	8004a3a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_SPI_Transmit+0x48>
 80047fe:	2302      	movs	r3, #2
 8004800:	e11b      	b.n	8004a3a <HAL_SPI_Transmit+0x280>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2203      	movs	r2, #3
 800480e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	88fa      	ldrh	r2, [r7, #6]
 8004822:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	88fa      	ldrh	r2, [r7, #6]
 8004828:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004850:	d10f      	bne.n	8004872 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004860:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004870:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487c:	2b40      	cmp	r3, #64	@ 0x40
 800487e:	d007      	beq.n	8004890 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800488e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004898:	d152      	bne.n	8004940 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <HAL_SPI_Transmit+0xee>
 80048a2:	8b7b      	ldrh	r3, [r7, #26]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d145      	bne.n	8004934 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ac:	881a      	ldrh	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b8:	1c9a      	adds	r2, r3, #2
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048cc:	e032      	b.n	8004934 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d112      	bne.n	8004902 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e0:	881a      	ldrh	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ec:	1c9a      	adds	r2, r3, #2
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004900:	e018      	b.n	8004934 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004902:	f7fd ff73 	bl	80027ec <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d803      	bhi.n	800491a <HAL_SPI_Transmit+0x160>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004918:	d102      	bne.n	8004920 <HAL_SPI_Transmit+0x166>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d109      	bne.n	8004934 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e082      	b.n	8004a3a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1c7      	bne.n	80048ce <HAL_SPI_Transmit+0x114>
 800493e:	e053      	b.n	80049e8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_SPI_Transmit+0x194>
 8004948:	8b7b      	ldrh	r3, [r7, #26]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d147      	bne.n	80049de <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	330c      	adds	r3, #12
 8004958:	7812      	ldrb	r2, [r2, #0]
 800495a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004974:	e033      	b.n	80049de <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b02      	cmp	r3, #2
 8004982:	d113      	bne.n	80049ac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	330c      	adds	r3, #12
 800498e:	7812      	ldrb	r2, [r2, #0]
 8004990:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80049aa:	e018      	b.n	80049de <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ac:	f7fd ff1e 	bl	80027ec <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d803      	bhi.n	80049c4 <HAL_SPI_Transmit+0x20a>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c2:	d102      	bne.n	80049ca <HAL_SPI_Transmit+0x210>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d109      	bne.n	80049de <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e02d      	b.n	8004a3a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1c6      	bne.n	8004976 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049e8:	69fa      	ldr	r2, [r7, #28]
 80049ea:	6839      	ldr	r1, [r7, #0]
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 fbd9 	bl	80051a4 <SPI_EndRxTxTransaction>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10a      	bne.n	8004a1c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004a38:	2300      	movs	r3, #0
  }
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3720      	adds	r7, #32
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b088      	sub	sp, #32
 8004a46:	af02      	add	r7, sp, #8
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	603b      	str	r3, [r7, #0]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d001      	beq.n	8004a62 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e104      	b.n	8004c6c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a6a:	d112      	bne.n	8004a92 <HAL_SPI_Receive+0x50>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10e      	bne.n	8004a92 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2204      	movs	r2, #4
 8004a78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a7c:	88fa      	ldrh	r2, [r7, #6]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	4613      	mov	r3, r2
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 f8f3 	bl	8004c74 <HAL_SPI_TransmitReceive>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	e0ec      	b.n	8004c6c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a92:	f7fd feab 	bl	80027ec <HAL_GetTick>
 8004a96:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <HAL_SPI_Receive+0x62>
 8004a9e:	88fb      	ldrh	r3, [r7, #6]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0e1      	b.n	8004c6c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_SPI_Receive+0x74>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e0da      	b.n	8004c6c <HAL_SPI_Receive+0x22a>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	88fa      	ldrh	r2, [r7, #6]
 8004ad6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	88fa      	ldrh	r2, [r7, #6]
 8004adc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b04:	d10f      	bne.n	8004b26 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b24:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b30:	2b40      	cmp	r3, #64	@ 0x40
 8004b32:	d007      	beq.n	8004b44 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b42:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d170      	bne.n	8004c2e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b4c:	e035      	b.n	8004bba <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d115      	bne.n	8004b88 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f103 020c 	add.w	r2, r3, #12
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b68:	7812      	ldrb	r2, [r2, #0]
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b86:	e018      	b.n	8004bba <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b88:	f7fd fe30 	bl	80027ec <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d803      	bhi.n	8004ba0 <HAL_SPI_Receive+0x15e>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9e:	d102      	bne.n	8004ba6 <HAL_SPI_Receive+0x164>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d109      	bne.n	8004bba <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e058      	b.n	8004c6c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1c4      	bne.n	8004b4e <HAL_SPI_Receive+0x10c>
 8004bc4:	e038      	b.n	8004c38 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d113      	bne.n	8004bfc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68da      	ldr	r2, [r3, #12]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bde:	b292      	uxth	r2, r2
 8004be0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be6:	1c9a      	adds	r2, r3, #2
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bfa:	e018      	b.n	8004c2e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bfc:	f7fd fdf6 	bl	80027ec <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d803      	bhi.n	8004c14 <HAL_SPI_Receive+0x1d2>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c12:	d102      	bne.n	8004c1a <HAL_SPI_Receive+0x1d8>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e01e      	b.n	8004c6c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1c6      	bne.n	8004bc6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	6839      	ldr	r1, [r7, #0]
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 fa4b 	bl	80050d8 <SPI_EndRxTransaction>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
  }
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	@ 0x28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c82:	2301      	movs	r3, #1
 8004c84:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c86:	f7fd fdb1 	bl	80027ec <HAL_GetTick>
 8004c8a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c92:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004c9a:	887b      	ldrh	r3, [r7, #2]
 8004c9c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c9e:	7ffb      	ldrb	r3, [r7, #31]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d00c      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x4a>
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004caa:	d106      	bne.n	8004cba <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d102      	bne.n	8004cba <HAL_SPI_TransmitReceive+0x46>
 8004cb4:	7ffb      	ldrb	r3, [r7, #31]
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d001      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e17f      	b.n	8004fbe <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_SPI_TransmitReceive+0x5c>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_SPI_TransmitReceive+0x5c>
 8004cca:	887b      	ldrh	r3, [r7, #2]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e174      	b.n	8004fbe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_SPI_TransmitReceive+0x6e>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e16d      	b.n	8004fbe <HAL_SPI_TransmitReceive+0x34a>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d003      	beq.n	8004cfe <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2205      	movs	r2, #5
 8004cfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	887a      	ldrh	r2, [r7, #2]
 8004d0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	887a      	ldrh	r2, [r7, #2]
 8004d14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	887a      	ldrh	r2, [r7, #2]
 8004d20:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	887a      	ldrh	r2, [r7, #2]
 8004d26:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3e:	2b40      	cmp	r3, #64	@ 0x40
 8004d40:	d007      	beq.n	8004d52 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d5a:	d17e      	bne.n	8004e5a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_SPI_TransmitReceive+0xf6>
 8004d64:	8afb      	ldrh	r3, [r7, #22]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d16c      	bne.n	8004e44 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6e:	881a      	ldrh	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7a:	1c9a      	adds	r2, r3, #2
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d8e:	e059      	b.n	8004e44 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d11b      	bne.n	8004dd6 <HAL_SPI_TransmitReceive+0x162>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d016      	beq.n	8004dd6 <HAL_SPI_TransmitReceive+0x162>
 8004da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d113      	bne.n	8004dd6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db2:	881a      	ldrh	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dbe:	1c9a      	adds	r2, r3, #2
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d119      	bne.n	8004e18 <HAL_SPI_TransmitReceive+0x1a4>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d014      	beq.n	8004e18 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df8:	b292      	uxth	r2, r2
 8004dfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e00:	1c9a      	adds	r2, r3, #2
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e14:	2301      	movs	r3, #1
 8004e16:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e18:	f7fd fce8 	bl	80027ec <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d80d      	bhi.n	8004e44 <HAL_SPI_TransmitReceive+0x1d0>
 8004e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2e:	d009      	beq.n	8004e44 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e0bc      	b.n	8004fbe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1a0      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x11c>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d19b      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x11c>
 8004e58:	e082      	b.n	8004f60 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_SPI_TransmitReceive+0x1f4>
 8004e62:	8afb      	ldrh	r3, [r7, #22]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d171      	bne.n	8004f4c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	330c      	adds	r3, #12
 8004e72:	7812      	ldrb	r2, [r2, #0]
 8004e74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e8e:	e05d      	b.n	8004f4c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d11c      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x264>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d017      	beq.n	8004ed8 <HAL_SPI_TransmitReceive+0x264>
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d114      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	330c      	adds	r3, #12
 8004eb8:	7812      	ldrb	r2, [r2, #0]
 8004eba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d119      	bne.n	8004f1a <HAL_SPI_TransmitReceive+0x2a6>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d014      	beq.n	8004f1a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f16:	2301      	movs	r3, #1
 8004f18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f1a:	f7fd fc67 	bl	80027ec <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d803      	bhi.n	8004f32 <HAL_SPI_TransmitReceive+0x2be>
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f30:	d102      	bne.n	8004f38 <HAL_SPI_TransmitReceive+0x2c4>
 8004f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d109      	bne.n	8004f4c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e038      	b.n	8004fbe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d19c      	bne.n	8004e90 <HAL_SPI_TransmitReceive+0x21c>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d197      	bne.n	8004e90 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f60:	6a3a      	ldr	r2, [r7, #32]
 8004f62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 f91d 	bl	80051a4 <SPI_EndRxTxTransaction>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e01d      	b.n	8004fbe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10a      	bne.n	8004fa0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
  }
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3728      	adds	r7, #40	@ 0x28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fd8:	f7fd fc08 	bl	80027ec <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe0:	1a9b      	subs	r3, r3, r2
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fe8:	f7fd fc00 	bl	80027ec <HAL_GetTick>
 8004fec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fee:	4b39      	ldr	r3, [pc, #228]	@ (80050d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	015b      	lsls	r3, r3, #5
 8004ff4:	0d1b      	lsrs	r3, r3, #20
 8004ff6:	69fa      	ldr	r2, [r7, #28]
 8004ff8:	fb02 f303 	mul.w	r3, r2, r3
 8004ffc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ffe:	e054      	b.n	80050aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005006:	d050      	beq.n	80050aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005008:	f7fd fbf0 	bl	80027ec <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	429a      	cmp	r2, r3
 8005016:	d902      	bls.n	800501e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d13d      	bne.n	800509a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800502c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005036:	d111      	bne.n	800505c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005040:	d004      	beq.n	800504c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800504a:	d107      	bne.n	800505c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800505a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005064:	d10f      	bne.n	8005086 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005084:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e017      	b.n	80050ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4013      	ands	r3, r2
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	bf0c      	ite	eq
 80050ba:	2301      	moveq	r3, #1
 80050bc:	2300      	movne	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d19b      	bne.n	8005000 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3720      	adds	r7, #32
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000000 	.word	0x20000000

080050d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050ec:	d111      	bne.n	8005112 <SPI_EndRxTransaction+0x3a>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050f6:	d004      	beq.n	8005102 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005100:	d107      	bne.n	8005112 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005110:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800511a:	d12a      	bne.n	8005172 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005124:	d012      	beq.n	800514c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2200      	movs	r2, #0
 800512e:	2180      	movs	r1, #128	@ 0x80
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff ff49 	bl	8004fc8 <SPI_WaitFlagStateUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d02d      	beq.n	8005198 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005140:	f043 0220 	orr.w	r2, r3, #32
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e026      	b.n	800519a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2200      	movs	r2, #0
 8005154:	2101      	movs	r1, #1
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f7ff ff36 	bl	8004fc8 <SPI_WaitFlagStateUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01a      	beq.n	8005198 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005166:	f043 0220 	orr.w	r2, r3, #32
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e013      	b.n	800519a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2200      	movs	r2, #0
 800517a:	2101      	movs	r1, #1
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f7ff ff23 	bl	8004fc8 <SPI_WaitFlagStateUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800518c:	f043 0220 	orr.w	r2, r3, #32
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e000      	b.n	800519a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2201      	movs	r2, #1
 80051b8:	2102      	movs	r1, #2
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f7ff ff04 	bl	8004fc8 <SPI_WaitFlagStateUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ca:	f043 0220 	orr.w	r2, r3, #32
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e032      	b.n	800523c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005244 <SPI_EndRxTxTransaction+0xa0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1b      	ldr	r2, [pc, #108]	@ (8005248 <SPI_EndRxTxTransaction+0xa4>)
 80051dc:	fba2 2303 	umull	r2, r3, r2, r3
 80051e0:	0d5b      	lsrs	r3, r3, #21
 80051e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80051e6:	fb02 f303 	mul.w	r3, r2, r3
 80051ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051f4:	d112      	bne.n	800521c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2200      	movs	r2, #0
 80051fe:	2180      	movs	r1, #128	@ 0x80
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f7ff fee1 	bl	8004fc8 <SPI_WaitFlagStateUntilTimeout>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d016      	beq.n	800523a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005210:	f043 0220 	orr.w	r2, r3, #32
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e00f      	b.n	800523c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	3b01      	subs	r3, #1
 8005226:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005232:	2b80      	cmp	r3, #128	@ 0x80
 8005234:	d0f2      	beq.n	800521c <SPI_EndRxTxTransaction+0x78>
 8005236:	e000      	b.n	800523a <SPI_EndRxTxTransaction+0x96>
        break;
 8005238:	bf00      	nop
  }

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	20000000 	.word	0x20000000
 8005248:	165e9f81 	.word	0x165e9f81

0800524c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e042      	b.n	80052e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7fd f9e2 	bl	800263c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2224      	movs	r2, #36	@ 0x24
 800527c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800528e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f973 	bl	800557c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	691a      	ldr	r2, [r3, #16]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695a      	ldr	r2, [r3, #20]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08a      	sub	sp, #40	@ 0x28
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	4613      	mov	r3, r2
 80052fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b20      	cmp	r3, #32
 800530a:	d175      	bne.n	80053f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <HAL_UART_Transmit+0x2c>
 8005312:	88fb      	ldrh	r3, [r7, #6]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e06e      	b.n	80053fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2221      	movs	r2, #33	@ 0x21
 8005326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800532a:	f7fd fa5f 	bl	80027ec <HAL_GetTick>
 800532e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	88fa      	ldrh	r2, [r7, #6]
 8005334:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	88fa      	ldrh	r2, [r7, #6]
 800533a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005344:	d108      	bne.n	8005358 <HAL_UART_Transmit+0x6c>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d104      	bne.n	8005358 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800534e:	2300      	movs	r3, #0
 8005350:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	61bb      	str	r3, [r7, #24]
 8005356:	e003      	b.n	8005360 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800535c:	2300      	movs	r3, #0
 800535e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005360:	e02e      	b.n	80053c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2200      	movs	r2, #0
 800536a:	2180      	movs	r1, #128	@ 0x80
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f848 	bl	8005402 <UART_WaitOnFlagUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d005      	beq.n	8005384 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e03a      	b.n	80053fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10b      	bne.n	80053a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005398:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	3302      	adds	r3, #2
 800539e:	61bb      	str	r3, [r7, #24]
 80053a0:	e007      	b.n	80053b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	781a      	ldrb	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	3301      	adds	r3, #1
 80053b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1cb      	bne.n	8005362 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2200      	movs	r2, #0
 80053d2:	2140      	movs	r1, #64	@ 0x40
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f814 	bl	8005402 <UART_WaitOnFlagUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e006      	b.n	80053fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	e000      	b.n	80053fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80053f8:	2302      	movs	r3, #2
  }
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3720      	adds	r7, #32
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b086      	sub	sp, #24
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	603b      	str	r3, [r7, #0]
 800540e:	4613      	mov	r3, r2
 8005410:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005412:	e03b      	b.n	800548c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541a:	d037      	beq.n	800548c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541c:	f7fd f9e6 	bl	80027ec <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	6a3a      	ldr	r2, [r7, #32]
 8005428:	429a      	cmp	r2, r3
 800542a:	d302      	bcc.n	8005432 <UART_WaitOnFlagUntilTimeout+0x30>
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e03a      	b.n	80054ac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d023      	beq.n	800548c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b80      	cmp	r3, #128	@ 0x80
 8005448:	d020      	beq.n	800548c <UART_WaitOnFlagUntilTimeout+0x8a>
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b40      	cmp	r3, #64	@ 0x40
 800544e:	d01d      	beq.n	800548c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b08      	cmp	r3, #8
 800545c:	d116      	bne.n	800548c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f81d 	bl	80054b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2208      	movs	r2, #8
 800547e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e00f      	b.n	80054ac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	4013      	ands	r3, r2
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	429a      	cmp	r2, r3
 800549a:	bf0c      	ite	eq
 800549c:	2301      	moveq	r3, #1
 800549e:	2300      	movne	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	461a      	mov	r2, r3
 80054a4:	79fb      	ldrb	r3, [r7, #7]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d0b4      	beq.n	8005414 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b095      	sub	sp, #84	@ 0x54
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	330c      	adds	r3, #12
 80054c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	330c      	adds	r3, #12
 80054da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80054de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e5      	bne.n	80054bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3314      	adds	r3, #20
 80054f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	e853 3f00 	ldrex	r3, [r3]
 80054fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f023 0301 	bic.w	r3, r3, #1
 8005506:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3314      	adds	r3, #20
 800550e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005510:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005512:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005514:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005518:	e841 2300 	strex	r3, r2, [r1]
 800551c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e5      	bne.n	80054f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005528:	2b01      	cmp	r3, #1
 800552a:	d119      	bne.n	8005560 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	330c      	adds	r3, #12
 8005532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	e853 3f00 	ldrex	r3, [r3]
 800553a:	60bb      	str	r3, [r7, #8]
   return(result);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f023 0310 	bic.w	r3, r3, #16
 8005542:	647b      	str	r3, [r7, #68]	@ 0x44
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	330c      	adds	r3, #12
 800554a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800554c:	61ba      	str	r2, [r7, #24]
 800554e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005550:	6979      	ldr	r1, [r7, #20]
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	e841 2300 	strex	r3, r2, [r1]
 8005558:	613b      	str	r3, [r7, #16]
   return(result);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e5      	bne.n	800552c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800556e:	bf00      	nop
 8005570:	3754      	adds	r7, #84	@ 0x54
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
	...

0800557c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800557c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005580:	b0c0      	sub	sp, #256	@ 0x100
 8005582:	af00      	add	r7, sp, #0
 8005584:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005598:	68d9      	ldr	r1, [r3, #12]
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	ea40 0301 	orr.w	r3, r0, r1
 80055a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	431a      	orrs	r2, r3
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	431a      	orrs	r2, r3
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055d4:	f021 010c 	bic.w	r1, r1, #12
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055e2:	430b      	orrs	r3, r1
 80055e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80055f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f6:	6999      	ldr	r1, [r3, #24]
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	ea40 0301 	orr.w	r3, r0, r1
 8005602:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	4b8f      	ldr	r3, [pc, #572]	@ (8005848 <UART_SetConfig+0x2cc>)
 800560c:	429a      	cmp	r2, r3
 800560e:	d005      	beq.n	800561c <UART_SetConfig+0xa0>
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	4b8d      	ldr	r3, [pc, #564]	@ (800584c <UART_SetConfig+0x2d0>)
 8005618:	429a      	cmp	r2, r3
 800561a:	d104      	bne.n	8005626 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800561c:	f7ff f830 	bl	8004680 <HAL_RCC_GetPCLK2Freq>
 8005620:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005624:	e003      	b.n	800562e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005626:	f7ff f817 	bl	8004658 <HAL_RCC_GetPCLK1Freq>
 800562a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800562e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005638:	f040 810c 	bne.w	8005854 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800563c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005640:	2200      	movs	r2, #0
 8005642:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005646:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800564a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800564e:	4622      	mov	r2, r4
 8005650:	462b      	mov	r3, r5
 8005652:	1891      	adds	r1, r2, r2
 8005654:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005656:	415b      	adcs	r3, r3
 8005658:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800565a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800565e:	4621      	mov	r1, r4
 8005660:	eb12 0801 	adds.w	r8, r2, r1
 8005664:	4629      	mov	r1, r5
 8005666:	eb43 0901 	adc.w	r9, r3, r1
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800567a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800567e:	4690      	mov	r8, r2
 8005680:	4699      	mov	r9, r3
 8005682:	4623      	mov	r3, r4
 8005684:	eb18 0303 	adds.w	r3, r8, r3
 8005688:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800568c:	462b      	mov	r3, r5
 800568e:	eb49 0303 	adc.w	r3, r9, r3
 8005692:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80056a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80056aa:	460b      	mov	r3, r1
 80056ac:	18db      	adds	r3, r3, r3
 80056ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80056b0:	4613      	mov	r3, r2
 80056b2:	eb42 0303 	adc.w	r3, r2, r3
 80056b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80056b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80056bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80056c0:	f7fb fc20 	bl	8000f04 <__aeabi_uldivmod>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4b61      	ldr	r3, [pc, #388]	@ (8005850 <UART_SetConfig+0x2d4>)
 80056ca:	fba3 2302 	umull	r2, r3, r3, r2
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	011c      	lsls	r4, r3, #4
 80056d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056e4:	4642      	mov	r2, r8
 80056e6:	464b      	mov	r3, r9
 80056e8:	1891      	adds	r1, r2, r2
 80056ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056ec:	415b      	adcs	r3, r3
 80056ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056f4:	4641      	mov	r1, r8
 80056f6:	eb12 0a01 	adds.w	sl, r2, r1
 80056fa:	4649      	mov	r1, r9
 80056fc:	eb43 0b01 	adc.w	fp, r3, r1
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800570c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005710:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005714:	4692      	mov	sl, r2
 8005716:	469b      	mov	fp, r3
 8005718:	4643      	mov	r3, r8
 800571a:	eb1a 0303 	adds.w	r3, sl, r3
 800571e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005722:	464b      	mov	r3, r9
 8005724:	eb4b 0303 	adc.w	r3, fp, r3
 8005728:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800572c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005738:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800573c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005740:	460b      	mov	r3, r1
 8005742:	18db      	adds	r3, r3, r3
 8005744:	643b      	str	r3, [r7, #64]	@ 0x40
 8005746:	4613      	mov	r3, r2
 8005748:	eb42 0303 	adc.w	r3, r2, r3
 800574c:	647b      	str	r3, [r7, #68]	@ 0x44
 800574e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005752:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005756:	f7fb fbd5 	bl	8000f04 <__aeabi_uldivmod>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4611      	mov	r1, r2
 8005760:	4b3b      	ldr	r3, [pc, #236]	@ (8005850 <UART_SetConfig+0x2d4>)
 8005762:	fba3 2301 	umull	r2, r3, r3, r1
 8005766:	095b      	lsrs	r3, r3, #5
 8005768:	2264      	movs	r2, #100	@ 0x64
 800576a:	fb02 f303 	mul.w	r3, r2, r3
 800576e:	1acb      	subs	r3, r1, r3
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005776:	4b36      	ldr	r3, [pc, #216]	@ (8005850 <UART_SetConfig+0x2d4>)
 8005778:	fba3 2302 	umull	r2, r3, r3, r2
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005784:	441c      	add	r4, r3
 8005786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800578a:	2200      	movs	r2, #0
 800578c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005790:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005794:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005798:	4642      	mov	r2, r8
 800579a:	464b      	mov	r3, r9
 800579c:	1891      	adds	r1, r2, r2
 800579e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80057a0:	415b      	adcs	r3, r3
 80057a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80057a8:	4641      	mov	r1, r8
 80057aa:	1851      	adds	r1, r2, r1
 80057ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80057ae:	4649      	mov	r1, r9
 80057b0:	414b      	adcs	r3, r1
 80057b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	f04f 0300 	mov.w	r3, #0
 80057bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80057c0:	4659      	mov	r1, fp
 80057c2:	00cb      	lsls	r3, r1, #3
 80057c4:	4651      	mov	r1, sl
 80057c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ca:	4651      	mov	r1, sl
 80057cc:	00ca      	lsls	r2, r1, #3
 80057ce:	4610      	mov	r0, r2
 80057d0:	4619      	mov	r1, r3
 80057d2:	4603      	mov	r3, r0
 80057d4:	4642      	mov	r2, r8
 80057d6:	189b      	adds	r3, r3, r2
 80057d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057dc:	464b      	mov	r3, r9
 80057de:	460a      	mov	r2, r1
 80057e0:	eb42 0303 	adc.w	r3, r2, r3
 80057e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80057f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057fc:	460b      	mov	r3, r1
 80057fe:	18db      	adds	r3, r3, r3
 8005800:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005802:	4613      	mov	r3, r2
 8005804:	eb42 0303 	adc.w	r3, r2, r3
 8005808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800580a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800580e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005812:	f7fb fb77 	bl	8000f04 <__aeabi_uldivmod>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4b0d      	ldr	r3, [pc, #52]	@ (8005850 <UART_SetConfig+0x2d4>)
 800581c:	fba3 1302 	umull	r1, r3, r3, r2
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	2164      	movs	r1, #100	@ 0x64
 8005824:	fb01 f303 	mul.w	r3, r1, r3
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	3332      	adds	r3, #50	@ 0x32
 800582e:	4a08      	ldr	r2, [pc, #32]	@ (8005850 <UART_SetConfig+0x2d4>)
 8005830:	fba2 2303 	umull	r2, r3, r2, r3
 8005834:	095b      	lsrs	r3, r3, #5
 8005836:	f003 0207 	and.w	r2, r3, #7
 800583a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4422      	add	r2, r4
 8005842:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005844:	e106      	b.n	8005a54 <UART_SetConfig+0x4d8>
 8005846:	bf00      	nop
 8005848:	40011000 	.word	0x40011000
 800584c:	40011400 	.word	0x40011400
 8005850:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005858:	2200      	movs	r2, #0
 800585a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800585e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005862:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005866:	4642      	mov	r2, r8
 8005868:	464b      	mov	r3, r9
 800586a:	1891      	adds	r1, r2, r2
 800586c:	6239      	str	r1, [r7, #32]
 800586e:	415b      	adcs	r3, r3
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
 8005872:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005876:	4641      	mov	r1, r8
 8005878:	1854      	adds	r4, r2, r1
 800587a:	4649      	mov	r1, r9
 800587c:	eb43 0501 	adc.w	r5, r3, r1
 8005880:	f04f 0200 	mov.w	r2, #0
 8005884:	f04f 0300 	mov.w	r3, #0
 8005888:	00eb      	lsls	r3, r5, #3
 800588a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800588e:	00e2      	lsls	r2, r4, #3
 8005890:	4614      	mov	r4, r2
 8005892:	461d      	mov	r5, r3
 8005894:	4643      	mov	r3, r8
 8005896:	18e3      	adds	r3, r4, r3
 8005898:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800589c:	464b      	mov	r3, r9
 800589e:	eb45 0303 	adc.w	r3, r5, r3
 80058a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058b6:	f04f 0200 	mov.w	r2, #0
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80058c2:	4629      	mov	r1, r5
 80058c4:	008b      	lsls	r3, r1, #2
 80058c6:	4621      	mov	r1, r4
 80058c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058cc:	4621      	mov	r1, r4
 80058ce:	008a      	lsls	r2, r1, #2
 80058d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058d4:	f7fb fb16 	bl	8000f04 <__aeabi_uldivmod>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4b60      	ldr	r3, [pc, #384]	@ (8005a60 <UART_SetConfig+0x4e4>)
 80058de:	fba3 2302 	umull	r2, r3, r3, r2
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	011c      	lsls	r4, r3, #4
 80058e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80058f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80058f8:	4642      	mov	r2, r8
 80058fa:	464b      	mov	r3, r9
 80058fc:	1891      	adds	r1, r2, r2
 80058fe:	61b9      	str	r1, [r7, #24]
 8005900:	415b      	adcs	r3, r3
 8005902:	61fb      	str	r3, [r7, #28]
 8005904:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005908:	4641      	mov	r1, r8
 800590a:	1851      	adds	r1, r2, r1
 800590c:	6139      	str	r1, [r7, #16]
 800590e:	4649      	mov	r1, r9
 8005910:	414b      	adcs	r3, r1
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	f04f 0300 	mov.w	r3, #0
 800591c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005920:	4659      	mov	r1, fp
 8005922:	00cb      	lsls	r3, r1, #3
 8005924:	4651      	mov	r1, sl
 8005926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800592a:	4651      	mov	r1, sl
 800592c:	00ca      	lsls	r2, r1, #3
 800592e:	4610      	mov	r0, r2
 8005930:	4619      	mov	r1, r3
 8005932:	4603      	mov	r3, r0
 8005934:	4642      	mov	r2, r8
 8005936:	189b      	adds	r3, r3, r2
 8005938:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800593c:	464b      	mov	r3, r9
 800593e:	460a      	mov	r2, r1
 8005940:	eb42 0303 	adc.w	r3, r2, r3
 8005944:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005952:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005960:	4649      	mov	r1, r9
 8005962:	008b      	lsls	r3, r1, #2
 8005964:	4641      	mov	r1, r8
 8005966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800596a:	4641      	mov	r1, r8
 800596c:	008a      	lsls	r2, r1, #2
 800596e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005972:	f7fb fac7 	bl	8000f04 <__aeabi_uldivmod>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4611      	mov	r1, r2
 800597c:	4b38      	ldr	r3, [pc, #224]	@ (8005a60 <UART_SetConfig+0x4e4>)
 800597e:	fba3 2301 	umull	r2, r3, r3, r1
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	2264      	movs	r2, #100	@ 0x64
 8005986:	fb02 f303 	mul.w	r3, r2, r3
 800598a:	1acb      	subs	r3, r1, r3
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	3332      	adds	r3, #50	@ 0x32
 8005990:	4a33      	ldr	r2, [pc, #204]	@ (8005a60 <UART_SetConfig+0x4e4>)
 8005992:	fba2 2303 	umull	r2, r3, r2, r3
 8005996:	095b      	lsrs	r3, r3, #5
 8005998:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800599c:	441c      	add	r4, r3
 800599e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059a2:	2200      	movs	r2, #0
 80059a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80059a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80059a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80059ac:	4642      	mov	r2, r8
 80059ae:	464b      	mov	r3, r9
 80059b0:	1891      	adds	r1, r2, r2
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	415b      	adcs	r3, r3
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059bc:	4641      	mov	r1, r8
 80059be:	1851      	adds	r1, r2, r1
 80059c0:	6039      	str	r1, [r7, #0]
 80059c2:	4649      	mov	r1, r9
 80059c4:	414b      	adcs	r3, r1
 80059c6:	607b      	str	r3, [r7, #4]
 80059c8:	f04f 0200 	mov.w	r2, #0
 80059cc:	f04f 0300 	mov.w	r3, #0
 80059d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059d4:	4659      	mov	r1, fp
 80059d6:	00cb      	lsls	r3, r1, #3
 80059d8:	4651      	mov	r1, sl
 80059da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059de:	4651      	mov	r1, sl
 80059e0:	00ca      	lsls	r2, r1, #3
 80059e2:	4610      	mov	r0, r2
 80059e4:	4619      	mov	r1, r3
 80059e6:	4603      	mov	r3, r0
 80059e8:	4642      	mov	r2, r8
 80059ea:	189b      	adds	r3, r3, r2
 80059ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059ee:	464b      	mov	r3, r9
 80059f0:	460a      	mov	r2, r1
 80059f2:	eb42 0303 	adc.w	r3, r2, r3
 80059f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a02:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	f04f 0300 	mov.w	r3, #0
 8005a0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a10:	4649      	mov	r1, r9
 8005a12:	008b      	lsls	r3, r1, #2
 8005a14:	4641      	mov	r1, r8
 8005a16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a1a:	4641      	mov	r1, r8
 8005a1c:	008a      	lsls	r2, r1, #2
 8005a1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a22:	f7fb fa6f 	bl	8000f04 <__aeabi_uldivmod>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a60 <UART_SetConfig+0x4e4>)
 8005a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	2164      	movs	r1, #100	@ 0x64
 8005a34:	fb01 f303 	mul.w	r3, r1, r3
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	3332      	adds	r3, #50	@ 0x32
 8005a3e:	4a08      	ldr	r2, [pc, #32]	@ (8005a60 <UART_SetConfig+0x4e4>)
 8005a40:	fba2 2303 	umull	r2, r3, r2, r3
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	f003 020f 	and.w	r2, r3, #15
 8005a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4422      	add	r2, r4
 8005a52:	609a      	str	r2, [r3, #8]
}
 8005a54:	bf00      	nop
 8005a56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a60:	51eb851f 	.word	0x51eb851f

08005a64 <bmp280_send>:
	int16_t  					dig_P8;						/*!< Pressure compensation dig_P8 */
	int16_t  					dig_P9;						/*!< Pressure compensation dig_P9 */
} bmp280_t;

static err_code_t bmp280_send(bmp280_handle_t handle, uint8_t reg_addr, uint8_t *buf_send, uint16_t len)
{
 8005a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a68:	b087      	sub	sp, #28
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	461a      	mov	r2, r3
 8005a72:	460b      	mov	r3, r1
 8005a74:	72fb      	strb	r3, [r7, #11]
 8005a76:	4613      	mov	r3, r2
 8005a78:	813b      	strh	r3, [r7, #8]
	if (handle->comm_mode == BMP280_COMM_MODE_I2C)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	799b      	ldrb	r3, [r3, #6]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <bmp280_send+0x2c>
	{
		handle->i2c_send(reg_addr, buf_send, len);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	893a      	ldrh	r2, [r7, #8]
 8005a88:	7af8      	ldrb	r0, [r7, #11]
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	4798      	blx	r3
 8005a8e:	e04b      	b.n	8005b28 <bmp280_send+0xc4>
	}
	else
	{
 8005a90:	466b      	mov	r3, sp
 8005a92:	461e      	mov	r6, r3
		if (handle->set_cs != NULL)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <bmp280_send+0x40>
		{
			handle->set_cs(BMP280_CS_ACTIVE);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	4798      	blx	r3
		}

		uint8_t buf[len + 1];
 8005aa4:	893b      	ldrh	r3, [r7, #8]
 8005aa6:	1c59      	adds	r1, r3, #1
 8005aa8:	1e4b      	subs	r3, r1, #1
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	460a      	mov	r2, r1
 8005aae:	2300      	movs	r3, #0
 8005ab0:	4690      	mov	r8, r2
 8005ab2:	4699      	mov	r9, r3
 8005ab4:	f04f 0200 	mov.w	r2, #0
 8005ab8:	f04f 0300 	mov.w	r3, #0
 8005abc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ac0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ac4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ac8:	460a      	mov	r2, r1
 8005aca:	2300      	movs	r3, #0
 8005acc:	4614      	mov	r4, r2
 8005ace:	461d      	mov	r5, r3
 8005ad0:	f04f 0200 	mov.w	r2, #0
 8005ad4:	f04f 0300 	mov.w	r3, #0
 8005ad8:	00eb      	lsls	r3, r5, #3
 8005ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ade:	00e2      	lsls	r2, r4, #3
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	3307      	adds	r3, #7
 8005ae4:	08db      	lsrs	r3, r3, #3
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	ebad 0d03 	sub.w	sp, sp, r3
 8005aec:	466b      	mov	r3, sp
 8005aee:	3300      	adds	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
		buf[0] = reg_addr;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	7afa      	ldrb	r2, [r7, #11]
 8005af6:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[1], buf_send, len);
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	3301      	adds	r3, #1
 8005afc:	893a      	ldrh	r2, [r7, #8]
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f002 fc3e 	bl	8008382 <memcpy>

		handle->spi_send(buf, len + 1);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	893a      	ldrh	r2, [r7, #8]
 8005b0c:	3201      	adds	r2, #1
 8005b0e:	b292      	uxth	r2, r2
 8005b10:	4611      	mov	r1, r2
 8005b12:	6938      	ldr	r0, [r7, #16]
 8005b14:	4798      	blx	r3

		if (handle->set_cs != NULL)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <bmp280_send+0xc2>
		{
			handle->set_cs(BMP280_CS_UNACTIVE);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	2001      	movs	r0, #1
 8005b24:	4798      	blx	r3
 8005b26:	46b5      	mov	sp, r6
		}
	}

	return ERR_CODE_SUCCESS;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005b34 <bmp280_recv>:

static err_code_t bmp280_recv(bmp280_handle_t handle, uint8_t reg_addr, uint8_t *buf_recv, uint16_t len)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	607a      	str	r2, [r7, #4]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	460b      	mov	r3, r1
 8005b42:	72fb      	strb	r3, [r7, #11]
 8005b44:	4613      	mov	r3, r2
 8005b46:	813b      	strh	r3, [r7, #8]
	if (handle->comm_mode == BMP280_COMM_MODE_I2C)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	799b      	ldrb	r3, [r3, #6]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d106      	bne.n	8005b5e <bmp280_recv+0x2a>
	{
		handle->i2c_recv(reg_addr, buf_recv, len);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	893a      	ldrh	r2, [r7, #8]
 8005b56:	7af8      	ldrb	r0, [r7, #11]
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	4798      	blx	r3
 8005b5c:	e021      	b.n	8005ba2 <bmp280_recv+0x6e>
	}
	else
	{
		if (handle->set_cs != NULL)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <bmp280_recv+0x3a>
		{
			handle->set_cs(BMP280_CS_ACTIVE);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	4798      	blx	r3
		}

		uint8_t buf = reg_addr | 0x80;
 8005b6e:	7afb      	ldrb	r3, [r7, #11]
 8005b70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	75fb      	strb	r3, [r7, #23]

		handle->spi_send(&buf, 1);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f107 0217 	add.w	r2, r7, #23
 8005b80:	2101      	movs	r1, #1
 8005b82:	4610      	mov	r0, r2
 8005b84:	4798      	blx	r3
		handle->spi_recv(buf_recv, len);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	893a      	ldrh	r2, [r7, #8]
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	4798      	blx	r3

		if (handle->set_cs != NULL)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <bmp280_recv+0x6e>
		{
			handle->set_cs(BMP280_CS_UNACTIVE);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	2001      	movs	r0, #1
 8005ba0:	4798      	blx	r3
		}
	}

	return ERR_CODE_SUCCESS;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <bmp280_compensate_temperature>:

static err_code_t bmp280_compensate_temperature(bmp280_handle_t handle, int32_t adc_temp, float *temp, int32_t *fine_temp) {
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) handle->dig_T1 << 1))) * (int32_t) handle->dig_T2) >> 11;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	10da      	asrs	r2, r3, #3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8c1b      	ldrh	r3, [r3, #32]
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	@ 0x22
 8005bcc:	fb02 f303 	mul.w	r3, r2, r3
 8005bd0:	12db      	asrs	r3, r3, #11
 8005bd2:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) handle->dig_T1) * ((adc_temp >> 4) - (int32_t) handle->dig_T1)) >> 12) * (int32_t) handle->dig_T3) >> 14;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	111b      	asrs	r3, r3, #4
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	8c12      	ldrh	r2, [r2, #32]
 8005bdc:	1a9b      	subs	r3, r3, r2
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	1112      	asrs	r2, r2, #4
 8005be2:	68f9      	ldr	r1, [r7, #12]
 8005be4:	8c09      	ldrh	r1, [r1, #32]
 8005be6:	1a52      	subs	r2, r2, r1
 8005be8:	fb02 f303 	mul.w	r3, r2, r3
 8005bec:	131b      	asrs	r3, r3, #12
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	@ 0x24
 8005bf4:	fb02 f303 	mul.w	r3, r2, r3
 8005bf8:	139b      	asrs	r3, r3, #14
 8005bfa:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	441a      	add	r2, r3
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	601a      	str	r2, [r3, #0]
	*temp = ((*fine_temp * 5 + 128) >> 8) / 100;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	3380      	adds	r3, #128	@ 0x80
 8005c12:	121b      	asrs	r3, r3, #8
 8005c14:	4a09      	ldr	r2, [pc, #36]	@ (8005c3c <bmp280_compensate_temperature+0x90>)
 8005c16:	fb82 1203 	smull	r1, r2, r2, r3
 8005c1a:	1152      	asrs	r2, r2, #5
 8005c1c:	17db      	asrs	r3, r3, #31
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	ee07 3a90 	vmov	s15, r3
 8005c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	edc3 7a00 	vstr	s15, [r3]

	return ERR_CODE_SUCCESS;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	51eb851f 	.word	0x51eb851f

08005c40 <bmp280_compensate_pressure>:

static err_code_t bmp280_compensate_pressure(bmp280_handle_t handle, int32_t adc_press, int32_t fine_temp, float *pressure)
{
 8005c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c44:	b0ce      	sub	sp, #312	@ 0x138
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 8005c4c:	f8c7 1118 	str.w	r1, [r7, #280]	@ 0x118
 8005c50:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8005c54:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8005c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5c:	17da      	asrs	r2, r3, #31
 8005c5e:	461c      	mov	r4, r3
 8005c60:	4615      	mov	r5, r2
 8005c62:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8005c66:	f145 3bff 	adc.w	fp, r5, #4294967295
 8005c6a:	e9c7 ab4c 	strd	sl, fp, [r7, #304]	@ 0x130
	var2 = var1 * var1 * (int64_t) handle->dig_P6;
 8005c6e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8005c72:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005c76:	fb03 f102 	mul.w	r1, r3, r2
 8005c7a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8005c7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005c82:	fb02 f303 	mul.w	r3, r2, r3
 8005c86:	18ca      	adds	r2, r1, r3
 8005c88:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005c8c:	fba3 8903 	umull	r8, r9, r3, r3
 8005c90:	eb02 0309 	add.w	r3, r2, r9
 8005c94:	4699      	mov	r9, r3
 8005c96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c9a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8005c9e:	b21b      	sxth	r3, r3
 8005ca0:	17da      	asrs	r2, r3, #31
 8005ca2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ca6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005caa:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	fb03 f209 	mul.w	r2, r3, r9
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	fb08 f303 	mul.w	r3, r8, r3
 8005cba:	4413      	add	r3, r2
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	fba8 1202 	umull	r1, r2, r8, r2
 8005cc2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8005cc6:	460a      	mov	r2, r1
 8005cc8:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8005ccc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005cd6:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8005cda:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
 8005cde:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var2 = var2 + ((var1 * (int64_t) handle->dig_P5) << 17);
 8005ce2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ce6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8005cea:	b21b      	sxth	r3, r3
 8005cec:	17da      	asrs	r2, r3, #31
 8005cee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cf2:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005cf6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005cfa:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8005cfe:	462a      	mov	r2, r5
 8005d00:	fb02 f203 	mul.w	r2, r2, r3
 8005d04:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005d08:	4621      	mov	r1, r4
 8005d0a:	fb01 f303 	mul.w	r3, r1, r3
 8005d0e:	441a      	add	r2, r3
 8005d10:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005d14:	4621      	mov	r1, r4
 8005d16:	fba3 1301 	umull	r1, r3, r3, r1
 8005d1a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005d1e:	460b      	mov	r3, r1
 8005d20:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d28:	18d3      	adds	r3, r2, r3
 8005d2a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005d2e:	f04f 0000 	mov.w	r0, #0
 8005d32:	f04f 0100 	mov.w	r1, #0
 8005d36:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8005d3a:	462b      	mov	r3, r5
 8005d3c:	0459      	lsls	r1, r3, #17
 8005d3e:	4623      	mov	r3, r4
 8005d40:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8005d44:	4623      	mov	r3, r4
 8005d46:	0458      	lsls	r0, r3, #17
 8005d48:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8005d4c:	1814      	adds	r4, r2, r0
 8005d4e:	643c      	str	r4, [r7, #64]	@ 0x40
 8005d50:	414b      	adcs	r3, r1
 8005d52:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d54:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8005d58:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var2 = var2 + (((int64_t) handle->dig_P4) << 35);
 8005d5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d60:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8005d64:	b21b      	sxth	r3, r3
 8005d66:	17da      	asrs	r2, r3, #31
 8005d68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d6c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8005d70:	f04f 0000 	mov.w	r0, #0
 8005d74:	f04f 0100 	mov.w	r1, #0
 8005d78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005d7c:	00d9      	lsls	r1, r3, #3
 8005d7e:	2000      	movs	r0, #0
 8005d80:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8005d84:	1814      	adds	r4, r2, r0
 8005d86:	63bc      	str	r4, [r7, #56]	@ 0x38
 8005d88:	414b      	adcs	r3, r1
 8005d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d8c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8005d90:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = ((var1 * var1 * (int64_t) handle->dig_P3) >> 8) + ((var1 * (int64_t) handle->dig_P2) << 12);
 8005d94:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8005d98:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005d9c:	fb03 f102 	mul.w	r1, r3, r2
 8005da0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8005da4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005da8:	fb02 f303 	mul.w	r3, r2, r3
 8005dac:	18ca      	adds	r2, r1, r3
 8005dae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005db2:	fba3 1303 	umull	r1, r3, r3, r3
 8005db6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005dba:	460b      	mov	r3, r1
 8005dbc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc4:	18d3      	adds	r3, r2, r3
 8005dc6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005dca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dce:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8005dd2:	b21b      	sxth	r3, r3
 8005dd4:	17da      	asrs	r2, r3, #31
 8005dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005dda:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005dde:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8005de2:	462b      	mov	r3, r5
 8005de4:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8005de8:	4642      	mov	r2, r8
 8005dea:	fb02 f203 	mul.w	r2, r2, r3
 8005dee:	464b      	mov	r3, r9
 8005df0:	4621      	mov	r1, r4
 8005df2:	fb01 f303 	mul.w	r3, r1, r3
 8005df6:	4413      	add	r3, r2
 8005df8:	4622      	mov	r2, r4
 8005dfa:	4641      	mov	r1, r8
 8005dfc:	fba2 1201 	umull	r1, r2, r2, r1
 8005e00:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8005e04:	460a      	mov	r2, r1
 8005e06:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8005e0a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8005e0e:	4413      	add	r3, r2
 8005e10:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e14:	f04f 0000 	mov.w	r0, #0
 8005e18:	f04f 0100 	mov.w	r1, #0
 8005e1c:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8005e20:	4623      	mov	r3, r4
 8005e22:	0a18      	lsrs	r0, r3, #8
 8005e24:	462b      	mov	r3, r5
 8005e26:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8005e2a:	462b      	mov	r3, r5
 8005e2c:	1219      	asrs	r1, r3, #8
 8005e2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e32:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8005e36:	b21b      	sxth	r3, r3
 8005e38:	17da      	asrs	r2, r3, #31
 8005e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e42:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005e46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e4a:	464a      	mov	r2, r9
 8005e4c:	fb02 f203 	mul.w	r2, r2, r3
 8005e50:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005e54:	4644      	mov	r4, r8
 8005e56:	fb04 f303 	mul.w	r3, r4, r3
 8005e5a:	441a      	add	r2, r3
 8005e5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005e60:	4644      	mov	r4, r8
 8005e62:	fba3 4304 	umull	r4, r3, r3, r4
 8005e66:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e6a:	4623      	mov	r3, r4
 8005e6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e74:	18d3      	adds	r3, r2, r3
 8005e76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e7a:	f04f 0200 	mov.w	r2, #0
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8005e86:	464c      	mov	r4, r9
 8005e88:	0323      	lsls	r3, r4, #12
 8005e8a:	4644      	mov	r4, r8
 8005e8c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8005e90:	4644      	mov	r4, r8
 8005e92:	0322      	lsls	r2, r4, #12
 8005e94:	1884      	adds	r4, r0, r2
 8005e96:	633c      	str	r4, [r7, #48]	@ 0x30
 8005e98:	eb41 0303 	adc.w	r3, r1, r3
 8005e9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e9e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8005ea2:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) handle->dig_P1) >> 33;
 8005ea6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8005eaa:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8005eae:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8005eb2:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8005eb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ec4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ec8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8005ecc:	462b      	mov	r3, r5
 8005ece:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8005ed2:	4642      	mov	r2, r8
 8005ed4:	fb02 f203 	mul.w	r2, r2, r3
 8005ed8:	464b      	mov	r3, r9
 8005eda:	4621      	mov	r1, r4
 8005edc:	fb01 f303 	mul.w	r3, r1, r3
 8005ee0:	4413      	add	r3, r2
 8005ee2:	4622      	mov	r2, r4
 8005ee4:	4641      	mov	r1, r8
 8005ee6:	fba2 1201 	umull	r1, r2, r2, r1
 8005eea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005eee:	460a      	mov	r2, r1
 8005ef0:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8005ef4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005ef8:	4413      	add	r3, r2
 8005efa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005efe:	f04f 0200 	mov.w	r2, #0
 8005f02:	f04f 0300 	mov.w	r3, #0
 8005f06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	104a      	asrs	r2, r1, #1
 8005f0e:	4629      	mov	r1, r5
 8005f10:	17cb      	asrs	r3, r1, #31
 8005f12:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130

	/* Avoid exception caused by division by zero */
	if (var1 == 0)
 8005f16:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	d101      	bne.n	8005f22 <bmp280_compensate_pressure+0x2e2>
	{
		return ERR_CODE_FAIL;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e163      	b.n	80061ea <bmp280_compensate_pressure+0x5aa>
	}

	p = 1048576 - adc_press;
 8005f22:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005f26:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8005f2a:	17da      	asrs	r2, r3, #31
 8005f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f30:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8005f34:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	p = (((p << 31) - var2) * 3125) / var1;
 8005f38:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f3c:	105b      	asrs	r3, r3, #1
 8005f3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f42:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f46:	07db      	lsls	r3, r3, #31
 8005f48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f4c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8005f50:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8005f54:	4621      	mov	r1, r4
 8005f56:	1a89      	subs	r1, r1, r2
 8005f58:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	eb61 0303 	sbc.w	r3, r1, r3
 8005f62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f66:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8005f6a:	4622      	mov	r2, r4
 8005f6c:	462b      	mov	r3, r5
 8005f6e:	1891      	adds	r1, r2, r2
 8005f70:	6239      	str	r1, [r7, #32]
 8005f72:	415b      	adcs	r3, r3
 8005f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f7a:	4621      	mov	r1, r4
 8005f7c:	1851      	adds	r1, r2, r1
 8005f7e:	61b9      	str	r1, [r7, #24]
 8005f80:	4629      	mov	r1, r5
 8005f82:	414b      	adcs	r3, r1
 8005f84:	61fb      	str	r3, [r7, #28]
 8005f86:	f04f 0200 	mov.w	r2, #0
 8005f8a:	f04f 0300 	mov.w	r3, #0
 8005f8e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8005f92:	4649      	mov	r1, r9
 8005f94:	018b      	lsls	r3, r1, #6
 8005f96:	4641      	mov	r1, r8
 8005f98:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f9c:	4641      	mov	r1, r8
 8005f9e:	018a      	lsls	r2, r1, #6
 8005fa0:	4641      	mov	r1, r8
 8005fa2:	1889      	adds	r1, r1, r2
 8005fa4:	6139      	str	r1, [r7, #16]
 8005fa6:	4649      	mov	r1, r9
 8005fa8:	eb43 0101 	adc.w	r1, r3, r1
 8005fac:	6179      	str	r1, [r7, #20]
 8005fae:	f04f 0200 	mov.w	r2, #0
 8005fb2:	f04f 0300 	mov.w	r3, #0
 8005fb6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8005fba:	4649      	mov	r1, r9
 8005fbc:	008b      	lsls	r3, r1, #2
 8005fbe:	4641      	mov	r1, r8
 8005fc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fc4:	4641      	mov	r1, r8
 8005fc6:	008a      	lsls	r2, r1, #2
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4603      	mov	r3, r0
 8005fce:	4622      	mov	r2, r4
 8005fd0:	189b      	adds	r3, r3, r2
 8005fd2:	60bb      	str	r3, [r7, #8]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	462a      	mov	r2, r5
 8005fd8:	eb42 0303 	adc.w	r3, r2, r3
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	f04f 0200 	mov.w	r2, #0
 8005fe2:	f04f 0300 	mov.w	r3, #0
 8005fe6:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8005fea:	4649      	mov	r1, r9
 8005fec:	008b      	lsls	r3, r1, #2
 8005fee:	4641      	mov	r1, r8
 8005ff0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ff4:	4641      	mov	r1, r8
 8005ff6:	008a      	lsls	r2, r1, #2
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	4622      	mov	r2, r4
 8006000:	189b      	adds	r3, r3, r2
 8006002:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006004:	462b      	mov	r3, r5
 8006006:	460a      	mov	r2, r1
 8006008:	eb42 0303 	adc.w	r3, r2, r3
 800600c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800600e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8006012:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8006016:	f7fa ff25 	bl	8000e64 <__aeabi_ldivmod>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var1 = ((int64_t) handle->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8006022:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006026:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 800602a:	b21b      	sxth	r3, r3
 800602c:	17da      	asrs	r2, r3, #31
 800602e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006030:	677a      	str	r2, [r7, #116]	@ 0x74
 8006032:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8006036:	f04f 0000 	mov.w	r0, #0
 800603a:	f04f 0100 	mov.w	r1, #0
 800603e:	0b50      	lsrs	r0, r2, #13
 8006040:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8006044:	1359      	asrs	r1, r3, #13
 8006046:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800604a:	462b      	mov	r3, r5
 800604c:	fb00 f203 	mul.w	r2, r0, r3
 8006050:	4623      	mov	r3, r4
 8006052:	fb03 f301 	mul.w	r3, r3, r1
 8006056:	4413      	add	r3, r2
 8006058:	4622      	mov	r2, r4
 800605a:	fba2 1200 	umull	r1, r2, r2, r0
 800605e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8006062:	460a      	mov	r2, r1
 8006064:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8006068:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800606c:	4413      	add	r3, r2
 800606e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006072:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8006076:	f04f 0000 	mov.w	r0, #0
 800607a:	f04f 0100 	mov.w	r1, #0
 800607e:	0b50      	lsrs	r0, r2, #13
 8006080:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8006084:	1359      	asrs	r1, r3, #13
 8006086:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800608a:	462b      	mov	r3, r5
 800608c:	fb00 f203 	mul.w	r2, r0, r3
 8006090:	4623      	mov	r3, r4
 8006092:	fb03 f301 	mul.w	r3, r3, r1
 8006096:	4413      	add	r3, r2
 8006098:	4622      	mov	r2, r4
 800609a:	fba2 1200 	umull	r1, r2, r2, r0
 800609e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80060a2:	460a      	mov	r2, r1
 80060a4:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80060a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80060ac:	4413      	add	r3, r2
 80060ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060b2:	f04f 0200 	mov.w	r2, #0
 80060b6:	f04f 0300 	mov.w	r3, #0
 80060ba:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80060be:	4621      	mov	r1, r4
 80060c0:	0e4a      	lsrs	r2, r1, #25
 80060c2:	4629      	mov	r1, r5
 80060c4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80060c8:	4629      	mov	r1, r5
 80060ca:	164b      	asrs	r3, r1, #25
 80060cc:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	var2 = ((int64_t) handle->dig_P8 * p) >> 19;
 80060d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060d4:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 80060d8:	b21b      	sxth	r3, r3
 80060da:	17da      	asrs	r2, r3, #31
 80060dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80060e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80060e4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80060e8:	462a      	mov	r2, r5
 80060ea:	fb02 f203 	mul.w	r2, r2, r3
 80060ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80060f2:	4621      	mov	r1, r4
 80060f4:	fb01 f303 	mul.w	r3, r1, r3
 80060f8:	441a      	add	r2, r3
 80060fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80060fe:	4621      	mov	r1, r4
 8006100:	fba3 1301 	umull	r1, r3, r3, r1
 8006104:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006108:	460b      	mov	r3, r1
 800610a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800610e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006112:	18d3      	adds	r3, r2, r3
 8006114:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8006124:	4621      	mov	r1, r4
 8006126:	0cca      	lsrs	r2, r1, #19
 8006128:	4629      	mov	r1, r5
 800612a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800612e:	4629      	mov	r1, r5
 8006130:	14cb      	asrs	r3, r1, #19
 8006132:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	*pressure = (((p + var1 + var2) >> 8) + ((int64_t) handle->dig_P7 << 4)) / 256;
 8006136:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800613a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800613e:	1884      	adds	r4, r0, r2
 8006140:	663c      	str	r4, [r7, #96]	@ 0x60
 8006142:	eb41 0303 	adc.w	r3, r1, r3
 8006146:	667b      	str	r3, [r7, #100]	@ 0x64
 8006148:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800614c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006150:	4621      	mov	r1, r4
 8006152:	1889      	adds	r1, r1, r2
 8006154:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006156:	4629      	mov	r1, r5
 8006158:	eb43 0101 	adc.w	r1, r3, r1
 800615c:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800615e:	f04f 0000 	mov.w	r0, #0
 8006162:	f04f 0100 	mov.w	r1, #0
 8006166:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800616a:	4623      	mov	r3, r4
 800616c:	0a18      	lsrs	r0, r3, #8
 800616e:	462b      	mov	r3, r5
 8006170:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8006174:	462b      	mov	r3, r5
 8006176:	1219      	asrs	r1, r3, #8
 8006178:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800617c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8006180:	b21b      	sxth	r3, r3
 8006182:	17da      	asrs	r2, r3, #31
 8006184:	653b      	str	r3, [r7, #80]	@ 0x50
 8006186:	657a      	str	r2, [r7, #84]	@ 0x54
 8006188:	f04f 0200 	mov.w	r2, #0
 800618c:	f04f 0300 	mov.w	r3, #0
 8006190:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006194:	464c      	mov	r4, r9
 8006196:	0123      	lsls	r3, r4, #4
 8006198:	4644      	mov	r4, r8
 800619a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800619e:	4644      	mov	r4, r8
 80061a0:	0122      	lsls	r2, r4, #4
 80061a2:	1884      	adds	r4, r0, r2
 80061a4:	64bc      	str	r4, [r7, #72]	@ 0x48
 80061a6:	eb41 0303 	adc.w	r3, r1, r3
 80061aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	da07      	bge.n	80061c4 <bmp280_compensate_pressure+0x584>
 80061b4:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 80061b8:	6039      	str	r1, [r7, #0]
 80061ba:	f143 0300 	adc.w	r3, r3, #0
 80061be:	607b      	str	r3, [r7, #4]
 80061c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061c4:	f04f 0000 	mov.w	r0, #0
 80061c8:	f04f 0100 	mov.w	r1, #0
 80061cc:	0a10      	lsrs	r0, r2, #8
 80061ce:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80061d2:	1219      	asrs	r1, r3, #8
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4610      	mov	r0, r2
 80061da:	4619      	mov	r1, r3
 80061dc:	f7fa fe04 	bl	8000de8 <__aeabi_l2f>
 80061e0:	4602      	mov	r2, r0
 80061e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80061e6:	601a      	str	r2, [r3, #0]

	return ERR_CODE_SUCCESS;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80061f0:	46bd      	mov	sp, r7
 80061f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080061f6 <bmp280_init>:

bmp280_handle_t bmp280_init(void)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b082      	sub	sp, #8
 80061fa:	af00      	add	r7, sp, #0
	bmp280_handle_t handle = calloc(1, sizeof(bmp280_t));
 80061fc:	2138      	movs	r1, #56	@ 0x38
 80061fe:	2001      	movs	r0, #1
 8006200:	f001 f9e8 	bl	80075d4 <calloc>
 8006204:	4603      	mov	r3, r0
 8006206:	607b      	str	r3, [r7, #4]
	if (handle == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <bmp280_init+0x1c>
	{
		return NULL;
 800620e:	2300      	movs	r3, #0
 8006210:	e000      	b.n	8006214 <bmp280_init+0x1e>
	}

	return handle;
 8006212:	687b      	ldr	r3, [r7, #4]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <bmp280_set_config>:

err_code_t bmp280_set_config(bmp280_handle_t handle, bmp280_cfg_t config)
{
 800621c:	b084      	sub	sp, #16
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	f107 0014 	add.w	r0, r7, #20
 800622a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	/* Check if handle structure is NULL */
	if (handle == NULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d102      	bne.n	800623a <bmp280_set_config+0x1e>
	{
		return ERR_CODE_NULL_PTR;
 8006234:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8006238:	e027      	b.n	800628a <bmp280_set_config+0x6e>
	}

	handle->opr_mode 					= config.opr_mode;
 800623a:	7d3a      	ldrb	r2, [r7, #20]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	701a      	strb	r2, [r3, #0]
	handle->filter 						= config.filter;
 8006240:	7d7a      	ldrb	r2, [r7, #21]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	705a      	strb	r2, [r3, #1]
	handle->over_sampling_pressure 		= config.over_sampling_pressure;
 8006246:	7dba      	ldrb	r2, [r7, #22]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	709a      	strb	r2, [r3, #2]
	handle->over_sampling_temperature 	= config.over_sampling_temperature;
 800624c:	7dfa      	ldrb	r2, [r7, #23]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	70da      	strb	r2, [r3, #3]
	handle->over_sampling_humidity 		= config.over_sampling_humidity;
 8006252:	7e3a      	ldrb	r2, [r7, #24]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	711a      	strb	r2, [r3, #4]
	handle->standby_time 				= config.standby_time;
 8006258:	7e7a      	ldrb	r2, [r7, #25]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	715a      	strb	r2, [r3, #5]
	handle->comm_mode 					= config.comm_mode;
 800625e:	7eba      	ldrb	r2, [r7, #26]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	719a      	strb	r2, [r3, #6]
	handle->i2c_send 					= config.i2c_send;
 8006264:	69fa      	ldr	r2, [r7, #28]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	609a      	str	r2, [r3, #8]
	handle->i2c_recv 					= config.i2c_recv;
 800626a:	6a3a      	ldr	r2, [r7, #32]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	60da      	str	r2, [r3, #12]
	handle->spi_send 					= config.spi_send;
 8006270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	611a      	str	r2, [r3, #16]
	handle->spi_recv 					= config.spi_recv;
 8006276:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	615a      	str	r2, [r3, #20]
	handle->set_cs  					= config.set_cs;
 800627c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	619a      	str	r2, [r3, #24]
	handle->delay 						= config.delay;
 8006282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	61da      	str	r2, [r3, #28]

	return ERR_CODE_SUCCESS;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	b004      	add	sp, #16
 8006296:	4770      	bx	lr

08006298 <bmp280_config>:

err_code_t bmp280_config(bmp280_handle_t handle)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b092      	sub	sp, #72	@ 0x48
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
	/* Check if handle structure is NULL */
	if (handle == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d102      	bne.n	80062ac <bmp280_config+0x14>
	{
		return ERR_CODE_NULL_PTR;
 80062a6:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80062aa:	e110      	b.n	80064ce <bmp280_config+0x236>
	}

	uint8_t cmd_data = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t timeout_ms = 500, delay_step_ms = 50;
 80062b2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80062b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80062b8:	2332      	movs	r3, #50	@ 0x32
 80062ba:	643b      	str	r3, [r7, #64]	@ 0x40
	uint16_t dig_T1, dig_P1;
	int16_t dig_T2, dig_T3, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

	uint8_t reg_chipid = 0;
 80062bc:	2300      	movs	r3, #0
 80062be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	bmp280_recv(handle, BMP280_REG_ID, &reg_chipid, 1);
 80062c2:	f107 0226 	add.w	r2, r7, #38	@ 0x26
 80062c6:	2301      	movs	r3, #1
 80062c8:	21d0      	movs	r1, #208	@ 0xd0
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7ff fc32 	bl	8005b34 <bmp280_recv>
	if (reg_chipid != 0x58)
 80062d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80062d4:	2b58      	cmp	r3, #88	@ 0x58
 80062d6:	d001      	beq.n	80062dc <bmp280_config+0x44>
	{
		return ERR_CODE_FAIL;
 80062d8:	2301      	movs	r3, #1
 80062da:	e0f8      	b.n	80064ce <bmp280_config+0x236>
	}

	/* Soft reset */
	cmd_data = BMP280_RESET_VALUE;
 80062dc:	23b6      	movs	r3, #182	@ 0xb6
 80062de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	bmp280_send(handle, BMP280_REG_RESET, &cmd_data, 1);
 80062e2:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 80062e6:	2301      	movs	r3, #1
 80062e8:	21e0      	movs	r1, #224	@ 0xe0
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7ff fbba 	bl	8005a64 <bmp280_send>

	/* Wait until finished copying over the NVP data */
	while (1)
	{
		uint8_t status;
		bmp280_recv(handle, BMP280_REG_STATUS, &status, 1);
 80062f0:	f107 020b 	add.w	r2, r7, #11
 80062f4:	2301      	movs	r3, #1
 80062f6:	21f3      	movs	r1, #243	@ 0xf3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff fc1b 	bl	8005b34 <bmp280_recv>

		if ((status & 0x01) == 0)
 80062fe:	7afb      	ldrb	r3, [r7, #11]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	f040 8091 	bne.w	800642c <bmp280_config+0x194>

		handle->delay(delay_step_ms);
	}

	/* Read temperature compenstation */
	uint8_t reg_comp[NUM_REG_COMPENSATION] = {0};
 800630a:	f107 030c 	add.w	r3, r7, #12
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	605a      	str	r2, [r3, #4]
 8006314:	609a      	str	r2, [r3, #8]
 8006316:	60da      	str	r2, [r3, #12]
 8006318:	611a      	str	r2, [r3, #16]
 800631a:	615a      	str	r2, [r3, #20]
	bmp280_recv(handle, BMP280_REG_NVM_PAR_T1_L, reg_comp, NUM_REG_COMPENSATION);
 800631c:	f107 020c 	add.w	r2, r7, #12
 8006320:	2318      	movs	r3, #24
 8006322:	2188      	movs	r1, #136	@ 0x88
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff fc05 	bl	8005b34 <bmp280_recv>
	dig_T1 = (uint16_t)((reg_comp[1]  << 8) | reg_comp[0]);
 800632a:	7b7b      	ldrb	r3, [r7, #13]
 800632c:	b21b      	sxth	r3, r3
 800632e:	021b      	lsls	r3, r3, #8
 8006330:	b21a      	sxth	r2, r3
 8006332:	7b3b      	ldrb	r3, [r7, #12]
 8006334:	b21b      	sxth	r3, r3
 8006336:	4313      	orrs	r3, r2
 8006338:	b21b      	sxth	r3, r3
 800633a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	dig_T2 =  (int16_t)((reg_comp[3]  << 8) | reg_comp[2]);
 800633c:	7bfb      	ldrb	r3, [r7, #15]
 800633e:	b21b      	sxth	r3, r3
 8006340:	021b      	lsls	r3, r3, #8
 8006342:	b21a      	sxth	r2, r3
 8006344:	7bbb      	ldrb	r3, [r7, #14]
 8006346:	b21b      	sxth	r3, r3
 8006348:	4313      	orrs	r3, r2
 800634a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	dig_T3 =  (int16_t)((reg_comp[5]  << 8) | reg_comp[4]);
 800634c:	7c7b      	ldrb	r3, [r7, #17]
 800634e:	b21b      	sxth	r3, r3
 8006350:	021b      	lsls	r3, r3, #8
 8006352:	b21a      	sxth	r2, r3
 8006354:	7c3b      	ldrb	r3, [r7, #16]
 8006356:	b21b      	sxth	r3, r3
 8006358:	4313      	orrs	r3, r2
 800635a:	877b      	strh	r3, [r7, #58]	@ 0x3a
	dig_P1 = (uint16_t)((reg_comp[7]  << 8) | reg_comp[6]);
 800635c:	7cfb      	ldrb	r3, [r7, #19]
 800635e:	b21b      	sxth	r3, r3
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	b21a      	sxth	r2, r3
 8006364:	7cbb      	ldrb	r3, [r7, #18]
 8006366:	b21b      	sxth	r3, r3
 8006368:	4313      	orrs	r3, r2
 800636a:	b21b      	sxth	r3, r3
 800636c:	873b      	strh	r3, [r7, #56]	@ 0x38
	dig_P2 =  (int16_t)((reg_comp[9]  << 8) | reg_comp[8]);
 800636e:	7d7b      	ldrb	r3, [r7, #21]
 8006370:	b21b      	sxth	r3, r3
 8006372:	021b      	lsls	r3, r3, #8
 8006374:	b21a      	sxth	r2, r3
 8006376:	7d3b      	ldrb	r3, [r7, #20]
 8006378:	b21b      	sxth	r3, r3
 800637a:	4313      	orrs	r3, r2
 800637c:	86fb      	strh	r3, [r7, #54]	@ 0x36
	dig_P3 =  (int16_t)((reg_comp[11] << 8) | reg_comp[10]);
 800637e:	7dfb      	ldrb	r3, [r7, #23]
 8006380:	b21b      	sxth	r3, r3
 8006382:	021b      	lsls	r3, r3, #8
 8006384:	b21a      	sxth	r2, r3
 8006386:	7dbb      	ldrb	r3, [r7, #22]
 8006388:	b21b      	sxth	r3, r3
 800638a:	4313      	orrs	r3, r2
 800638c:	86bb      	strh	r3, [r7, #52]	@ 0x34
	dig_P4 =  (int16_t)((reg_comp[13] << 8) | reg_comp[12]);
 800638e:	7e7b      	ldrb	r3, [r7, #25]
 8006390:	b21b      	sxth	r3, r3
 8006392:	021b      	lsls	r3, r3, #8
 8006394:	b21a      	sxth	r2, r3
 8006396:	7e3b      	ldrb	r3, [r7, #24]
 8006398:	b21b      	sxth	r3, r3
 800639a:	4313      	orrs	r3, r2
 800639c:	867b      	strh	r3, [r7, #50]	@ 0x32
	dig_P5 =  (int16_t)((reg_comp[15] << 8) | reg_comp[14]);
 800639e:	7efb      	ldrb	r3, [r7, #27]
 80063a0:	b21b      	sxth	r3, r3
 80063a2:	021b      	lsls	r3, r3, #8
 80063a4:	b21a      	sxth	r2, r3
 80063a6:	7ebb      	ldrb	r3, [r7, #26]
 80063a8:	b21b      	sxth	r3, r3
 80063aa:	4313      	orrs	r3, r2
 80063ac:	863b      	strh	r3, [r7, #48]	@ 0x30
	dig_P6 =  (int16_t)((reg_comp[17] << 8) | reg_comp[16]);
 80063ae:	7f7b      	ldrb	r3, [r7, #29]
 80063b0:	b21b      	sxth	r3, r3
 80063b2:	021b      	lsls	r3, r3, #8
 80063b4:	b21a      	sxth	r2, r3
 80063b6:	7f3b      	ldrb	r3, [r7, #28]
 80063b8:	b21b      	sxth	r3, r3
 80063ba:	4313      	orrs	r3, r2
 80063bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	dig_P7 =  (int16_t)((reg_comp[19] << 8) | reg_comp[18]);
 80063be:	7ffb      	ldrb	r3, [r7, #31]
 80063c0:	b21b      	sxth	r3, r3
 80063c2:	021b      	lsls	r3, r3, #8
 80063c4:	b21a      	sxth	r2, r3
 80063c6:	7fbb      	ldrb	r3, [r7, #30]
 80063c8:	b21b      	sxth	r3, r3
 80063ca:	4313      	orrs	r3, r2
 80063cc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	dig_P8 =  (int16_t)((reg_comp[21] << 8) | reg_comp[20]);
 80063ce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80063d2:	b21b      	sxth	r3, r3
 80063d4:	021b      	lsls	r3, r3, #8
 80063d6:	b21a      	sxth	r2, r3
 80063d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063dc:	b21b      	sxth	r3, r3
 80063de:	4313      	orrs	r3, r2
 80063e0:	857b      	strh	r3, [r7, #42]	@ 0x2a
	dig_P9 =  (int16_t)((reg_comp[23] << 8) | reg_comp[22]);
 80063e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80063e6:	b21b      	sxth	r3, r3
 80063e8:	021b      	lsls	r3, r3, #8
 80063ea:	b21a      	sxth	r2, r3
 80063ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80063f0:	b21b      	sxth	r3, r3
 80063f2:	4313      	orrs	r3, r2
 80063f4:	853b      	strh	r3, [r7, #40]	@ 0x28

	/* Configure standby time and filter */
	cmd_data = (handle->standby_time << 5) | (handle->filter << 2);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	795b      	ldrb	r3, [r3, #5]
 80063fa:	b25b      	sxtb	r3, r3
 80063fc:	015b      	lsls	r3, r3, #5
 80063fe:	b25a      	sxtb	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	785b      	ldrb	r3, [r3, #1]
 8006404:	b25b      	sxtb	r3, r3
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	b25b      	sxtb	r3, r3
 800640a:	4313      	orrs	r3, r2
 800640c:	b25b      	sxtb	r3, r3
 800640e:	b2db      	uxtb	r3, r3
 8006410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	bmp280_send(handle, BMP280_REG_CONFIG, &cmd_data, 1);
 8006414:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 8006418:	2301      	movs	r3, #1
 800641a:	21f5      	movs	r1, #245	@ 0xf5
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff fb21 	bl	8005a64 <bmp280_send>

	if (handle->opr_mode == BMP280_OPR_MODE_FORCED)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d00e      	beq.n	8006448 <bmp280_config+0x1b0>
 800642a:	e010      	b.n	800644e <bmp280_config+0x1b6>
		timeout_ms -= delay_step_ms;
 800642c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800642e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	647b      	str	r3, [r7, #68]	@ 0x44
		if (timeout_ms == 0)
 8006434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <bmp280_config+0x1a6>
			return ERR_CODE_FAIL;
 800643a:	2301      	movs	r3, #1
 800643c:	e047      	b.n	80064ce <bmp280_config+0x236>
		handle->delay(delay_step_ms);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8006444:	4798      	blx	r3
	{
 8006446:	e753      	b.n	80062f0 <bmp280_config+0x58>
	{
		/* Initial mode for forced is sleep */
		handle->opr_mode = BMP280_OPR_MODE_SLEEP;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	701a      	strb	r2, [r3, #0]
	}

	cmd_data = (handle->over_sampling_temperature << 5) | (handle->over_sampling_pressure << 2) | (handle->opr_mode);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	78db      	ldrb	r3, [r3, #3]
 8006452:	b25b      	sxtb	r3, r3
 8006454:	015b      	lsls	r3, r3, #5
 8006456:	b25a      	sxtb	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	789b      	ldrb	r3, [r3, #2]
 800645c:	b25b      	sxtb	r3, r3
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	b25b      	sxtb	r3, r3
 8006462:	4313      	orrs	r3, r2
 8006464:	b25a      	sxtb	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	b25b      	sxtb	r3, r3
 800646c:	4313      	orrs	r3, r2
 800646e:	b25b      	sxtb	r3, r3
 8006470:	b2db      	uxtb	r3, r3
 8006472:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	bmp280_send(handle, BMP280_REG_CTRL_MEAS, &cmd_data, 1);
 8006476:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 800647a:	2301      	movs	r3, #1
 800647c:	21f4      	movs	r1, #244	@ 0xf4
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7ff faf0 	bl	8005a64 <bmp280_send>

	/* Update handle structure */
	handle->dig_T1 = dig_T1;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8006488:	841a      	strh	r2, [r3, #32]
	handle->dig_T2 = dig_T2;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800648e:	845a      	strh	r2, [r3, #34]	@ 0x22
	handle->dig_T3 = dig_T3;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006494:	849a      	strh	r2, [r3, #36]	@ 0x24
	handle->dig_P1 = dig_P1;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800649a:	84da      	strh	r2, [r3, #38]	@ 0x26
	handle->dig_P2 = dig_P2;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80064a0:	851a      	strh	r2, [r3, #40]	@ 0x28
	handle->dig_P3 = dig_P3;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80064a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
	handle->dig_P4 = dig_P4;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80064ac:	859a      	strh	r2, [r3, #44]	@ 0x2c
	handle->dig_P5 = dig_P5;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80064b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
	handle->dig_P6 = dig_P6;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80064b8:	861a      	strh	r2, [r3, #48]	@ 0x30
	handle->dig_P7 = dig_P7;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80064be:	865a      	strh	r2, [r3, #50]	@ 0x32
	handle->dig_P8 = dig_P8;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80064c4:	869a      	strh	r2, [r3, #52]	@ 0x34
	handle->dig_P9 = dig_P9;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80064ca:	86da      	strh	r2, [r3, #54]	@ 0x36

	return ERR_CODE_SUCCESS;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3748      	adds	r7, #72	@ 0x48
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <bmp280_get_pressure>:

err_code_t bmp280_get_pressure(bmp280_handle_t handle, float *pressure)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b088      	sub	sp, #32
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
	/* Check if handle structure is NULL */
	if (handle == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d102      	bne.n	80064ec <bmp280_get_pressure+0x16>
	{
		return ERR_CODE_NULL_PTR;
 80064e6:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80064ea:	e029      	b.n	8006540 <bmp280_get_pressure+0x6a>

	int32_t adc_temp, fine_temp, adc_pressure;
	float temperature;
	uint8_t reg_data[6];

	bmp280_recv(handle, BMP280_REG_PRESS_MSB, reg_data, 6);
 80064ec:	f107 0208 	add.w	r2, r7, #8
 80064f0:	2306      	movs	r3, #6
 80064f2:	21f7      	movs	r1, #247	@ 0xf7
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff fb1d 	bl	8005b34 <bmp280_recv>

	adc_pressure = (reg_data[0] << 12) | (reg_data[1] << 4) | (reg_data[2] >> 4);
 80064fa:	7a3b      	ldrb	r3, [r7, #8]
 80064fc:	031a      	lsls	r2, r3, #12
 80064fe:	7a7b      	ldrb	r3, [r7, #9]
 8006500:	011b      	lsls	r3, r3, #4
 8006502:	4313      	orrs	r3, r2
 8006504:	7aba      	ldrb	r2, [r7, #10]
 8006506:	0912      	lsrs	r2, r2, #4
 8006508:	b2d2      	uxtb	r2, r2
 800650a:	4313      	orrs	r3, r2
 800650c:	61fb      	str	r3, [r7, #28]
	adc_temp 	 = (reg_data[3] << 12) | (reg_data[4] << 4) | (reg_data[5] >> 4);
 800650e:	7afb      	ldrb	r3, [r7, #11]
 8006510:	031a      	lsls	r2, r3, #12
 8006512:	7b3b      	ldrb	r3, [r7, #12]
 8006514:	011b      	lsls	r3, r3, #4
 8006516:	4313      	orrs	r3, r2
 8006518:	7b7a      	ldrb	r2, [r7, #13]
 800651a:	0912      	lsrs	r2, r2, #4
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	4313      	orrs	r3, r2
 8006520:	61bb      	str	r3, [r7, #24]

	bmp280_compensate_temperature(handle, adc_temp, &temperature, &fine_temp);
 8006522:	f107 0314 	add.w	r3, r7, #20
 8006526:	f107 0210 	add.w	r2, r7, #16
 800652a:	69b9      	ldr	r1, [r7, #24]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff fb3d 	bl	8005bac <bmp280_compensate_temperature>
	bmp280_compensate_pressure(handle, adc_pressure, fine_temp, pressure);
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	69f9      	ldr	r1, [r7, #28]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7ff fb81 	bl	8005c40 <bmp280_compensate_pressure>

	return ERR_CODE_SUCCESS;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3720      	adds	r7, #32
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <bmp280_convert_pressure_to_altitude>:

err_code_t bmp280_convert_pressure_to_altitude(bmp280_handle_t handle, float pressure, float *altitude)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	ed87 0a02 	vstr	s0, [r7, #8]
 8006554:	6079      	str	r1, [r7, #4]
	/* Check if handle structure is NULL */
	if (handle == NULL)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d102      	bne.n	8006562 <bmp280_convert_pressure_to_altitude+0x1a>
	{
		return ERR_CODE_NULL_PTR;
 800655c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8006560:	e02d      	b.n	80065be <bmp280_convert_pressure_to_altitude+0x76>
	}

	*altitude = 44330 * (1.0 - pow((pressure) / 1013.25, 0.1903));
 8006562:	68b8      	ldr	r0, [r7, #8]
 8006564:	f7f9 fff0 	bl	8000548 <__aeabi_f2d>
 8006568:	a31c      	add	r3, pc, #112	@ (adr r3, 80065dc <bmp280_convert_pressure_to_altitude+0x94>)
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	f7fa f96d 	bl	800084c <__aeabi_ddiv>
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	ec43 2b17 	vmov	d7, r2, r3
 800657a:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 80065c8 <bmp280_convert_pressure_to_altitude+0x80>
 800657e:	eeb0 0a47 	vmov.f32	s0, s14
 8006582:	eef0 0a67 	vmov.f32	s1, s15
 8006586:	f003 fe77 	bl	800a278 <pow>
 800658a:	ec53 2b10 	vmov	r2, r3, d0
 800658e:	f04f 0000 	mov.w	r0, #0
 8006592:	4911      	ldr	r1, [pc, #68]	@ (80065d8 <bmp280_convert_pressure_to_altitude+0x90>)
 8006594:	f7f9 fe78 	bl	8000288 <__aeabi_dsub>
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	4610      	mov	r0, r2
 800659e:	4619      	mov	r1, r3
 80065a0:	a30b      	add	r3, pc, #44	@ (adr r3, 80065d0 <bmp280_convert_pressure_to_altitude+0x88>)
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	f7fa f827 	bl	80005f8 <__aeabi_dmul>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4610      	mov	r0, r2
 80065b0:	4619      	mov	r1, r3
 80065b2:	f7fa faf9 	bl	8000ba8 <__aeabi_d2f>
 80065b6:	4602      	mov	r2, r0
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	601a      	str	r2, [r3, #0]

	return ERR_CODE_SUCCESS;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	1a36e2eb 	.word	0x1a36e2eb
 80065cc:	3fc85bc0 	.word	0x3fc85bc0
 80065d0:	00000000 	.word	0x00000000
 80065d4:	40e5a540 	.word	0x40e5a540
 80065d8:	3ff00000 	.word	0x3ff00000
 80065dc:	00000000 	.word	0x00000000
 80065e0:	408faa00 	.word	0x408faa00

080065e4 <icm42688_send>:
	float                   		accel_scaling_factor;   	/*!< Accelerometer scaling factor */
	float                   		gyro_scaling_factor;    	/*!< Gyroscope scaling factor */
} icm42688_t;

static err_code_t icm42688_send(icm42688_handle_t handle, uint8_t reg_addr, uint8_t *buf_send, uint16_t len)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	607a      	str	r2, [r7, #4]
 80065ee:	461a      	mov	r2, r3
 80065f0:	460b      	mov	r3, r1
 80065f2:	72fb      	strb	r3, [r7, #11]
 80065f4:	4613      	mov	r3, r2
 80065f6:	813b      	strh	r3, [r7, #8]
	if (handle->comm_mode == ICM42688_COMM_MODE_I2C)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	7c9b      	ldrb	r3, [r3, #18]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d106      	bne.n	800660e <icm42688_send+0x2a>
	{
		handle->i2c_send(reg_addr, buf_send, len);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	7af8      	ldrb	r0, [r7, #11]
 8006606:	893a      	ldrh	r2, [r7, #8]
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	4798      	blx	r3
 800660c:	e01c      	b.n	8006648 <icm42688_send+0x64>
	}
	else
	{
		if (handle->set_cs != NULL)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <icm42688_send+0x3a>
		{
			handle->set_cs(ICM42688_CS_ACTIVE);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661a:	2000      	movs	r0, #0
 800661c:	4798      	blx	r3
		}

		handle->spi_send(&reg_addr, 1);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	f107 020b 	add.w	r2, r7, #11
 8006626:	2101      	movs	r1, #1
 8006628:	4610      	mov	r0, r2
 800662a:	4798      	blx	r3
		handle->spi_send(buf_send, len);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	893a      	ldrh	r2, [r7, #8]
 8006632:	4611      	mov	r1, r2
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	4798      	blx	r3

		if (handle->set_cs != NULL)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <icm42688_send+0x64>
		{
			handle->set_cs(ICM42688_CS_UNACTIVE);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006644:	2001      	movs	r0, #1
 8006646:	4798      	blx	r3
		}
	}

	return ERR_CODE_SUCCESS;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <icm42688_recv>:

static err_code_t icm42688_recv(icm42688_handle_t handle, uint8_t reg_addr, uint8_t *buf_recv, uint16_t len)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b086      	sub	sp, #24
 8006656:	af00      	add	r7, sp, #0
 8006658:	60f8      	str	r0, [r7, #12]
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	461a      	mov	r2, r3
 800665e:	460b      	mov	r3, r1
 8006660:	72fb      	strb	r3, [r7, #11]
 8006662:	4613      	mov	r3, r2
 8006664:	813b      	strh	r3, [r7, #8]
	if (handle->comm_mode == ICM42688_COMM_MODE_I2C)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	7c9b      	ldrb	r3, [r3, #18]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d106      	bne.n	800667c <icm42688_recv+0x2a>
	{
		handle->i2c_send(reg_addr, buf_recv, len);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	893a      	ldrh	r2, [r7, #8]
 8006674:	7af8      	ldrb	r0, [r7, #11]
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	4798      	blx	r3
 800667a:	e021      	b.n	80066c0 <icm42688_recv+0x6e>
	}
	else
	{
		if (handle->set_cs != NULL)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006680:	2b00      	cmp	r3, #0
 8006682:	d003      	beq.n	800668c <icm42688_recv+0x3a>
		{
			handle->set_cs(ICM42688_CS_ACTIVE);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006688:	2000      	movs	r0, #0
 800668a:	4798      	blx	r3
		}

		uint8_t buf = reg_addr | 0x80;
 800668c:	7afb      	ldrb	r3, [r7, #11]
 800668e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006692:	b2db      	uxtb	r3, r3
 8006694:	75fb      	strb	r3, [r7, #23]

		handle->spi_send(&buf, 1);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f107 0217 	add.w	r2, r7, #23
 800669e:	2101      	movs	r1, #1
 80066a0:	4610      	mov	r0, r2
 80066a2:	4798      	blx	r3
		handle->spi_recv(buf_recv, len);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	893a      	ldrh	r2, [r7, #8]
 80066aa:	4611      	mov	r1, r2
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	4798      	blx	r3

		if (handle->set_cs != NULL)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <icm42688_recv+0x6e>
		{
			handle->set_cs(ICM42688_CS_UNACTIVE);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066bc:	2001      	movs	r0, #1
 80066be:	4798      	blx	r3
		}
	}

	return ERR_CODE_SUCCESS;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <icm42688_set_bank>:

static err_code_t icm42688_set_bank(icm42688_handle_t handle, uint8_t bank)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	460b      	mov	r3, r1
 80066d4:	70fb      	strb	r3, [r7, #3]
	if (handle->bank == bank)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80066dc:	78fa      	ldrb	r2, [r7, #3]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d101      	bne.n	80066e6 <icm42688_set_bank+0x1c>
	{
		return ERR_CODE_SUCCESS;
 80066e2:	2300      	movs	r3, #0
 80066e4:	e00d      	b.n	8006702 <icm42688_set_bank+0x38>
	}

	uint8_t buf_send = bank;
 80066e6:	78fb      	ldrb	r3, [r7, #3]
 80066e8:	73fb      	strb	r3, [r7, #15]

	icm42688_send(handle, ICM42688_REG_BANK_SEL, &buf_send, 1);
 80066ea:	f107 020f 	add.w	r2, r7, #15
 80066ee:	2301      	movs	r3, #1
 80066f0:	2176      	movs	r1, #118	@ 0x76
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7ff ff76 	bl	80065e4 <icm42688_send>

	handle->bank = bank;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	78fa      	ldrb	r2, [r7, #3]
 80066fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

	return ERR_CODE_SUCCESS;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <icm42688_init>:

icm42688_handle_t icm42688_init(void)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b082      	sub	sp, #8
 800670e:	af00      	add	r7, sp, #0
	icm42688_handle_t handle = calloc(1, sizeof(icm42688_t));
 8006710:	2138      	movs	r1, #56	@ 0x38
 8006712:	2001      	movs	r0, #1
 8006714:	f000 ff5e 	bl	80075d4 <calloc>
 8006718:	4603      	mov	r3, r0
 800671a:	607b      	str	r3, [r7, #4]
	if (handle == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <icm42688_init+0x1c>
	{
		return NULL;
 8006722:	2300      	movs	r3, #0
 8006724:	e000      	b.n	8006728 <icm42688_init+0x1e>
	}

	return handle;
 8006726:	687b      	ldr	r3, [r7, #4]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <icm42688_set_config>:

err_code_t icm42688_set_config(icm42688_handle_t handle, icm42688_cfg_t config)
{
 8006730:	b084      	sub	sp, #16
 8006732:	b480      	push	{r7}
 8006734:	b085      	sub	sp, #20
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	f107 001c 	add.w	r0, r7, #28
 800673e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	/* Check if handle structure is NULL */
	if (handle == NULL)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d102      	bne.n	800674e <icm42688_set_config+0x1e>
	{
		return ERR_CODE_NULL_PTR;
 8006748:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800674c:	e098      	b.n	8006880 <icm42688_set_config+0x150>

	float gyro_scaling_factor;
	float accel_scaling_factor;

	/* Update gyroscope scaling factor */
	switch (config.gyro_fs_sel)
 800674e:	7f7b      	ldrb	r3, [r7, #29]
 8006750:	2b07      	cmp	r3, #7
 8006752:	d82b      	bhi.n	80067ac <icm42688_set_config+0x7c>
 8006754:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <icm42688_set_config+0x2c>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	080067a7 	.word	0x080067a7
 8006760:	080067a1 	.word	0x080067a1
 8006764:	0800679b 	.word	0x0800679b
 8006768:	08006795 	.word	0x08006795
 800676c:	0800678f 	.word	0x0800678f
 8006770:	08006789 	.word	0x08006789
 8006774:	08006783 	.word	0x08006783
 8006778:	0800677d 	.word	0x0800677d
	{
	case ICM42688_GFS_SEL_15_625dps:
		gyro_scaling_factor = 15.625f / 32768.0f;
 800677c:	4b44      	ldr	r3, [pc, #272]	@ (8006890 <icm42688_set_config+0x160>)
 800677e:	60fb      	str	r3, [r7, #12]
		break;
 8006780:	e015      	b.n	80067ae <icm42688_set_config+0x7e>
	case ICM42688_GFS_SEL_31_25dps:
		gyro_scaling_factor = 31.25f / 32768.0f;
 8006782:	4b44      	ldr	r3, [pc, #272]	@ (8006894 <icm42688_set_config+0x164>)
 8006784:	60fb      	str	r3, [r7, #12]
		break;
 8006786:	e012      	b.n	80067ae <icm42688_set_config+0x7e>
	case ICM42688_GFS_SEL_62_5dps:
		gyro_scaling_factor = 62.5f / 32768.0f;
 8006788:	4b43      	ldr	r3, [pc, #268]	@ (8006898 <icm42688_set_config+0x168>)
 800678a:	60fb      	str	r3, [r7, #12]
		break;
 800678c:	e00f      	b.n	80067ae <icm42688_set_config+0x7e>
	case ICM42688_GFS_SEL_125dps:
		gyro_scaling_factor = 125.0f / 32768.0f;
 800678e:	4b43      	ldr	r3, [pc, #268]	@ (800689c <icm42688_set_config+0x16c>)
 8006790:	60fb      	str	r3, [r7, #12]
		break;
 8006792:	e00c      	b.n	80067ae <icm42688_set_config+0x7e>
	case ICM42688_GFS_SEL_250dps:
		gyro_scaling_factor = 250.0f / 32768.0f;
 8006794:	4b42      	ldr	r3, [pc, #264]	@ (80068a0 <icm42688_set_config+0x170>)
 8006796:	60fb      	str	r3, [r7, #12]
		break;
 8006798:	e009      	b.n	80067ae <icm42688_set_config+0x7e>
	case ICM42688_GFS_SEL_500dps:
		gyro_scaling_factor = 500.0f / 32768.0f;
 800679a:	4b42      	ldr	r3, [pc, #264]	@ (80068a4 <icm42688_set_config+0x174>)
 800679c:	60fb      	str	r3, [r7, #12]
		break;
 800679e:	e006      	b.n	80067ae <icm42688_set_config+0x7e>
	case ICM42688_GFS_SEL_1000dps:
		gyro_scaling_factor = 1000.0f / 32768.0f;
 80067a0:	4b41      	ldr	r3, [pc, #260]	@ (80068a8 <icm42688_set_config+0x178>)
 80067a2:	60fb      	str	r3, [r7, #12]
		break;
 80067a4:	e003      	b.n	80067ae <icm42688_set_config+0x7e>
	case ICM42688_GFS_SEL_2000dps:
		gyro_scaling_factor = 2000.0f / 32768.0f;
 80067a6:	4b41      	ldr	r3, [pc, #260]	@ (80068ac <icm42688_set_config+0x17c>)
 80067a8:	60fb      	str	r3, [r7, #12]
		break;
 80067aa:	e000      	b.n	80067ae <icm42688_set_config+0x7e>
	default:
		break;
 80067ac:	bf00      	nop
	}

	/* Update accelerometer scaling factor */
	switch (config.accel_fs_sel)
 80067ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d81a      	bhi.n	80067ec <icm42688_set_config+0xbc>
 80067b6:	a201      	add	r2, pc, #4	@ (adr r2, 80067bc <icm42688_set_config+0x8c>)
 80067b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067bc:	080067e5 	.word	0x080067e5
 80067c0:	080067dd 	.word	0x080067dd
 80067c4:	080067d5 	.word	0x080067d5
 80067c8:	080067cd 	.word	0x080067cd
	{
	case ICM42688_ACCEL_FS_SEL_2G:
		accel_scaling_factor = (2.0f / 32768.0f);
 80067cc:	f04f 5362 	mov.w	r3, #947912704	@ 0x38800000
 80067d0:	60bb      	str	r3, [r7, #8]
		break;
 80067d2:	e00c      	b.n	80067ee <icm42688_set_config+0xbe>
	case ICM42688_ACCEL_FS_SEL_4G:
		accel_scaling_factor = (4.0f / 32768.0f);
 80067d4:	f04f 5364 	mov.w	r3, #956301312	@ 0x39000000
 80067d8:	60bb      	str	r3, [r7, #8]
		break;
 80067da:	e008      	b.n	80067ee <icm42688_set_config+0xbe>
	case ICM42688_ACCEL_FS_SEL_8G:
		accel_scaling_factor = (8.0f / 32768.0f);
 80067dc:	f04f 5366 	mov.w	r3, #964689920	@ 0x39800000
 80067e0:	60bb      	str	r3, [r7, #8]
		break;
 80067e2:	e004      	b.n	80067ee <icm42688_set_config+0xbe>
	case ICM42688_ACCEL_FS_SEL_16G:
		accel_scaling_factor = (16.0f / 32768.0f);
 80067e4:	f04f 5368 	mov.w	r3, #973078528	@ 0x3a000000
 80067e8:	60bb      	str	r3, [r7, #8]
		break;
 80067ea:	e000      	b.n	80067ee <icm42688_set_config+0xbe>
	default:
		break;
 80067ec:	bf00      	nop
	}

	handle->gyro_mode 					= config.gyro_mode;
 80067ee:	7f3a      	ldrb	r2, [r7, #28]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	701a      	strb	r2, [r3, #0]
	handle->gyro_fs_sel 				= config.gyro_fs_sel;
 80067f4:	7f7a      	ldrb	r2, [r7, #29]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	705a      	strb	r2, [r3, #1]
	handle->gyro_odr 					= config.gyro_odr;
 80067fa:	7fba      	ldrb	r2, [r7, #30]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	709a      	strb	r2, [r3, #2]
	handle->accel_mode 					= config.accel_mode;
 8006800:	7ffa      	ldrb	r2, [r7, #31]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	70da      	strb	r2, [r3, #3]
	handle->accel_fs_sel 				= config.accel_fs_sel;
 8006806:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	715a      	strb	r2, [r3, #5]
	handle->accel_odr 					= config.accel_odr;
 800680e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	711a      	strb	r2, [r3, #4]
	handle->accel_bias_x 				= config.accel_bias_x;
 8006816:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	80da      	strh	r2, [r3, #6]
	handle->accel_bias_y 				= config.accel_bias_y;
 800681e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	811a      	strh	r2, [r3, #8]
	handle->accel_bias_z 				= config.accel_bias_z;
 8006826:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	815a      	strh	r2, [r3, #10]
	handle->gyro_bias_x 				= config.gyro_bias_x;
 800682e:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	819a      	strh	r2, [r3, #12]
	handle->gyro_bias_y 				= config.gyro_bias_y;
 8006836:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	81da      	strh	r2, [r3, #14]
	handle->gyro_bias_z 				= config.gyro_bias_z;
 800683e:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	821a      	strh	r2, [r3, #16]
	handle->comm_mode 					= config.comm_mode;
 8006846:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	749a      	strb	r2, [r3, #18]
	handle->i2c_send 					= config.i2c_send;
 800684e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	615a      	str	r2, [r3, #20]
	handle->i2c_recv 					= config.i2c_recv;
 8006854:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	619a      	str	r2, [r3, #24]
	handle->spi_send 					= config.spi_send;
 800685a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	61da      	str	r2, [r3, #28]
	handle->spi_recv 					= config.spi_recv;
 8006860:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	621a      	str	r2, [r3, #32]
	handle->set_cs 						= config.set_cs;
 8006866:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	625a      	str	r2, [r3, #36]	@ 0x24
	handle->delay 						= config.delay;
 800686c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	629a      	str	r2, [r3, #40]	@ 0x28
	handle->gyro_scaling_factor        	= gyro_scaling_factor;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	635a      	str	r2, [r3, #52]	@ 0x34
	handle->accel_scaling_factor        = accel_scaling_factor;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	631a      	str	r2, [r3, #48]	@ 0x30

	return ERR_CODE_SUCCESS;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	b004      	add	sp, #16
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	39fa0000 	.word	0x39fa0000
 8006894:	3a7a0000 	.word	0x3a7a0000
 8006898:	3afa0000 	.word	0x3afa0000
 800689c:	3b7a0000 	.word	0x3b7a0000
 80068a0:	3bfa0000 	.word	0x3bfa0000
 80068a4:	3c7a0000 	.word	0x3c7a0000
 80068a8:	3cfa0000 	.word	0x3cfa0000
 80068ac:	3d7a0000 	.word	0x3d7a0000

080068b0 <icm42688_config>:

err_code_t icm42688_config(icm42688_handle_t handle)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
	/* Check if handle structure is NULL */
	if (handle == NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d102      	bne.n	80068c4 <icm42688_config+0x14>
	{
		return ERR_CODE_NULL_PTR;
 80068be:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80068c2:	e08d      	b.n	80069e0 <icm42688_config+0x130>
	}

	uint8_t who_am_i;
	uint8_t config_data = 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	73bb      	strb	r3, [r7, #14]
	uint8_t recv_data = 0;
 80068c8:	2300      	movs	r3, #0
 80068ca:	737b      	strb	r3, [r7, #13]

	icm42688_reset(handle);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f88b 	bl	80069e8 <icm42688_reset>
	handle->delay(20);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d6:	2014      	movs	r0, #20
 80068d8:	4798      	blx	r3

	icm42688_set_bank(handle, 0);
 80068da:	2100      	movs	r1, #0
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7ff fef4 	bl	80066ca <icm42688_set_bank>

	icm42688_recv(handle, ICM42688_REG_BANK0_WHO_AM_I, &who_am_i, 1);
 80068e2:	f107 020f 	add.w	r2, r7, #15
 80068e6:	2301      	movs	r3, #1
 80068e8:	2175      	movs	r1, #117	@ 0x75
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7ff feb1 	bl	8006652 <icm42688_recv>
	if (who_am_i != 0x47)
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
 80068f2:	2b47      	cmp	r3, #71	@ 0x47
 80068f4:	d001      	beq.n	80068fa <icm42688_config+0x4a>
	{
		return ERR_CODE_FAIL;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e072      	b.n	80069e0 <icm42688_config+0x130>
	}

	/* Configure accel mode and gyro mode */
	config_data = (handle->gyro_mode << 2) | handle->accel_mode;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	b25b      	sxtb	r3, r3
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	b25a      	sxtb	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	78db      	ldrb	r3, [r3, #3]
 8006908:	b25b      	sxtb	r3, r3
 800690a:	4313      	orrs	r3, r2
 800690c:	b25b      	sxtb	r3, r3
 800690e:	b2db      	uxtb	r3, r3
 8006910:	73bb      	strb	r3, [r7, #14]
	icm42688_send(handle, ICM42688_REG_BANK0_PWR_MGMT0, &config_data, 1);
 8006912:	f107 020e 	add.w	r2, r7, #14
 8006916:	2301      	movs	r3, #1
 8006918:	214e      	movs	r1, #78	@ 0x4e
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff fe62 	bl	80065e4 <icm42688_send>
	handle->delay(2);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006924:	2002      	movs	r0, #2
 8006926:	4798      	blx	r3

	/* Configure accel ODR and FS */
	config_data = (handle->accel_fs_sel << 5) | handle->accel_odr;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	795b      	ldrb	r3, [r3, #5]
 800692c:	b25b      	sxtb	r3, r3
 800692e:	015b      	lsls	r3, r3, #5
 8006930:	b25a      	sxtb	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	791b      	ldrb	r3, [r3, #4]
 8006936:	b25b      	sxtb	r3, r3
 8006938:	4313      	orrs	r3, r2
 800693a:	b25b      	sxtb	r3, r3
 800693c:	b2db      	uxtb	r3, r3
 800693e:	73bb      	strb	r3, [r7, #14]
	icm42688_send(handle, ICM42688_REG_BANK0_ACCEL_CONFIG0, &config_data, 1);
 8006940:	f107 020e 	add.w	r2, r7, #14
 8006944:	2301      	movs	r3, #1
 8006946:	2150      	movs	r1, #80	@ 0x50
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff fe4b 	bl	80065e4 <icm42688_send>

	/* Configure gyro ODR and FS */
	config_data = (handle->gyro_fs_sel << 5) | handle->gyro_odr;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	785b      	ldrb	r3, [r3, #1]
 8006952:	b25b      	sxtb	r3, r3
 8006954:	015b      	lsls	r3, r3, #5
 8006956:	b25a      	sxtb	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	789b      	ldrb	r3, [r3, #2]
 800695c:	b25b      	sxtb	r3, r3
 800695e:	4313      	orrs	r3, r2
 8006960:	b25b      	sxtb	r3, r3
 8006962:	b2db      	uxtb	r3, r3
 8006964:	73bb      	strb	r3, [r7, #14]
	icm42688_send(handle, ICM42688_REG_BANK0_GYRO_CONFIG0, &config_data, 1);
 8006966:	f107 020e 	add.w	r2, r7, #14
 800696a:	2301      	movs	r3, #1
 800696c:	214f      	movs	r1, #79	@ 0x4f
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7ff fe38 	bl	80065e4 <icm42688_send>

	/* set gyro and accel bandwidth to ODR/10 */
	config_data = 0x44;
 8006974:	2344      	movs	r3, #68	@ 0x44
 8006976:	73bb      	strb	r3, [r7, #14]
	icm42688_send(handle, ICM42688_REG_BANK0_GYRO_ACCEL_CONFIG0, &config_data, 1);
 8006978:	f107 020e 	add.w	r2, r7, #14
 800697c:	2301      	movs	r3, #1
 800697e:	2152      	movs	r1, #82	@ 0x52
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff fe2f 	bl	80065e4 <icm42688_send>

	/* Push-pull, pulsed, active HIGH interrupts */
	icm42688_recv(handle, ICM42688_REG_BANK0_INT_CONFIG, &recv_data, 1);
 8006986:	f107 020d 	add.w	r2, r7, #13
 800698a:	2301      	movs	r3, #1
 800698c:	2114      	movs	r1, #20
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7ff fe5f 	bl	8006652 <icm42688_recv>
	config_data = (0x18 | 0x03);
 8006994:	231b      	movs	r3, #27
 8006996:	73bb      	strb	r3, [r7, #14]
	icm42688_send(handle, ICM42688_REG_BANK0_INT_CONFIG, &config_data, 1);
 8006998:	f107 020e 	add.w	r2, r7, #14
 800699c:	2301      	movs	r3, #1
 800699e:	2114      	movs	r1, #20
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7ff fe1f 	bl	80065e4 <icm42688_send>

	/* Clear bit 4 to allow async interrupt reset (required for proper interrupt operation) */
	icm42688_recv(handle, ICM42688_REG_BANK0_INT_CONFIG1, &recv_data, 1);
 80069a6:	f107 020d 	add.w	r2, r7, #13
 80069aa:	2301      	movs	r3, #1
 80069ac:	2164      	movs	r1, #100	@ 0x64
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7ff fe4f 	bl	8006652 <icm42688_recv>
	config_data = recv_data & ~(0x10);
 80069b4:	7b7b      	ldrb	r3, [r7, #13]
 80069b6:	f023 0310 	bic.w	r3, r3, #16
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	73bb      	strb	r3, [r7, #14]
	icm42688_send(handle, ICM42688_REG_BANK0_INT_CONFIG1, &config_data, 1);
 80069be:	f107 020e 	add.w	r2, r7, #14
 80069c2:	2301      	movs	r3, #1
 80069c4:	2164      	movs	r1, #100	@ 0x64
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff fe0c 	bl	80065e4 <icm42688_send>

	/* Route data ready interrupt to INT1 */
	config_data = 0x18;
 80069cc:	2318      	movs	r3, #24
 80069ce:	73bb      	strb	r3, [r7, #14]
	icm42688_send(handle, ICM42688_REG_BANK0_INT_SOURCE0, &config_data, 1);
 80069d0:	f107 020e 	add.w	r2, r7, #14
 80069d4:	2301      	movs	r3, #1
 80069d6:	2165      	movs	r1, #101	@ 0x65
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7ff fe03 	bl	80065e4 <icm42688_send>


	return ERR_CODE_SUCCESS;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <icm42688_reset>:

err_code_t icm42688_reset(icm42688_handle_t handle)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
	/* Check if handle structure is NULL */
	if (handle == NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d102      	bne.n	80069fc <icm42688_reset+0x14>
	{
		return ERR_CODE_NULL_PTR;
 80069f6:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80069fa:	e00d      	b.n	8006a18 <icm42688_reset+0x30>
	}

	icm42688_set_bank(handle, 0);
 80069fc:	2100      	movs	r1, #0
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7ff fe63 	bl	80066ca <icm42688_set_bank>

	uint8_t buf_send = 0x01;
 8006a04:	2301      	movs	r3, #1
 8006a06:	73fb      	strb	r3, [r7, #15]
	icm42688_send(handle, ICM42688_REG_BANK0_DEVICE_CONFIG, &buf_send, 1);
 8006a08:	f107 020f 	add.w	r2, r7, #15
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	2111      	movs	r1, #17
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff fde7 	bl	80065e4 <icm42688_send>

	return ERR_CODE_SUCCESS;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <icm42688_get_accel_scale>:

	return ERR_CODE_SUCCESS;
}

err_code_t icm42688_get_accel_scale(icm42688_handle_t handle, float *scale_x, float *scale_y, float *scale_z)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	603b      	str	r3, [r7, #0]
	/* Check if handle structure or pointer data is NULL */
	if ((handle == NULL) || (scale_x == NULL) || (scale_y == NULL) || (scale_z == NULL))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d008      	beq.n	8006a46 <icm42688_get_accel_scale+0x26>
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d005      	beq.n	8006a46 <icm42688_get_accel_scale+0x26>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <icm42688_get_accel_scale+0x26>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d102      	bne.n	8006a4c <icm42688_get_accel_scale+0x2c>
	{
		return ERR_CODE_NULL_PTR;
 8006a46:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8006a4a:	e053      	b.n	8006af4 <icm42688_get_accel_scale+0xd4>
	}

	uint8_t accel_raw_data[6];

	icm42688_set_bank(handle, 0);
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f7ff fe3b 	bl	80066ca <icm42688_set_bank>

	icm42688_recv(handle, ICM42688_REG_BANK0_ACCEL_DATA_X1, accel_raw_data, 6);
 8006a54:	f107 0210 	add.w	r2, r7, #16
 8006a58:	2306      	movs	r3, #6
 8006a5a:	211f      	movs	r1, #31
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f7ff fdf8 	bl	8006652 <icm42688_recv>

	*scale_x = (float)((int16_t)((accel_raw_data[0] << 8) + accel_raw_data[1]) - handle->accel_bias_x) * handle->accel_scaling_factor;
 8006a62:	7c3b      	ldrb	r3, [r7, #16]
 8006a64:	021b      	lsls	r3, r3, #8
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	7c7a      	ldrb	r2, [r7, #17]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	b21b      	sxth	r3, r3
 8006a70:	461a      	mov	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	edc3 7a00 	vstr	s15, [r3]
	*scale_y = (float)((int16_t)((accel_raw_data[2] << 8) + accel_raw_data[3]) - handle->accel_bias_y) * handle->accel_scaling_factor;
 8006a92:	7cbb      	ldrb	r3, [r7, #18]
 8006a94:	021b      	lsls	r3, r3, #8
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	7cfa      	ldrb	r2, [r7, #19]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	b21b      	sxth	r3, r3
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	ee07 3a90 	vmov	s15, r3
 8006aae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	edc3 7a00 	vstr	s15, [r3]
	*scale_z = (float)((int16_t)((accel_raw_data[4] << 8) + accel_raw_data[5]) - handle->accel_bias_z) * handle->accel_scaling_factor;
 8006ac2:	7d3b      	ldrb	r3, [r7, #20]
 8006ac4:	021b      	lsls	r3, r3, #8
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	7d7a      	ldrb	r2, [r7, #21]
 8006aca:	4413      	add	r3, r2
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	b21b      	sxth	r3, r3
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	edc3 7a00 	vstr	s15, [r3]

	return ERR_CODE_SUCCESS;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <kalman_height_estimation_init>:
	CLinearAlgebra_Matrix_t S;
	CLinearAlgebra_Matrix_t K;
} kalman_height_estimation_t;

kalman_height_estimation_handle_t kalman_height_estimation_init(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
	kalman_height_estimation_handle_t handle = calloc(1, sizeof(kalman_height_estimation_t));
 8006b02:	f240 713c 	movw	r1, #1852	@ 0x73c
 8006b06:	2001      	movs	r0, #1
 8006b08:	f000 fd64 	bl	80075d4 <calloc>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	607b      	str	r3, [r7, #4]

	if (handle == NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <kalman_height_estimation_init+0x1e>
	{
		return NULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e000      	b.n	8006b1c <kalman_height_estimation_init+0x20>
	}

	return handle;
 8006b1a:	687b      	ldr	r3, [r7, #4]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <kalman_height_estimation_set_config>:

err_code_t kalman_height_estimation_set_config(kalman_height_estimation_handle_t handle, kalman_height_estimation_cfg_t config)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	ed87 0a00 	vstr	s0, [r7]
	handle->dt = config.dt;
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	601a      	str	r2, [r3, #0]

	return ERR_CODE_SUCCESS;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <kalman_height_estimation_config>:

err_code_t kalman_height_estimation_config(kalman_height_estimation_handle_t handle)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
	handle->A.NumRows = 2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	711a      	strb	r2, [r3, #4]
	handle->A.NumCols = 2;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2202      	movs	r2, #2
 8006b56:	715a      	strb	r2, [r3, #5]
	CLinearAlgebra_Matrix_SetValue(&handle->A, 0, 0, 1.0f);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006b60:	2200      	movs	r2, #0
 8006b62:	2100      	movs	r1, #0
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fa fb63 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>
	CLinearAlgebra_Matrix_SetValue(&handle->A, 0, 1, handle->dt);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	1d18      	adds	r0, r3, #4
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	edd3 7a00 	vldr	s15, [r3]
 8006b74:	eeb0 0a67 	vmov.f32	s0, s15
 8006b78:	2201      	movs	r2, #1
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	f7fa fb58 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>
	CLinearAlgebra_Matrix_SetValue(&handle->A, 1, 0, 0.0f);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	3304      	adds	r3, #4
 8006b84:	ed9f 0aab 	vldr	s0, [pc, #684]	@ 8006e34 <kalman_height_estimation_config+0x2f0>
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fa fb4f 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>
	CLinearAlgebra_Matrix_SetValue(&handle->A, 1, 1, 1.0f);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3304      	adds	r3, #4
 8006b96:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fa fb46 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>

	handle->B.NumRows = 2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	handle->B.NumCols = 1;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	CLinearAlgebra_Matrix_SetValue(&handle->B, 0, 0, 0.5f * handle->dt * handle->dt);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	edd3 7a00 	vldr	s15, [r3]
 8006bc0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006bc4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	edd3 7a00 	vldr	s15, [r3]
 8006bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	2100      	movs	r1, #0
 8006bda:	f7fa fb29 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>
	CLinearAlgebra_Matrix_SetValue(&handle->B, 1, 0, handle->dt);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	edd3 7a00 	vldr	s15, [r3]
 8006bea:	eeb0 0a67 	vmov.f32	s0, s15
 8006bee:	2200      	movs	r2, #0
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	f7fa fb1d 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>

	handle->C.NumRows = 1;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
	handle->C.NumCols = 2;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2202      	movs	r2, #2
 8006c02:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
	CLinearAlgebra_Matrix_SetValue(&handle->C, 0, 0, 1.0f);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8006c0c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006c10:	2200      	movs	r2, #0
 8006c12:	2100      	movs	r1, #0
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fa fb0b 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>
	CLinearAlgebra_Matrix_SetValue(&handle->C, 0, 1, 0.0f);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8006c20:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 8006e34 <kalman_height_estimation_config+0x2f0>
 8006c24:	2201      	movs	r2, #1
 8006c26:	2100      	movs	r1, #0
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fa fb01 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>

	handle->V.NumRows = 2;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2202      	movs	r2, #2
 8006c32:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
	handle->V.NumCols = 2;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	f883 2191 	strb.w	r2, [r3, #401]	@ 0x191
	CLinearAlgebra_Matrix_SetValue(&handle->V, 0, 0, STD_DEV_V_H * STD_DEV_V_H);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006c44:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 8006e38 <kalman_height_estimation_config+0x2f4>
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7fa faef 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>
	CLinearAlgebra_Matrix_SetValue(&handle->V, 0, 1, 0.0f);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006c58:	ed9f 0a76 	vldr	s0, [pc, #472]	@ 8006e34 <kalman_height_estimation_config+0x2f0>
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	2100      	movs	r1, #0
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fa fae5 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>
	CLinearAlgebra_Matrix_SetValue(&handle->V, 1, 0, 0.0f);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006c6c:	ed9f 0a71 	vldr	s0, [pc, #452]	@ 8006e34 <kalman_height_estimation_config+0x2f0>
 8006c70:	2200      	movs	r2, #0
 8006c72:	2101      	movs	r1, #1
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fa fadb 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>
	CLinearAlgebra_Matrix_SetValue(&handle->V, 1, 1, STD_DEV_V_H * STD_DEV_V_H);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006c80:	ed9f 0a6d 	vldr	s0, [pc, #436]	@ 8006e38 <kalman_height_estimation_config+0x2f4>
 8006c84:	2201      	movs	r2, #1
 8006c86:	2101      	movs	r1, #1
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7fa fad1 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>

	handle->W.NumRows = 1;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
	handle->W.NumCols = 1;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
	CLinearAlgebra_Matrix_SetValue(&handle->W, 0, 0, STD_DEV_W_H * STD_DEV_W_H);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8006ca4:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8006e3c <kalman_height_estimation_config+0x2f8>
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2100      	movs	r1, #0
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fa fabf 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>

	handle->X.NumRows = 2;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	f883 2298 	strb.w	r2, [r3, #664]	@ 0x298
	handle->X.NumCols = 1;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2299 	strb.w	r2, [r3, #665]	@ 0x299
	CLinearAlgebra_Matrix_SetValue(&handle->X, 0, 0, 0.0f);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8006cc8:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 8006e34 <kalman_height_estimation_config+0x2f0>
 8006ccc:	2200      	movs	r2, #0
 8006cce:	2100      	movs	r1, #0
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7fa faad 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>
	CLinearAlgebra_Matrix_SetValue(&handle->X, 1, 0, 0.0f);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8006cdc:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 8006e34 <kalman_height_estimation_config+0x2f0>
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7fa faa3 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>

	handle->P.NumRows = 2;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2202      	movs	r2, #2
 8006cee:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
	handle->P.NumCols = 2;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
	CLinearAlgebra_Matrix_SetValue(&handle->P, 0, 0, 1.0f);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8006d00:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006d04:	2200      	movs	r2, #0
 8006d06:	2100      	movs	r1, #0
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fa fa91 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>
	CLinearAlgebra_Matrix_SetValue(&handle->P, 0, 1, 0.0f);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8006d14:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8006e34 <kalman_height_estimation_config+0x2f0>
 8006d18:	2201      	movs	r2, #1
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fa fa87 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>
	CLinearAlgebra_Matrix_SetValue(&handle->P, 1, 0, 0.0f);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8006d28:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 8006e34 <kalman_height_estimation_config+0x2f0>
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2101      	movs	r1, #1
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fa fa7d 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>
	CLinearAlgebra_Matrix_SetValue(&handle->P, 1, 1, 1.0f);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8006d3c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006d40:	2201      	movs	r2, #1
 8006d42:	2101      	movs	r1, #1
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fa fa73 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>

	handle->Xprev.NumRows = 2;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	f883 23a0 	strb.w	r2, [r3, #928]	@ 0x3a0
	handle->Xprev.NumCols = 1;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 23a1 	strb.w	r2, [r3, #929]	@ 0x3a1
	CLinearAlgebra_Matrix_SetValue(&handle->Xprev, 0, 0, 0.0f);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f503 7368 	add.w	r3, r3, #928	@ 0x3a0
 8006d60:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8006e34 <kalman_height_estimation_config+0x2f0>
 8006d64:	2200      	movs	r2, #0
 8006d66:	2100      	movs	r1, #0
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fa fa61 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>
	CLinearAlgebra_Matrix_SetValue(&handle->Xprev, 1, 0, 0.0f);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f503 7368 	add.w	r3, r3, #928	@ 0x3a0
 8006d74:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8006e34 <kalman_height_estimation_config+0x2f0>
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fa fa57 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>

	handle->Pprev.NumRows = 2;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2202      	movs	r2, #2
 8006d86:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
	handle->Pprev.NumCols = 2;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
	CLinearAlgebra_Matrix_SetValue(&handle->Pprev, 0, 0, 1.0f);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8006d98:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2100      	movs	r1, #0
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fa fa45 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>
	CLinearAlgebra_Matrix_SetValue(&handle->Pprev, 0, 1, 0.0f);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8006dac:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8006e34 <kalman_height_estimation_config+0x2f0>
 8006db0:	2201      	movs	r2, #1
 8006db2:	2100      	movs	r1, #0
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fa fa3b 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>
	CLinearAlgebra_Matrix_SetValue(&handle->Pprev, 1, 0, 0.0f);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8006dc0:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8006e34 <kalman_height_estimation_config+0x2f0>
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fa fa31 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>
	CLinearAlgebra_Matrix_SetValue(&handle->Pprev, 1, 1, 1.0f);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8006dd4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006dd8:	2201      	movs	r2, #1
 8006dda:	2101      	movs	r1, #1
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7fa fa27 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>

	handle->U.NumRows = 1;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 24a8 	strb.w	r2, [r3, #1192]	@ 0x4a8
	handle->U.NumCols = 1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 24a9 	strb.w	r2, [r3, #1193]	@ 0x4a9
	CLinearAlgebra_Matrix_SetValue(&handle->U, 0, 0, 0.0f);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8006df8:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8006e34 <kalman_height_estimation_config+0x2f0>
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fa fa15 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>

	handle->Y.NumRows = 1;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 252c 	strb.w	r2, [r3, #1324]	@ 0x52c
	handle->Y.NumCols = 1;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 252d 	strb.w	r2, [r3, #1325]	@ 0x52d
	CLinearAlgebra_Matrix_SetValue(&handle->Y, 0, 0, 0.0f);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f203 532c 	addw	r3, r3, #1324	@ 0x52c
 8006e1c:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8006e34 <kalman_height_estimation_config+0x2f0>
 8006e20:	2200      	movs	r2, #0
 8006e22:	2100      	movs	r1, #0
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fa fa03 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>

	return ERR_CODE_SUCCESS;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	00000000 	.word	0x00000000
 8006e38:	358637be 	.word	0x358637be
 8006e3c:	38d1b717 	.word	0x38d1b717

08006e40 <kalman_height_estimation_update>:

err_code_t kalman_height_estimation_update(kalman_height_estimation_handle_t handle,
        float accel_z, float height)
{
 8006e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e42:	f6ad 1d5c 	subw	sp, sp, #2396	@ 0x95c
 8006e46:	af40      	add	r7, sp, #256	@ 0x100
 8006e48:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006e4c:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8006e50:	6018      	str	r0, [r3, #0]
 8006e52:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006e56:	f5a3 63f9 	sub.w	r3, r3, #1992	@ 0x7c8
 8006e5a:	ed83 0a00 	vstr	s0, [r3]
 8006e5e:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006e62:	f2a3 73cc 	subw	r3, r3, #1996	@ 0x7cc
 8006e66:	edc3 0a00 	vstr	s1, [r3]
	/* Check if handle structure is NULL */
	if (handle == NULL)
 8006e6a:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006e6e:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d102      	bne.n	8006e7e <kalman_height_estimation_update+0x3e>
	{
		return ERR_CODE_NULL_PTR;
 8006e78:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8006e7c:	e37e      	b.n	800757c <kalman_height_estimation_update+0x73c>
	}

	handle->E.NumRows = 1;
 8006e7e:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006e82:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 25b0 	strb.w	r2, [r3, #1456]	@ 0x5b0
	handle->E.NumCols = 1;
 8006e8e:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006e92:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 25b1 	strb.w	r2, [r3, #1457]	@ 0x5b1
	CLinearAlgebra_Matrix_SetValue(&handle->E, 0, 0, 0.0f);
 8006e9e:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006ea2:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 8006eac:	ed9f 0ae9 	vldr	s0, [pc, #932]	@ 8007254 <kalman_height_estimation_update+0x414>
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fa f9bb 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>

	handle->S.NumRows = 1;
 8006eba:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006ebe:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2634 	strb.w	r2, [r3, #1588]	@ 0x634
	handle->S.NumCols = 1;
 8006eca:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006ece:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2635 	strb.w	r2, [r3, #1589]	@ 0x635
	CLinearAlgebra_Matrix_SetValue(&handle->S, 0, 0, 0.0f);
 8006eda:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006ede:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8006ee8:	ed9f 0ada 	vldr	s0, [pc, #872]	@ 8007254 <kalman_height_estimation_update+0x414>
 8006eec:	2200      	movs	r2, #0
 8006eee:	2100      	movs	r1, #0
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7fa f99d 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>

	handle->K.NumRows = 2;
 8006ef6:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006efa:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2202      	movs	r2, #2
 8006f02:	f883 26b8 	strb.w	r2, [r3, #1720]	@ 0x6b8
	handle->K.NumCols = 1;
 8006f06:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006f0a:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 26b9 	strb.w	r2, [r3, #1721]	@ 0x6b9
	CLinearAlgebra_Matrix_SetValue(&handle->K, 0, 0, 0.0f);
 8006f16:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006f1a:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f503 63d7 	add.w	r3, r3, #1720	@ 0x6b8
 8006f24:	ed9f 0acb 	vldr	s0, [pc, #812]	@ 8007254 <kalman_height_estimation_update+0x414>
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fa f97f 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>
	CLinearAlgebra_Matrix_SetValue(&handle->K, 1, 0, 0.0f);
 8006f32:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006f36:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f503 63d7 	add.w	r3, r3, #1720	@ 0x6b8
 8006f40:	ed9f 0ac4 	vldr	s0, [pc, #784]	@ 8007254 <kalman_height_estimation_update+0x414>
 8006f44:	2200      	movs	r2, #0
 8006f46:	2101      	movs	r1, #1
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fa f971 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>

	CLinearAlgebra_Matrix_SetValue(&handle->U, 0, 0, accel_z);
 8006f4e:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006f52:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f503 6095 	add.w	r0, r3, #1192	@ 0x4a8
 8006f5c:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006f60:	f5a3 63f9 	sub.w	r3, r3, #1992	@ 0x7c8
 8006f64:	ed93 0a00 	vldr	s0, [r3]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	f7fa f960 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>
	CLinearAlgebra_Matrix_SetValue(&handle->Y, 0, 0, height);
 8006f70:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006f74:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f203 502c 	addw	r0, r3, #1324	@ 0x52c
 8006f7e:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006f82:	f2a3 73cc 	subw	r3, r3, #1996	@ 0x7cc
 8006f86:	ed93 0a00 	vldr	s0, [r3]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	f7fa f94f 	bl	8001230 <CLinearAlgebra_Matrix_SetValue>


	// X = A*Xprev + B*U
	handle->X = CLinearAlgebra_Matrix_Add(CLinearAlgebra_Matrix_Multiply(handle->A, handle->Xprev),
 8006f92:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006f96:	f2a3 75bc 	subw	r5, r3, #1980	@ 0x7bc
 8006f9a:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006f9e:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8006fa2:	681c      	ldr	r4, [r3, #0]
 8006fa4:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006fa8:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	a81e      	add	r0, sp, #120	@ 0x78
 8006fb0:	f503 7368 	add.w	r3, r3, #928	@ 0x3a0
 8006fb4:	2284      	movs	r2, #132	@ 0x84
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	f001 f9e3 	bl	8008382 <memcpy>
 8006fbc:	4668      	mov	r0, sp
 8006fbe:	f104 0310 	add.w	r3, r4, #16
 8006fc2:	2278      	movs	r2, #120	@ 0x78
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	f001 f9dc 	bl	8008382 <memcpy>
 8006fca:	1d23      	adds	r3, r4, #4
 8006fcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f7fa fa4c 	bl	800146c <CLinearAlgebra_Matrix_Multiply>
 8006fd4:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006fd8:	f5a3 65e7 	sub.w	r5, r3, #1848	@ 0x738
 8006fdc:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006fe0:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8006fe4:	681c      	ldr	r4, [r3, #0]
 8006fe6:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8006fea:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	a81e      	add	r0, sp, #120	@ 0x78
 8006ff2:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8006ff6:	2284      	movs	r2, #132	@ 0x84
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	f001 f9c2 	bl	8008382 <memcpy>
 8006ffe:	4668      	mov	r0, sp
 8007000:	f104 0394 	add.w	r3, r4, #148	@ 0x94
 8007004:	2278      	movs	r2, #120	@ 0x78
 8007006:	4619      	mov	r1, r3
 8007008:	f001 f9bb 	bl	8008382 <memcpy>
 800700c:	f104 0388 	add.w	r3, r4, #136	@ 0x88
 8007010:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007012:	4628      	mov	r0, r5
 8007014:	f7fa fa2a 	bl	800146c <CLinearAlgebra_Matrix_Multiply>
 8007018:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800701c:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8007020:	681d      	ldr	r5, [r3, #0]
 8007022:	463e      	mov	r6, r7
 8007024:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007028:	f2a3 74bc 	subw	r4, r3, #1980	@ 0x7bc
 800702c:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007030:	f5a3 62e7 	sub.w	r2, r3, #1848	@ 0x738
 8007034:	ab1e      	add	r3, sp, #120	@ 0x78
 8007036:	4611      	mov	r1, r2
 8007038:	2284      	movs	r2, #132	@ 0x84
 800703a:	4618      	mov	r0, r3
 800703c:	f001 f9a1 	bl	8008382 <memcpy>
 8007040:	4668      	mov	r0, sp
 8007042:	f104 030c 	add.w	r3, r4, #12
 8007046:	2278      	movs	r2, #120	@ 0x78
 8007048:	4619      	mov	r1, r3
 800704a:	f001 f99a 	bl	8008382 <memcpy>
 800704e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8007052:	4630      	mov	r0, r6
 8007054:	f7fa f926 	bl	80012a4 <CLinearAlgebra_Matrix_Add>
 8007058:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800705c:	f6a3 0258 	subw	r2, r3, #2136	@ 0x858
 8007060:	f505 7326 	add.w	r3, r5, #664	@ 0x298
 8007064:	4611      	mov	r1, r2
 8007066:	2284      	movs	r2, #132	@ 0x84
 8007068:	4618      	mov	r0, r3
 800706a:	f001 f98a 	bl	8008382 <memcpy>
	                                      CLinearAlgebra_Matrix_Multiply(handle->B, handle->U));

	// Ppri_h = (A_h * Ppost_h * A_h.t()) + V_h;
	handle->P = CLinearAlgebra_Matrix_Add(CLinearAlgebra_Matrix_Multiply(CLinearAlgebra_Matrix_Multiply(handle->A, handle->Pprev),
 800706e:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007072:	f2a3 65b4 	subw	r5, r3, #1716	@ 0x6b4
 8007076:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800707a:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 800707e:	681c      	ldr	r4, [r3, #0]
 8007080:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007084:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	a81e      	add	r0, sp, #120	@ 0x78
 800708c:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8007090:	2284      	movs	r2, #132	@ 0x84
 8007092:	4619      	mov	r1, r3
 8007094:	f001 f975 	bl	8008382 <memcpy>
 8007098:	4668      	mov	r0, sp
 800709a:	f104 0310 	add.w	r3, r4, #16
 800709e:	2278      	movs	r2, #120	@ 0x78
 80070a0:	4619      	mov	r1, r3
 80070a2:	f001 f96e 	bl	8008382 <memcpy>
 80070a6:	1d23      	adds	r3, r4, #4
 80070a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070aa:	4628      	mov	r0, r5
 80070ac:	f7fa f9de 	bl	800146c <CLinearAlgebra_Matrix_Multiply>
 80070b0:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80070b4:	f5a3 65c6 	sub.w	r5, r3, #1584	@ 0x630
 80070b8:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80070bc:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 80070c0:	681c      	ldr	r4, [r3, #0]
 80070c2:	4668      	mov	r0, sp
 80070c4:	f104 0310 	add.w	r3, r4, #16
 80070c8:	2278      	movs	r2, #120	@ 0x78
 80070ca:	4619      	mov	r1, r3
 80070cc:	f001 f959 	bl	8008382 <memcpy>
 80070d0:	1d23      	adds	r3, r4, #4
 80070d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070d4:	4628      	mov	r0, r5
 80070d6:	f7fa fa8d 	bl	80015f4 <CLinearAlgebra_Matrix_Transpose>
 80070da:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80070de:	f2a3 55ac 	subw	r5, r3, #1452	@ 0x5ac
 80070e2:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80070e6:	f2a3 64b4 	subw	r4, r3, #1716	@ 0x6b4
 80070ea:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80070ee:	f5a3 62c6 	sub.w	r2, r3, #1584	@ 0x630
 80070f2:	ab1e      	add	r3, sp, #120	@ 0x78
 80070f4:	4611      	mov	r1, r2
 80070f6:	2284      	movs	r2, #132	@ 0x84
 80070f8:	4618      	mov	r0, r3
 80070fa:	f001 f942 	bl	8008382 <memcpy>
 80070fe:	4668      	mov	r0, sp
 8007100:	f104 030c 	add.w	r3, r4, #12
 8007104:	2278      	movs	r2, #120	@ 0x78
 8007106:	4619      	mov	r1, r3
 8007108:	f001 f93b 	bl	8008382 <memcpy>
 800710c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8007110:	4628      	mov	r0, r5
 8007112:	f7fa f9ab 	bl	800146c <CLinearAlgebra_Matrix_Multiply>
 8007116:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800711a:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 800711e:	681d      	ldr	r5, [r3, #0]
 8007120:	463e      	mov	r6, r7
 8007122:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007126:	f2a3 54ac 	subw	r4, r3, #1452	@ 0x5ac
 800712a:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800712e:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	a81e      	add	r0, sp, #120	@ 0x78
 8007136:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800713a:	2284      	movs	r2, #132	@ 0x84
 800713c:	4619      	mov	r1, r3
 800713e:	f001 f920 	bl	8008382 <memcpy>
 8007142:	4668      	mov	r0, sp
 8007144:	f104 030c 	add.w	r3, r4, #12
 8007148:	2278      	movs	r2, #120	@ 0x78
 800714a:	4619      	mov	r1, r3
 800714c:	f001 f919 	bl	8008382 <memcpy>
 8007150:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8007154:	4630      	mov	r0, r6
 8007156:	f7fa f8a5 	bl	80012a4 <CLinearAlgebra_Matrix_Add>
 800715a:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800715e:	f6a3 0258 	subw	r2, r3, #2136	@ 0x858
 8007162:	f505 7347 	add.w	r3, r5, #796	@ 0x31c
 8007166:	4611      	mov	r1, r2
 8007168:	2284      	movs	r2, #132	@ 0x84
 800716a:	4618      	mov	r0, r3
 800716c:	f001 f909 	bl	8008382 <memcpy>
	                                      CLinearAlgebra_Matrix_Transpose(handle->A)),
	                                      handle->V);

	// E_h = Y_h - (C_h * Xpri_h);
	handle->E = CLinearAlgebra_Matrix_Subtract(handle->Y,
 8007170:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007174:	f5a3 65a5 	sub.w	r5, r3, #1320	@ 0x528
 8007178:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800717c:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8007180:	681c      	ldr	r4, [r3, #0]
 8007182:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007186:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	a81e      	add	r0, sp, #120	@ 0x78
 800718e:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8007192:	2284      	movs	r2, #132	@ 0x84
 8007194:	4619      	mov	r1, r3
 8007196:	f001 f8f4 	bl	8008382 <memcpy>
 800719a:	4668      	mov	r0, sp
 800719c:	f504 738c 	add.w	r3, r4, #280	@ 0x118
 80071a0:	2278      	movs	r2, #120	@ 0x78
 80071a2:	4619      	mov	r1, r3
 80071a4:	f001 f8ed 	bl	8008382 <memcpy>
 80071a8:	f504 7386 	add.w	r3, r4, #268	@ 0x10c
 80071ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071ae:	4628      	mov	r0, r5
 80071b0:	f7fa f95c 	bl	800146c <CLinearAlgebra_Matrix_Multiply>
 80071b4:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80071b8:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 80071bc:	681d      	ldr	r5, [r3, #0]
 80071be:	463e      	mov	r6, r7
 80071c0:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80071c4:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 80071c8:	681c      	ldr	r4, [r3, #0]
 80071ca:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80071ce:	f5a3 62a5 	sub.w	r2, r3, #1320	@ 0x528
 80071d2:	ab1e      	add	r3, sp, #120	@ 0x78
 80071d4:	4611      	mov	r1, r2
 80071d6:	2284      	movs	r2, #132	@ 0x84
 80071d8:	4618      	mov	r0, r3
 80071da:	f001 f8d2 	bl	8008382 <memcpy>
 80071de:	4668      	mov	r0, sp
 80071e0:	f504 63a7 	add.w	r3, r4, #1336	@ 0x538
 80071e4:	2278      	movs	r2, #120	@ 0x78
 80071e6:	4619      	mov	r1, r3
 80071e8:	f001 f8cb 	bl	8008382 <memcpy>
 80071ec:	f204 532c 	addw	r3, r4, #1324	@ 0x52c
 80071f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071f2:	4630      	mov	r0, r6
 80071f4:	f7fa f8c8 	bl	8001388 <CLinearAlgebra_Matrix_Subtract>
 80071f8:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80071fc:	f6a3 0258 	subw	r2, r3, #2136	@ 0x858
 8007200:	f505 63b6 	add.w	r3, r5, #1456	@ 0x5b0
 8007204:	4611      	mov	r1, r2
 8007206:	2284      	movs	r2, #132	@ 0x84
 8007208:	4618      	mov	r0, r3
 800720a:	f001 f8ba 	bl	8008382 <memcpy>
	            CLinearAlgebra_Matrix_Multiply(handle->C, handle->X));

	// S_h = (C_h * Ppri_h * C_h.t()) + W_h;
	handle->S = CLinearAlgebra_Matrix_Add(CLinearAlgebra_Matrix_Multiply(CLinearAlgebra_Matrix_Multiply(handle->C, handle->P),
 800720e:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007212:	f2a3 45a4 	subw	r5, r3, #1188	@ 0x4a4
 8007216:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800721a:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 800721e:	681c      	ldr	r4, [r3, #0]
 8007220:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007224:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	a81e      	add	r0, sp, #120	@ 0x78
 800722c:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8007230:	2284      	movs	r2, #132	@ 0x84
 8007232:	4619      	mov	r1, r3
 8007234:	f001 f8a5 	bl	8008382 <memcpy>
 8007238:	4668      	mov	r0, sp
 800723a:	f504 738c 	add.w	r3, r4, #280	@ 0x118
 800723e:	2278      	movs	r2, #120	@ 0x78
 8007240:	4619      	mov	r1, r3
 8007242:	f001 f89e 	bl	8008382 <memcpy>
 8007246:	f504 7386 	add.w	r3, r4, #268	@ 0x10c
 800724a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800724c:	4628      	mov	r0, r5
 800724e:	f7fa f90d 	bl	800146c <CLinearAlgebra_Matrix_Multiply>
 8007252:	e001      	b.n	8007258 <kalman_height_estimation_update+0x418>
 8007254:	00000000 	.word	0x00000000
 8007258:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800725c:	f5a3 6584 	sub.w	r5, r3, #1056	@ 0x420
 8007260:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007264:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8007268:	681c      	ldr	r4, [r3, #0]
 800726a:	4668      	mov	r0, sp
 800726c:	f504 738c 	add.w	r3, r4, #280	@ 0x118
 8007270:	2278      	movs	r2, #120	@ 0x78
 8007272:	4619      	mov	r1, r3
 8007274:	f001 f885 	bl	8008382 <memcpy>
 8007278:	f504 7386 	add.w	r3, r4, #268	@ 0x10c
 800727c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800727e:	4628      	mov	r0, r5
 8007280:	f7fa f9b8 	bl	80015f4 <CLinearAlgebra_Matrix_Transpose>
 8007284:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007288:	f5a3 7567 	sub.w	r5, r3, #924	@ 0x39c
 800728c:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007290:	f2a3 44a4 	subw	r4, r3, #1188	@ 0x4a4
 8007294:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007298:	f5a3 6284 	sub.w	r2, r3, #1056	@ 0x420
 800729c:	ab1e      	add	r3, sp, #120	@ 0x78
 800729e:	4611      	mov	r1, r2
 80072a0:	2284      	movs	r2, #132	@ 0x84
 80072a2:	4618      	mov	r0, r3
 80072a4:	f001 f86d 	bl	8008382 <memcpy>
 80072a8:	4668      	mov	r0, sp
 80072aa:	f104 030c 	add.w	r3, r4, #12
 80072ae:	2278      	movs	r2, #120	@ 0x78
 80072b0:	4619      	mov	r1, r3
 80072b2:	f001 f866 	bl	8008382 <memcpy>
 80072b6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80072ba:	4628      	mov	r0, r5
 80072bc:	f7fa f8d6 	bl	800146c <CLinearAlgebra_Matrix_Multiply>
 80072c0:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80072c4:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 80072c8:	681d      	ldr	r5, [r3, #0]
 80072ca:	463e      	mov	r6, r7
 80072cc:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80072d0:	f5a3 7467 	sub.w	r4, r3, #924	@ 0x39c
 80072d4:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80072d8:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	a81e      	add	r0, sp, #120	@ 0x78
 80072e0:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80072e4:	2284      	movs	r2, #132	@ 0x84
 80072e6:	4619      	mov	r1, r3
 80072e8:	f001 f84b 	bl	8008382 <memcpy>
 80072ec:	4668      	mov	r0, sp
 80072ee:	f104 030c 	add.w	r3, r4, #12
 80072f2:	2278      	movs	r2, #120	@ 0x78
 80072f4:	4619      	mov	r1, r3
 80072f6:	f001 f844 	bl	8008382 <memcpy>
 80072fa:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80072fe:	4630      	mov	r0, r6
 8007300:	f7f9 ffd0 	bl	80012a4 <CLinearAlgebra_Matrix_Add>
 8007304:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007308:	f6a3 0258 	subw	r2, r3, #2136	@ 0x858
 800730c:	f205 6334 	addw	r3, r5, #1588	@ 0x634
 8007310:	4611      	mov	r1, r2
 8007312:	2284      	movs	r2, #132	@ 0x84
 8007314:	4618      	mov	r0, r3
 8007316:	f001 f834 	bl	8008382 <memcpy>
	                                      CLinearAlgebra_Matrix_Transpose(handle->C)),
	                                      handle->W);

	// K_h = (Ppri_h * C_h.t()) * S_h.inverse();
	handle->K = CLinearAlgebra_Matrix_Multiply(CLinearAlgebra_Matrix_Multiply(handle->P, handle->C),
 800731a:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800731e:	f5a3 7546 	sub.w	r5, r3, #792	@ 0x318
 8007322:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007326:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 800732a:	681c      	ldr	r4, [r3, #0]
 800732c:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007330:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	a81e      	add	r0, sp, #120	@ 0x78
 8007338:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800733c:	2284      	movs	r2, #132	@ 0x84
 800733e:	4619      	mov	r1, r3
 8007340:	f001 f81f 	bl	8008382 <memcpy>
 8007344:	4668      	mov	r0, sp
 8007346:	f504 734a 	add.w	r3, r4, #808	@ 0x328
 800734a:	2278      	movs	r2, #120	@ 0x78
 800734c:	4619      	mov	r1, r3
 800734e:	f001 f818 	bl	8008382 <memcpy>
 8007352:	f504 7347 	add.w	r3, r4, #796	@ 0x31c
 8007356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007358:	4628      	mov	r0, r5
 800735a:	f7fa f887 	bl	800146c <CLinearAlgebra_Matrix_Multiply>
 800735e:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007362:	f5a3 7525 	sub.w	r5, r3, #660	@ 0x294
 8007366:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800736a:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 800736e:	681c      	ldr	r4, [r3, #0]
 8007370:	4668      	mov	r0, sp
 8007372:	f504 63c8 	add.w	r3, r4, #1600	@ 0x640
 8007376:	2278      	movs	r2, #120	@ 0x78
 8007378:	4619      	mov	r1, r3
 800737a:	f001 f802 	bl	8008382 <memcpy>
 800737e:	f204 6334 	addw	r3, r4, #1588	@ 0x634
 8007382:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007384:	4628      	mov	r0, r5
 8007386:	f7fa fba9 	bl	8001adc <CLinearAlgebra_Matrix_Inverse>
 800738a:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800738e:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8007392:	681d      	ldr	r5, [r3, #0]
 8007394:	463e      	mov	r6, r7
 8007396:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800739a:	f5a3 7446 	sub.w	r4, r3, #792	@ 0x318
 800739e:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80073a2:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 80073a6:	ab1e      	add	r3, sp, #120	@ 0x78
 80073a8:	4611      	mov	r1, r2
 80073aa:	2284      	movs	r2, #132	@ 0x84
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 ffe8 	bl	8008382 <memcpy>
 80073b2:	4668      	mov	r0, sp
 80073b4:	f104 030c 	add.w	r3, r4, #12
 80073b8:	2278      	movs	r2, #120	@ 0x78
 80073ba:	4619      	mov	r1, r3
 80073bc:	f000 ffe1 	bl	8008382 <memcpy>
 80073c0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80073c4:	4630      	mov	r0, r6
 80073c6:	f7fa f851 	bl	800146c <CLinearAlgebra_Matrix_Multiply>
 80073ca:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80073ce:	f6a3 0258 	subw	r2, r3, #2136	@ 0x858
 80073d2:	f505 63d7 	add.w	r3, r5, #1720	@ 0x6b8
 80073d6:	4611      	mov	r1, r2
 80073d8:	2284      	movs	r2, #132	@ 0x84
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 ffd1 	bl	8008382 <memcpy>
	            CLinearAlgebra_Matrix_Inverse(handle->S));

	// Xpost_h = Xpri_h + (K_h * E_h);
	handle->Xprev = CLinearAlgebra_Matrix_Add(handle->X,
 80073e0:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80073e4:	f5a3 7504 	sub.w	r5, r3, #528	@ 0x210
 80073e8:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80073ec:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 80073f0:	681c      	ldr	r4, [r3, #0]
 80073f2:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80073f6:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	a81e      	add	r0, sp, #120	@ 0x78
 80073fe:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 8007402:	2284      	movs	r2, #132	@ 0x84
 8007404:	4619      	mov	r1, r3
 8007406:	f000 ffbc 	bl	8008382 <memcpy>
 800740a:	4668      	mov	r0, sp
 800740c:	f204 63c4 	addw	r3, r4, #1732	@ 0x6c4
 8007410:	2278      	movs	r2, #120	@ 0x78
 8007412:	4619      	mov	r1, r3
 8007414:	f000 ffb5 	bl	8008382 <memcpy>
 8007418:	f504 63d7 	add.w	r3, r4, #1720	@ 0x6b8
 800741c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800741e:	4628      	mov	r0, r5
 8007420:	f7fa f824 	bl	800146c <CLinearAlgebra_Matrix_Multiply>
 8007424:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007428:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 800742c:	681d      	ldr	r5, [r3, #0]
 800742e:	463e      	mov	r6, r7
 8007430:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007434:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8007438:	681c      	ldr	r4, [r3, #0]
 800743a:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800743e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8007442:	ab1e      	add	r3, sp, #120	@ 0x78
 8007444:	4611      	mov	r1, r2
 8007446:	2284      	movs	r2, #132	@ 0x84
 8007448:	4618      	mov	r0, r3
 800744a:	f000 ff9a 	bl	8008382 <memcpy>
 800744e:	4668      	mov	r0, sp
 8007450:	f504 7329 	add.w	r3, r4, #676	@ 0x2a4
 8007454:	2278      	movs	r2, #120	@ 0x78
 8007456:	4619      	mov	r1, r3
 8007458:	f000 ff93 	bl	8008382 <memcpy>
 800745c:	f504 7326 	add.w	r3, r4, #664	@ 0x298
 8007460:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007462:	4630      	mov	r0, r6
 8007464:	f7f9 ff1e 	bl	80012a4 <CLinearAlgebra_Matrix_Add>
 8007468:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800746c:	f6a3 0258 	subw	r2, r3, #2136	@ 0x858
 8007470:	f505 7368 	add.w	r3, r5, #928	@ 0x3a0
 8007474:	4611      	mov	r1, r2
 8007476:	2284      	movs	r2, #132	@ 0x84
 8007478:	4618      	mov	r0, r3
 800747a:	f000 ff82 	bl	8008382 <memcpy>
	                CLinearAlgebra_Matrix_Multiply(handle->K, handle->E));

	// Ppost_h = Ppri_h - (K_h * S_h * K_h.t());
	handle->Pprev = CLinearAlgebra_Matrix_Subtract(handle->P, CLinearAlgebra_Matrix_Multiply(
 800747e:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007482:	f5a3 75c6 	sub.w	r5, r3, #396	@ 0x18c
 8007486:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800748a:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 800748e:	681c      	ldr	r4, [r3, #0]
 8007490:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007494:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	a81e      	add	r0, sp, #120	@ 0x78
 800749c:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 80074a0:	2284      	movs	r2, #132	@ 0x84
 80074a2:	4619      	mov	r1, r3
 80074a4:	f000 ff6d 	bl	8008382 <memcpy>
 80074a8:	4668      	mov	r0, sp
 80074aa:	f204 63c4 	addw	r3, r4, #1732	@ 0x6c4
 80074ae:	2278      	movs	r2, #120	@ 0x78
 80074b0:	4619      	mov	r1, r3
 80074b2:	f000 ff66 	bl	8008382 <memcpy>
 80074b6:	f504 63d7 	add.w	r3, r4, #1720	@ 0x6b8
 80074ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074bc:	4628      	mov	r0, r5
 80074be:	f7f9 ffd5 	bl	800146c <CLinearAlgebra_Matrix_Multiply>
 80074c2:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80074c6:	f5a3 7584 	sub.w	r5, r3, #264	@ 0x108
 80074ca:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80074ce:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 80074d2:	681c      	ldr	r4, [r3, #0]
 80074d4:	4668      	mov	r0, sp
 80074d6:	f204 63c4 	addw	r3, r4, #1732	@ 0x6c4
 80074da:	2278      	movs	r2, #120	@ 0x78
 80074dc:	4619      	mov	r1, r3
 80074de:	f000 ff50 	bl	8008382 <memcpy>
 80074e2:	f504 63d7 	add.w	r3, r4, #1720	@ 0x6b8
 80074e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074e8:	4628      	mov	r0, r5
 80074ea:	f7fa f883 	bl	80015f4 <CLinearAlgebra_Matrix_Transpose>
 80074ee:	f207 75d4 	addw	r5, r7, #2004	@ 0x7d4
 80074f2:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80074f6:	f5a3 74c6 	sub.w	r4, r3, #396	@ 0x18c
 80074fa:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80074fe:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8007502:	ab1e      	add	r3, sp, #120	@ 0x78
 8007504:	4611      	mov	r1, r2
 8007506:	2284      	movs	r2, #132	@ 0x84
 8007508:	4618      	mov	r0, r3
 800750a:	f000 ff3a 	bl	8008382 <memcpy>
 800750e:	4668      	mov	r0, sp
 8007510:	f104 030c 	add.w	r3, r4, #12
 8007514:	2278      	movs	r2, #120	@ 0x78
 8007516:	4619      	mov	r1, r3
 8007518:	f000 ff33 	bl	8008382 <memcpy>
 800751c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8007520:	4628      	mov	r0, r5
 8007522:	f7f9 ffa3 	bl	800146c <CLinearAlgebra_Matrix_Multiply>
 8007526:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800752a:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 800752e:	681d      	ldr	r5, [r3, #0]
 8007530:	463e      	mov	r6, r7
 8007532:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007536:	f2a3 73c4 	subw	r3, r3, #1988	@ 0x7c4
 800753a:	681c      	ldr	r4, [r3, #0]
 800753c:	a81e      	add	r0, sp, #120	@ 0x78
 800753e:	f207 73d4 	addw	r3, r7, #2004	@ 0x7d4
 8007542:	2284      	movs	r2, #132	@ 0x84
 8007544:	4619      	mov	r1, r3
 8007546:	f000 ff1c 	bl	8008382 <memcpy>
 800754a:	4668      	mov	r0, sp
 800754c:	f504 734a 	add.w	r3, r4, #808	@ 0x328
 8007550:	2278      	movs	r2, #120	@ 0x78
 8007552:	4619      	mov	r1, r3
 8007554:	f000 ff15 	bl	8008382 <memcpy>
 8007558:	f504 7347 	add.w	r3, r4, #796	@ 0x31c
 800755c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800755e:	4630      	mov	r0, r6
 8007560:	f7f9 ff12 	bl	8001388 <CLinearAlgebra_Matrix_Subtract>
 8007564:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8007568:	f6a3 0258 	subw	r2, r3, #2136	@ 0x858
 800756c:	f205 4324 	addw	r3, r5, #1060	@ 0x424
 8007570:	4611      	mov	r1, r2
 8007572:	2284      	movs	r2, #132	@ 0x84
 8007574:	4618      	mov	r0, r3
 8007576:	f000 ff04 	bl	8008382 <memcpy>
// 	// CLinearAlgebra_Matrix_SetValue(&temp1, 2, 0, 5);
// 	// CLinearAlgebra_Matrix_SetValue(&temp1, 2, 1, 6);

// 	temp2 = CLinearAlgebra_Matrix_Inverse(temp1);

	return ERR_CODE_SUCCESS;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	f607 075c 	addw	r7, r7, #2140	@ 0x85c
 8007582:	46bd      	mov	sp, r7
 8007584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007586:	bf00      	nop

08007588 <kalman_height_estimation_get_height>:

err_code_t kalman_height_estimation_get_height(kalman_height_estimation_handle_t handle, float *height)
{
 8007588:	b590      	push	{r4, r7, lr}
 800758a:	b0a3      	sub	sp, #140	@ 0x8c
 800758c:	af20      	add	r7, sp, #128	@ 0x80
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
	/* Check if handle structure is NULL */
	if (handle == NULL)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d102      	bne.n	800759e <kalman_height_estimation_get_height+0x16>
	{
		return ERR_CODE_NULL_PTR;
 8007598:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800759c:	e016      	b.n	80075cc <kalman_height_estimation_get_height+0x44>
	}

	*height = CLinearAlgebra_Matrix_GetValue(handle->X, 0, 0);
 800759e:	687c      	ldr	r4, [r7, #4]
 80075a0:	2300      	movs	r3, #0
 80075a2:	931e      	str	r3, [sp, #120]	@ 0x78
 80075a4:	2300      	movs	r3, #0
 80075a6:	931d      	str	r3, [sp, #116]	@ 0x74
 80075a8:	4668      	mov	r0, sp
 80075aa:	f504 732a 	add.w	r3, r4, #680	@ 0x2a8
 80075ae:	2274      	movs	r2, #116	@ 0x74
 80075b0:	4619      	mov	r1, r3
 80075b2:	f000 fee6 	bl	8008382 <memcpy>
 80075b6:	f504 7326 	add.w	r3, r4, #664	@ 0x298
 80075ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80075bc:	f7f9 fe55 	bl	800126a <CLinearAlgebra_Matrix_GetValue>
 80075c0:	eef0 7a40 	vmov.f32	s15, s0
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	edc3 7a00 	vstr	s15, [r3]

	return ERR_CODE_SUCCESS;
 80075ca:	2300      	movs	r3, #0
 80075cc:	4618      	mov	r0, r3
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd90      	pop	{r4, r7, pc}

080075d4 <calloc>:
 80075d4:	4b02      	ldr	r3, [pc, #8]	@ (80075e0 <calloc+0xc>)
 80075d6:	460a      	mov	r2, r1
 80075d8:	4601      	mov	r1, r0
 80075da:	6818      	ldr	r0, [r3, #0]
 80075dc:	f000 b802 	b.w	80075e4 <_calloc_r>
 80075e0:	20000018 	.word	0x20000018

080075e4 <_calloc_r>:
 80075e4:	b570      	push	{r4, r5, r6, lr}
 80075e6:	fba1 5402 	umull	r5, r4, r1, r2
 80075ea:	b934      	cbnz	r4, 80075fa <_calloc_r+0x16>
 80075ec:	4629      	mov	r1, r5
 80075ee:	f000 f82f 	bl	8007650 <_malloc_r>
 80075f2:	4606      	mov	r6, r0
 80075f4:	b928      	cbnz	r0, 8007602 <_calloc_r+0x1e>
 80075f6:	4630      	mov	r0, r6
 80075f8:	bd70      	pop	{r4, r5, r6, pc}
 80075fa:	220c      	movs	r2, #12
 80075fc:	6002      	str	r2, [r0, #0]
 80075fe:	2600      	movs	r6, #0
 8007600:	e7f9      	b.n	80075f6 <_calloc_r+0x12>
 8007602:	462a      	mov	r2, r5
 8007604:	4621      	mov	r1, r4
 8007606:	f000 fe2c 	bl	8008262 <memset>
 800760a:	e7f4      	b.n	80075f6 <_calloc_r+0x12>

0800760c <sbrk_aligned>:
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	4e0f      	ldr	r6, [pc, #60]	@ (800764c <sbrk_aligned+0x40>)
 8007610:	460c      	mov	r4, r1
 8007612:	6831      	ldr	r1, [r6, #0]
 8007614:	4605      	mov	r5, r0
 8007616:	b911      	cbnz	r1, 800761e <sbrk_aligned+0x12>
 8007618:	f000 fe64 	bl	80082e4 <_sbrk_r>
 800761c:	6030      	str	r0, [r6, #0]
 800761e:	4621      	mov	r1, r4
 8007620:	4628      	mov	r0, r5
 8007622:	f000 fe5f 	bl	80082e4 <_sbrk_r>
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	d103      	bne.n	8007632 <sbrk_aligned+0x26>
 800762a:	f04f 34ff 	mov.w	r4, #4294967295
 800762e:	4620      	mov	r0, r4
 8007630:	bd70      	pop	{r4, r5, r6, pc}
 8007632:	1cc4      	adds	r4, r0, #3
 8007634:	f024 0403 	bic.w	r4, r4, #3
 8007638:	42a0      	cmp	r0, r4
 800763a:	d0f8      	beq.n	800762e <sbrk_aligned+0x22>
 800763c:	1a21      	subs	r1, r4, r0
 800763e:	4628      	mov	r0, r5
 8007640:	f000 fe50 	bl	80082e4 <_sbrk_r>
 8007644:	3001      	adds	r0, #1
 8007646:	d1f2      	bne.n	800762e <sbrk_aligned+0x22>
 8007648:	e7ef      	b.n	800762a <sbrk_aligned+0x1e>
 800764a:	bf00      	nop
 800764c:	2000035c 	.word	0x2000035c

08007650 <_malloc_r>:
 8007650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007654:	1ccd      	adds	r5, r1, #3
 8007656:	f025 0503 	bic.w	r5, r5, #3
 800765a:	3508      	adds	r5, #8
 800765c:	2d0c      	cmp	r5, #12
 800765e:	bf38      	it	cc
 8007660:	250c      	movcc	r5, #12
 8007662:	2d00      	cmp	r5, #0
 8007664:	4606      	mov	r6, r0
 8007666:	db01      	blt.n	800766c <_malloc_r+0x1c>
 8007668:	42a9      	cmp	r1, r5
 800766a:	d904      	bls.n	8007676 <_malloc_r+0x26>
 800766c:	230c      	movs	r3, #12
 800766e:	6033      	str	r3, [r6, #0]
 8007670:	2000      	movs	r0, #0
 8007672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007676:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800774c <_malloc_r+0xfc>
 800767a:	f000 f869 	bl	8007750 <__malloc_lock>
 800767e:	f8d8 3000 	ldr.w	r3, [r8]
 8007682:	461c      	mov	r4, r3
 8007684:	bb44      	cbnz	r4, 80076d8 <_malloc_r+0x88>
 8007686:	4629      	mov	r1, r5
 8007688:	4630      	mov	r0, r6
 800768a:	f7ff ffbf 	bl	800760c <sbrk_aligned>
 800768e:	1c43      	adds	r3, r0, #1
 8007690:	4604      	mov	r4, r0
 8007692:	d158      	bne.n	8007746 <_malloc_r+0xf6>
 8007694:	f8d8 4000 	ldr.w	r4, [r8]
 8007698:	4627      	mov	r7, r4
 800769a:	2f00      	cmp	r7, #0
 800769c:	d143      	bne.n	8007726 <_malloc_r+0xd6>
 800769e:	2c00      	cmp	r4, #0
 80076a0:	d04b      	beq.n	800773a <_malloc_r+0xea>
 80076a2:	6823      	ldr	r3, [r4, #0]
 80076a4:	4639      	mov	r1, r7
 80076a6:	4630      	mov	r0, r6
 80076a8:	eb04 0903 	add.w	r9, r4, r3
 80076ac:	f000 fe1a 	bl	80082e4 <_sbrk_r>
 80076b0:	4581      	cmp	r9, r0
 80076b2:	d142      	bne.n	800773a <_malloc_r+0xea>
 80076b4:	6821      	ldr	r1, [r4, #0]
 80076b6:	1a6d      	subs	r5, r5, r1
 80076b8:	4629      	mov	r1, r5
 80076ba:	4630      	mov	r0, r6
 80076bc:	f7ff ffa6 	bl	800760c <sbrk_aligned>
 80076c0:	3001      	adds	r0, #1
 80076c2:	d03a      	beq.n	800773a <_malloc_r+0xea>
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	442b      	add	r3, r5
 80076c8:	6023      	str	r3, [r4, #0]
 80076ca:	f8d8 3000 	ldr.w	r3, [r8]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	bb62      	cbnz	r2, 800772c <_malloc_r+0xdc>
 80076d2:	f8c8 7000 	str.w	r7, [r8]
 80076d6:	e00f      	b.n	80076f8 <_malloc_r+0xa8>
 80076d8:	6822      	ldr	r2, [r4, #0]
 80076da:	1b52      	subs	r2, r2, r5
 80076dc:	d420      	bmi.n	8007720 <_malloc_r+0xd0>
 80076de:	2a0b      	cmp	r2, #11
 80076e0:	d917      	bls.n	8007712 <_malloc_r+0xc2>
 80076e2:	1961      	adds	r1, r4, r5
 80076e4:	42a3      	cmp	r3, r4
 80076e6:	6025      	str	r5, [r4, #0]
 80076e8:	bf18      	it	ne
 80076ea:	6059      	strne	r1, [r3, #4]
 80076ec:	6863      	ldr	r3, [r4, #4]
 80076ee:	bf08      	it	eq
 80076f0:	f8c8 1000 	streq.w	r1, [r8]
 80076f4:	5162      	str	r2, [r4, r5]
 80076f6:	604b      	str	r3, [r1, #4]
 80076f8:	4630      	mov	r0, r6
 80076fa:	f000 f82f 	bl	800775c <__malloc_unlock>
 80076fe:	f104 000b 	add.w	r0, r4, #11
 8007702:	1d23      	adds	r3, r4, #4
 8007704:	f020 0007 	bic.w	r0, r0, #7
 8007708:	1ac2      	subs	r2, r0, r3
 800770a:	bf1c      	itt	ne
 800770c:	1a1b      	subne	r3, r3, r0
 800770e:	50a3      	strne	r3, [r4, r2]
 8007710:	e7af      	b.n	8007672 <_malloc_r+0x22>
 8007712:	6862      	ldr	r2, [r4, #4]
 8007714:	42a3      	cmp	r3, r4
 8007716:	bf0c      	ite	eq
 8007718:	f8c8 2000 	streq.w	r2, [r8]
 800771c:	605a      	strne	r2, [r3, #4]
 800771e:	e7eb      	b.n	80076f8 <_malloc_r+0xa8>
 8007720:	4623      	mov	r3, r4
 8007722:	6864      	ldr	r4, [r4, #4]
 8007724:	e7ae      	b.n	8007684 <_malloc_r+0x34>
 8007726:	463c      	mov	r4, r7
 8007728:	687f      	ldr	r7, [r7, #4]
 800772a:	e7b6      	b.n	800769a <_malloc_r+0x4a>
 800772c:	461a      	mov	r2, r3
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	42a3      	cmp	r3, r4
 8007732:	d1fb      	bne.n	800772c <_malloc_r+0xdc>
 8007734:	2300      	movs	r3, #0
 8007736:	6053      	str	r3, [r2, #4]
 8007738:	e7de      	b.n	80076f8 <_malloc_r+0xa8>
 800773a:	230c      	movs	r3, #12
 800773c:	6033      	str	r3, [r6, #0]
 800773e:	4630      	mov	r0, r6
 8007740:	f000 f80c 	bl	800775c <__malloc_unlock>
 8007744:	e794      	b.n	8007670 <_malloc_r+0x20>
 8007746:	6005      	str	r5, [r0, #0]
 8007748:	e7d6      	b.n	80076f8 <_malloc_r+0xa8>
 800774a:	bf00      	nop
 800774c:	20000360 	.word	0x20000360

08007750 <__malloc_lock>:
 8007750:	4801      	ldr	r0, [pc, #4]	@ (8007758 <__malloc_lock+0x8>)
 8007752:	f000 be14 	b.w	800837e <__retarget_lock_acquire_recursive>
 8007756:	bf00      	nop
 8007758:	200004a4 	.word	0x200004a4

0800775c <__malloc_unlock>:
 800775c:	4801      	ldr	r0, [pc, #4]	@ (8007764 <__malloc_unlock+0x8>)
 800775e:	f000 be0f 	b.w	8008380 <__retarget_lock_release_recursive>
 8007762:	bf00      	nop
 8007764:	200004a4 	.word	0x200004a4

08007768 <__cvt>:
 8007768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800776c:	ec57 6b10 	vmov	r6, r7, d0
 8007770:	2f00      	cmp	r7, #0
 8007772:	460c      	mov	r4, r1
 8007774:	4619      	mov	r1, r3
 8007776:	463b      	mov	r3, r7
 8007778:	bfbb      	ittet	lt
 800777a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800777e:	461f      	movlt	r7, r3
 8007780:	2300      	movge	r3, #0
 8007782:	232d      	movlt	r3, #45	@ 0x2d
 8007784:	700b      	strb	r3, [r1, #0]
 8007786:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007788:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800778c:	4691      	mov	r9, r2
 800778e:	f023 0820 	bic.w	r8, r3, #32
 8007792:	bfbc      	itt	lt
 8007794:	4632      	movlt	r2, r6
 8007796:	4616      	movlt	r6, r2
 8007798:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800779c:	d005      	beq.n	80077aa <__cvt+0x42>
 800779e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80077a2:	d100      	bne.n	80077a6 <__cvt+0x3e>
 80077a4:	3401      	adds	r4, #1
 80077a6:	2102      	movs	r1, #2
 80077a8:	e000      	b.n	80077ac <__cvt+0x44>
 80077aa:	2103      	movs	r1, #3
 80077ac:	ab03      	add	r3, sp, #12
 80077ae:	9301      	str	r3, [sp, #4]
 80077b0:	ab02      	add	r3, sp, #8
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	ec47 6b10 	vmov	d0, r6, r7
 80077b8:	4653      	mov	r3, sl
 80077ba:	4622      	mov	r2, r4
 80077bc:	f000 fe78 	bl	80084b0 <_dtoa_r>
 80077c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80077c4:	4605      	mov	r5, r0
 80077c6:	d119      	bne.n	80077fc <__cvt+0x94>
 80077c8:	f019 0f01 	tst.w	r9, #1
 80077cc:	d00e      	beq.n	80077ec <__cvt+0x84>
 80077ce:	eb00 0904 	add.w	r9, r0, r4
 80077d2:	2200      	movs	r2, #0
 80077d4:	2300      	movs	r3, #0
 80077d6:	4630      	mov	r0, r6
 80077d8:	4639      	mov	r1, r7
 80077da:	f7f9 f975 	bl	8000ac8 <__aeabi_dcmpeq>
 80077de:	b108      	cbz	r0, 80077e4 <__cvt+0x7c>
 80077e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80077e4:	2230      	movs	r2, #48	@ 0x30
 80077e6:	9b03      	ldr	r3, [sp, #12]
 80077e8:	454b      	cmp	r3, r9
 80077ea:	d31e      	bcc.n	800782a <__cvt+0xc2>
 80077ec:	9b03      	ldr	r3, [sp, #12]
 80077ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077f0:	1b5b      	subs	r3, r3, r5
 80077f2:	4628      	mov	r0, r5
 80077f4:	6013      	str	r3, [r2, #0]
 80077f6:	b004      	add	sp, #16
 80077f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007800:	eb00 0904 	add.w	r9, r0, r4
 8007804:	d1e5      	bne.n	80077d2 <__cvt+0x6a>
 8007806:	7803      	ldrb	r3, [r0, #0]
 8007808:	2b30      	cmp	r3, #48	@ 0x30
 800780a:	d10a      	bne.n	8007822 <__cvt+0xba>
 800780c:	2200      	movs	r2, #0
 800780e:	2300      	movs	r3, #0
 8007810:	4630      	mov	r0, r6
 8007812:	4639      	mov	r1, r7
 8007814:	f7f9 f958 	bl	8000ac8 <__aeabi_dcmpeq>
 8007818:	b918      	cbnz	r0, 8007822 <__cvt+0xba>
 800781a:	f1c4 0401 	rsb	r4, r4, #1
 800781e:	f8ca 4000 	str.w	r4, [sl]
 8007822:	f8da 3000 	ldr.w	r3, [sl]
 8007826:	4499      	add	r9, r3
 8007828:	e7d3      	b.n	80077d2 <__cvt+0x6a>
 800782a:	1c59      	adds	r1, r3, #1
 800782c:	9103      	str	r1, [sp, #12]
 800782e:	701a      	strb	r2, [r3, #0]
 8007830:	e7d9      	b.n	80077e6 <__cvt+0x7e>

08007832 <__exponent>:
 8007832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007834:	2900      	cmp	r1, #0
 8007836:	bfba      	itte	lt
 8007838:	4249      	neglt	r1, r1
 800783a:	232d      	movlt	r3, #45	@ 0x2d
 800783c:	232b      	movge	r3, #43	@ 0x2b
 800783e:	2909      	cmp	r1, #9
 8007840:	7002      	strb	r2, [r0, #0]
 8007842:	7043      	strb	r3, [r0, #1]
 8007844:	dd29      	ble.n	800789a <__exponent+0x68>
 8007846:	f10d 0307 	add.w	r3, sp, #7
 800784a:	461d      	mov	r5, r3
 800784c:	270a      	movs	r7, #10
 800784e:	461a      	mov	r2, r3
 8007850:	fbb1 f6f7 	udiv	r6, r1, r7
 8007854:	fb07 1416 	mls	r4, r7, r6, r1
 8007858:	3430      	adds	r4, #48	@ 0x30
 800785a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800785e:	460c      	mov	r4, r1
 8007860:	2c63      	cmp	r4, #99	@ 0x63
 8007862:	f103 33ff 	add.w	r3, r3, #4294967295
 8007866:	4631      	mov	r1, r6
 8007868:	dcf1      	bgt.n	800784e <__exponent+0x1c>
 800786a:	3130      	adds	r1, #48	@ 0x30
 800786c:	1e94      	subs	r4, r2, #2
 800786e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007872:	1c41      	adds	r1, r0, #1
 8007874:	4623      	mov	r3, r4
 8007876:	42ab      	cmp	r3, r5
 8007878:	d30a      	bcc.n	8007890 <__exponent+0x5e>
 800787a:	f10d 0309 	add.w	r3, sp, #9
 800787e:	1a9b      	subs	r3, r3, r2
 8007880:	42ac      	cmp	r4, r5
 8007882:	bf88      	it	hi
 8007884:	2300      	movhi	r3, #0
 8007886:	3302      	adds	r3, #2
 8007888:	4403      	add	r3, r0
 800788a:	1a18      	subs	r0, r3, r0
 800788c:	b003      	add	sp, #12
 800788e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007890:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007894:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007898:	e7ed      	b.n	8007876 <__exponent+0x44>
 800789a:	2330      	movs	r3, #48	@ 0x30
 800789c:	3130      	adds	r1, #48	@ 0x30
 800789e:	7083      	strb	r3, [r0, #2]
 80078a0:	70c1      	strb	r1, [r0, #3]
 80078a2:	1d03      	adds	r3, r0, #4
 80078a4:	e7f1      	b.n	800788a <__exponent+0x58>
	...

080078a8 <_printf_float>:
 80078a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ac:	b08d      	sub	sp, #52	@ 0x34
 80078ae:	460c      	mov	r4, r1
 80078b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80078b4:	4616      	mov	r6, r2
 80078b6:	461f      	mov	r7, r3
 80078b8:	4605      	mov	r5, r0
 80078ba:	f000 fcdb 	bl	8008274 <_localeconv_r>
 80078be:	6803      	ldr	r3, [r0, #0]
 80078c0:	9304      	str	r3, [sp, #16]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7f8 fcd4 	bl	8000270 <strlen>
 80078c8:	2300      	movs	r3, #0
 80078ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80078cc:	f8d8 3000 	ldr.w	r3, [r8]
 80078d0:	9005      	str	r0, [sp, #20]
 80078d2:	3307      	adds	r3, #7
 80078d4:	f023 0307 	bic.w	r3, r3, #7
 80078d8:	f103 0208 	add.w	r2, r3, #8
 80078dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80078e0:	f8d4 b000 	ldr.w	fp, [r4]
 80078e4:	f8c8 2000 	str.w	r2, [r8]
 80078e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80078f0:	9307      	str	r3, [sp, #28]
 80078f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80078f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80078fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078fe:	4b9c      	ldr	r3, [pc, #624]	@ (8007b70 <_printf_float+0x2c8>)
 8007900:	f04f 32ff 	mov.w	r2, #4294967295
 8007904:	f7f9 f912 	bl	8000b2c <__aeabi_dcmpun>
 8007908:	bb70      	cbnz	r0, 8007968 <_printf_float+0xc0>
 800790a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800790e:	4b98      	ldr	r3, [pc, #608]	@ (8007b70 <_printf_float+0x2c8>)
 8007910:	f04f 32ff 	mov.w	r2, #4294967295
 8007914:	f7f9 f8ec 	bl	8000af0 <__aeabi_dcmple>
 8007918:	bb30      	cbnz	r0, 8007968 <_printf_float+0xc0>
 800791a:	2200      	movs	r2, #0
 800791c:	2300      	movs	r3, #0
 800791e:	4640      	mov	r0, r8
 8007920:	4649      	mov	r1, r9
 8007922:	f7f9 f8db 	bl	8000adc <__aeabi_dcmplt>
 8007926:	b110      	cbz	r0, 800792e <_printf_float+0x86>
 8007928:	232d      	movs	r3, #45	@ 0x2d
 800792a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800792e:	4a91      	ldr	r2, [pc, #580]	@ (8007b74 <_printf_float+0x2cc>)
 8007930:	4b91      	ldr	r3, [pc, #580]	@ (8007b78 <_printf_float+0x2d0>)
 8007932:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007936:	bf8c      	ite	hi
 8007938:	4690      	movhi	r8, r2
 800793a:	4698      	movls	r8, r3
 800793c:	2303      	movs	r3, #3
 800793e:	6123      	str	r3, [r4, #16]
 8007940:	f02b 0304 	bic.w	r3, fp, #4
 8007944:	6023      	str	r3, [r4, #0]
 8007946:	f04f 0900 	mov.w	r9, #0
 800794a:	9700      	str	r7, [sp, #0]
 800794c:	4633      	mov	r3, r6
 800794e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007950:	4621      	mov	r1, r4
 8007952:	4628      	mov	r0, r5
 8007954:	f000 f9d2 	bl	8007cfc <_printf_common>
 8007958:	3001      	adds	r0, #1
 800795a:	f040 808d 	bne.w	8007a78 <_printf_float+0x1d0>
 800795e:	f04f 30ff 	mov.w	r0, #4294967295
 8007962:	b00d      	add	sp, #52	@ 0x34
 8007964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007968:	4642      	mov	r2, r8
 800796a:	464b      	mov	r3, r9
 800796c:	4640      	mov	r0, r8
 800796e:	4649      	mov	r1, r9
 8007970:	f7f9 f8dc 	bl	8000b2c <__aeabi_dcmpun>
 8007974:	b140      	cbz	r0, 8007988 <_printf_float+0xe0>
 8007976:	464b      	mov	r3, r9
 8007978:	2b00      	cmp	r3, #0
 800797a:	bfbc      	itt	lt
 800797c:	232d      	movlt	r3, #45	@ 0x2d
 800797e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007982:	4a7e      	ldr	r2, [pc, #504]	@ (8007b7c <_printf_float+0x2d4>)
 8007984:	4b7e      	ldr	r3, [pc, #504]	@ (8007b80 <_printf_float+0x2d8>)
 8007986:	e7d4      	b.n	8007932 <_printf_float+0x8a>
 8007988:	6863      	ldr	r3, [r4, #4]
 800798a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800798e:	9206      	str	r2, [sp, #24]
 8007990:	1c5a      	adds	r2, r3, #1
 8007992:	d13b      	bne.n	8007a0c <_printf_float+0x164>
 8007994:	2306      	movs	r3, #6
 8007996:	6063      	str	r3, [r4, #4]
 8007998:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800799c:	2300      	movs	r3, #0
 800799e:	6022      	str	r2, [r4, #0]
 80079a0:	9303      	str	r3, [sp, #12]
 80079a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80079a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80079a8:	ab09      	add	r3, sp, #36	@ 0x24
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	6861      	ldr	r1, [r4, #4]
 80079ae:	ec49 8b10 	vmov	d0, r8, r9
 80079b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80079b6:	4628      	mov	r0, r5
 80079b8:	f7ff fed6 	bl	8007768 <__cvt>
 80079bc:	9b06      	ldr	r3, [sp, #24]
 80079be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80079c0:	2b47      	cmp	r3, #71	@ 0x47
 80079c2:	4680      	mov	r8, r0
 80079c4:	d129      	bne.n	8007a1a <_printf_float+0x172>
 80079c6:	1cc8      	adds	r0, r1, #3
 80079c8:	db02      	blt.n	80079d0 <_printf_float+0x128>
 80079ca:	6863      	ldr	r3, [r4, #4]
 80079cc:	4299      	cmp	r1, r3
 80079ce:	dd41      	ble.n	8007a54 <_printf_float+0x1ac>
 80079d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80079d4:	fa5f fa8a 	uxtb.w	sl, sl
 80079d8:	3901      	subs	r1, #1
 80079da:	4652      	mov	r2, sl
 80079dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80079e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80079e2:	f7ff ff26 	bl	8007832 <__exponent>
 80079e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079e8:	1813      	adds	r3, r2, r0
 80079ea:	2a01      	cmp	r2, #1
 80079ec:	4681      	mov	r9, r0
 80079ee:	6123      	str	r3, [r4, #16]
 80079f0:	dc02      	bgt.n	80079f8 <_printf_float+0x150>
 80079f2:	6822      	ldr	r2, [r4, #0]
 80079f4:	07d2      	lsls	r2, r2, #31
 80079f6:	d501      	bpl.n	80079fc <_printf_float+0x154>
 80079f8:	3301      	adds	r3, #1
 80079fa:	6123      	str	r3, [r4, #16]
 80079fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d0a2      	beq.n	800794a <_printf_float+0xa2>
 8007a04:	232d      	movs	r3, #45	@ 0x2d
 8007a06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a0a:	e79e      	b.n	800794a <_printf_float+0xa2>
 8007a0c:	9a06      	ldr	r2, [sp, #24]
 8007a0e:	2a47      	cmp	r2, #71	@ 0x47
 8007a10:	d1c2      	bne.n	8007998 <_printf_float+0xf0>
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1c0      	bne.n	8007998 <_printf_float+0xf0>
 8007a16:	2301      	movs	r3, #1
 8007a18:	e7bd      	b.n	8007996 <_printf_float+0xee>
 8007a1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a1e:	d9db      	bls.n	80079d8 <_printf_float+0x130>
 8007a20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007a24:	d118      	bne.n	8007a58 <_printf_float+0x1b0>
 8007a26:	2900      	cmp	r1, #0
 8007a28:	6863      	ldr	r3, [r4, #4]
 8007a2a:	dd0b      	ble.n	8007a44 <_printf_float+0x19c>
 8007a2c:	6121      	str	r1, [r4, #16]
 8007a2e:	b913      	cbnz	r3, 8007a36 <_printf_float+0x18e>
 8007a30:	6822      	ldr	r2, [r4, #0]
 8007a32:	07d0      	lsls	r0, r2, #31
 8007a34:	d502      	bpl.n	8007a3c <_printf_float+0x194>
 8007a36:	3301      	adds	r3, #1
 8007a38:	440b      	add	r3, r1
 8007a3a:	6123      	str	r3, [r4, #16]
 8007a3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007a3e:	f04f 0900 	mov.w	r9, #0
 8007a42:	e7db      	b.n	80079fc <_printf_float+0x154>
 8007a44:	b913      	cbnz	r3, 8007a4c <_printf_float+0x1a4>
 8007a46:	6822      	ldr	r2, [r4, #0]
 8007a48:	07d2      	lsls	r2, r2, #31
 8007a4a:	d501      	bpl.n	8007a50 <_printf_float+0x1a8>
 8007a4c:	3302      	adds	r3, #2
 8007a4e:	e7f4      	b.n	8007a3a <_printf_float+0x192>
 8007a50:	2301      	movs	r3, #1
 8007a52:	e7f2      	b.n	8007a3a <_printf_float+0x192>
 8007a54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a5a:	4299      	cmp	r1, r3
 8007a5c:	db05      	blt.n	8007a6a <_printf_float+0x1c2>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	6121      	str	r1, [r4, #16]
 8007a62:	07d8      	lsls	r0, r3, #31
 8007a64:	d5ea      	bpl.n	8007a3c <_printf_float+0x194>
 8007a66:	1c4b      	adds	r3, r1, #1
 8007a68:	e7e7      	b.n	8007a3a <_printf_float+0x192>
 8007a6a:	2900      	cmp	r1, #0
 8007a6c:	bfd4      	ite	le
 8007a6e:	f1c1 0202 	rsble	r2, r1, #2
 8007a72:	2201      	movgt	r2, #1
 8007a74:	4413      	add	r3, r2
 8007a76:	e7e0      	b.n	8007a3a <_printf_float+0x192>
 8007a78:	6823      	ldr	r3, [r4, #0]
 8007a7a:	055a      	lsls	r2, r3, #21
 8007a7c:	d407      	bmi.n	8007a8e <_printf_float+0x1e6>
 8007a7e:	6923      	ldr	r3, [r4, #16]
 8007a80:	4642      	mov	r2, r8
 8007a82:	4631      	mov	r1, r6
 8007a84:	4628      	mov	r0, r5
 8007a86:	47b8      	blx	r7
 8007a88:	3001      	adds	r0, #1
 8007a8a:	d12b      	bne.n	8007ae4 <_printf_float+0x23c>
 8007a8c:	e767      	b.n	800795e <_printf_float+0xb6>
 8007a8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a92:	f240 80dd 	bls.w	8007c50 <_printf_float+0x3a8>
 8007a96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	f7f9 f813 	bl	8000ac8 <__aeabi_dcmpeq>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d033      	beq.n	8007b0e <_printf_float+0x266>
 8007aa6:	4a37      	ldr	r2, [pc, #220]	@ (8007b84 <_printf_float+0x2dc>)
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	4631      	mov	r1, r6
 8007aac:	4628      	mov	r0, r5
 8007aae:	47b8      	blx	r7
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	f43f af54 	beq.w	800795e <_printf_float+0xb6>
 8007ab6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007aba:	4543      	cmp	r3, r8
 8007abc:	db02      	blt.n	8007ac4 <_printf_float+0x21c>
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	07d8      	lsls	r0, r3, #31
 8007ac2:	d50f      	bpl.n	8007ae4 <_printf_float+0x23c>
 8007ac4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ac8:	4631      	mov	r1, r6
 8007aca:	4628      	mov	r0, r5
 8007acc:	47b8      	blx	r7
 8007ace:	3001      	adds	r0, #1
 8007ad0:	f43f af45 	beq.w	800795e <_printf_float+0xb6>
 8007ad4:	f04f 0900 	mov.w	r9, #0
 8007ad8:	f108 38ff 	add.w	r8, r8, #4294967295
 8007adc:	f104 0a1a 	add.w	sl, r4, #26
 8007ae0:	45c8      	cmp	r8, r9
 8007ae2:	dc09      	bgt.n	8007af8 <_printf_float+0x250>
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	079b      	lsls	r3, r3, #30
 8007ae8:	f100 8103 	bmi.w	8007cf2 <_printf_float+0x44a>
 8007aec:	68e0      	ldr	r0, [r4, #12]
 8007aee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007af0:	4298      	cmp	r0, r3
 8007af2:	bfb8      	it	lt
 8007af4:	4618      	movlt	r0, r3
 8007af6:	e734      	b.n	8007962 <_printf_float+0xba>
 8007af8:	2301      	movs	r3, #1
 8007afa:	4652      	mov	r2, sl
 8007afc:	4631      	mov	r1, r6
 8007afe:	4628      	mov	r0, r5
 8007b00:	47b8      	blx	r7
 8007b02:	3001      	adds	r0, #1
 8007b04:	f43f af2b 	beq.w	800795e <_printf_float+0xb6>
 8007b08:	f109 0901 	add.w	r9, r9, #1
 8007b0c:	e7e8      	b.n	8007ae0 <_printf_float+0x238>
 8007b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	dc39      	bgt.n	8007b88 <_printf_float+0x2e0>
 8007b14:	4a1b      	ldr	r2, [pc, #108]	@ (8007b84 <_printf_float+0x2dc>)
 8007b16:	2301      	movs	r3, #1
 8007b18:	4631      	mov	r1, r6
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	47b8      	blx	r7
 8007b1e:	3001      	adds	r0, #1
 8007b20:	f43f af1d 	beq.w	800795e <_printf_float+0xb6>
 8007b24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007b28:	ea59 0303 	orrs.w	r3, r9, r3
 8007b2c:	d102      	bne.n	8007b34 <_printf_float+0x28c>
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	07d9      	lsls	r1, r3, #31
 8007b32:	d5d7      	bpl.n	8007ae4 <_printf_float+0x23c>
 8007b34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b38:	4631      	mov	r1, r6
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	47b8      	blx	r7
 8007b3e:	3001      	adds	r0, #1
 8007b40:	f43f af0d 	beq.w	800795e <_printf_float+0xb6>
 8007b44:	f04f 0a00 	mov.w	sl, #0
 8007b48:	f104 0b1a 	add.w	fp, r4, #26
 8007b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b4e:	425b      	negs	r3, r3
 8007b50:	4553      	cmp	r3, sl
 8007b52:	dc01      	bgt.n	8007b58 <_printf_float+0x2b0>
 8007b54:	464b      	mov	r3, r9
 8007b56:	e793      	b.n	8007a80 <_printf_float+0x1d8>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	465a      	mov	r2, fp
 8007b5c:	4631      	mov	r1, r6
 8007b5e:	4628      	mov	r0, r5
 8007b60:	47b8      	blx	r7
 8007b62:	3001      	adds	r0, #1
 8007b64:	f43f aefb 	beq.w	800795e <_printf_float+0xb6>
 8007b68:	f10a 0a01 	add.w	sl, sl, #1
 8007b6c:	e7ee      	b.n	8007b4c <_printf_float+0x2a4>
 8007b6e:	bf00      	nop
 8007b70:	7fefffff 	.word	0x7fefffff
 8007b74:	0800b174 	.word	0x0800b174
 8007b78:	0800b170 	.word	0x0800b170
 8007b7c:	0800b17c 	.word	0x0800b17c
 8007b80:	0800b178 	.word	0x0800b178
 8007b84:	0800b180 	.word	0x0800b180
 8007b88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b8a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b8e:	4553      	cmp	r3, sl
 8007b90:	bfa8      	it	ge
 8007b92:	4653      	movge	r3, sl
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	4699      	mov	r9, r3
 8007b98:	dc36      	bgt.n	8007c08 <_printf_float+0x360>
 8007b9a:	f04f 0b00 	mov.w	fp, #0
 8007b9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ba2:	f104 021a 	add.w	r2, r4, #26
 8007ba6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ba8:	9306      	str	r3, [sp, #24]
 8007baa:	eba3 0309 	sub.w	r3, r3, r9
 8007bae:	455b      	cmp	r3, fp
 8007bb0:	dc31      	bgt.n	8007c16 <_printf_float+0x36e>
 8007bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb4:	459a      	cmp	sl, r3
 8007bb6:	dc3a      	bgt.n	8007c2e <_printf_float+0x386>
 8007bb8:	6823      	ldr	r3, [r4, #0]
 8007bba:	07da      	lsls	r2, r3, #31
 8007bbc:	d437      	bmi.n	8007c2e <_printf_float+0x386>
 8007bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bc0:	ebaa 0903 	sub.w	r9, sl, r3
 8007bc4:	9b06      	ldr	r3, [sp, #24]
 8007bc6:	ebaa 0303 	sub.w	r3, sl, r3
 8007bca:	4599      	cmp	r9, r3
 8007bcc:	bfa8      	it	ge
 8007bce:	4699      	movge	r9, r3
 8007bd0:	f1b9 0f00 	cmp.w	r9, #0
 8007bd4:	dc33      	bgt.n	8007c3e <_printf_float+0x396>
 8007bd6:	f04f 0800 	mov.w	r8, #0
 8007bda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bde:	f104 0b1a 	add.w	fp, r4, #26
 8007be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007be4:	ebaa 0303 	sub.w	r3, sl, r3
 8007be8:	eba3 0309 	sub.w	r3, r3, r9
 8007bec:	4543      	cmp	r3, r8
 8007bee:	f77f af79 	ble.w	8007ae4 <_printf_float+0x23c>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	465a      	mov	r2, fp
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	47b8      	blx	r7
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	f43f aeae 	beq.w	800795e <_printf_float+0xb6>
 8007c02:	f108 0801 	add.w	r8, r8, #1
 8007c06:	e7ec      	b.n	8007be2 <_printf_float+0x33a>
 8007c08:	4642      	mov	r2, r8
 8007c0a:	4631      	mov	r1, r6
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	47b8      	blx	r7
 8007c10:	3001      	adds	r0, #1
 8007c12:	d1c2      	bne.n	8007b9a <_printf_float+0x2f2>
 8007c14:	e6a3      	b.n	800795e <_printf_float+0xb6>
 8007c16:	2301      	movs	r3, #1
 8007c18:	4631      	mov	r1, r6
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	9206      	str	r2, [sp, #24]
 8007c1e:	47b8      	blx	r7
 8007c20:	3001      	adds	r0, #1
 8007c22:	f43f ae9c 	beq.w	800795e <_printf_float+0xb6>
 8007c26:	9a06      	ldr	r2, [sp, #24]
 8007c28:	f10b 0b01 	add.w	fp, fp, #1
 8007c2c:	e7bb      	b.n	8007ba6 <_printf_float+0x2fe>
 8007c2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c32:	4631      	mov	r1, r6
 8007c34:	4628      	mov	r0, r5
 8007c36:	47b8      	blx	r7
 8007c38:	3001      	adds	r0, #1
 8007c3a:	d1c0      	bne.n	8007bbe <_printf_float+0x316>
 8007c3c:	e68f      	b.n	800795e <_printf_float+0xb6>
 8007c3e:	9a06      	ldr	r2, [sp, #24]
 8007c40:	464b      	mov	r3, r9
 8007c42:	4442      	add	r2, r8
 8007c44:	4631      	mov	r1, r6
 8007c46:	4628      	mov	r0, r5
 8007c48:	47b8      	blx	r7
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	d1c3      	bne.n	8007bd6 <_printf_float+0x32e>
 8007c4e:	e686      	b.n	800795e <_printf_float+0xb6>
 8007c50:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c54:	f1ba 0f01 	cmp.w	sl, #1
 8007c58:	dc01      	bgt.n	8007c5e <_printf_float+0x3b6>
 8007c5a:	07db      	lsls	r3, r3, #31
 8007c5c:	d536      	bpl.n	8007ccc <_printf_float+0x424>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	4642      	mov	r2, r8
 8007c62:	4631      	mov	r1, r6
 8007c64:	4628      	mov	r0, r5
 8007c66:	47b8      	blx	r7
 8007c68:	3001      	adds	r0, #1
 8007c6a:	f43f ae78 	beq.w	800795e <_printf_float+0xb6>
 8007c6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c72:	4631      	mov	r1, r6
 8007c74:	4628      	mov	r0, r5
 8007c76:	47b8      	blx	r7
 8007c78:	3001      	adds	r0, #1
 8007c7a:	f43f ae70 	beq.w	800795e <_printf_float+0xb6>
 8007c7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c82:	2200      	movs	r2, #0
 8007c84:	2300      	movs	r3, #0
 8007c86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c8a:	f7f8 ff1d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c8e:	b9c0      	cbnz	r0, 8007cc2 <_printf_float+0x41a>
 8007c90:	4653      	mov	r3, sl
 8007c92:	f108 0201 	add.w	r2, r8, #1
 8007c96:	4631      	mov	r1, r6
 8007c98:	4628      	mov	r0, r5
 8007c9a:	47b8      	blx	r7
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	d10c      	bne.n	8007cba <_printf_float+0x412>
 8007ca0:	e65d      	b.n	800795e <_printf_float+0xb6>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	465a      	mov	r2, fp
 8007ca6:	4631      	mov	r1, r6
 8007ca8:	4628      	mov	r0, r5
 8007caa:	47b8      	blx	r7
 8007cac:	3001      	adds	r0, #1
 8007cae:	f43f ae56 	beq.w	800795e <_printf_float+0xb6>
 8007cb2:	f108 0801 	add.w	r8, r8, #1
 8007cb6:	45d0      	cmp	r8, sl
 8007cb8:	dbf3      	blt.n	8007ca2 <_printf_float+0x3fa>
 8007cba:	464b      	mov	r3, r9
 8007cbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007cc0:	e6df      	b.n	8007a82 <_printf_float+0x1da>
 8007cc2:	f04f 0800 	mov.w	r8, #0
 8007cc6:	f104 0b1a 	add.w	fp, r4, #26
 8007cca:	e7f4      	b.n	8007cb6 <_printf_float+0x40e>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	4642      	mov	r2, r8
 8007cd0:	e7e1      	b.n	8007c96 <_printf_float+0x3ee>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	464a      	mov	r2, r9
 8007cd6:	4631      	mov	r1, r6
 8007cd8:	4628      	mov	r0, r5
 8007cda:	47b8      	blx	r7
 8007cdc:	3001      	adds	r0, #1
 8007cde:	f43f ae3e 	beq.w	800795e <_printf_float+0xb6>
 8007ce2:	f108 0801 	add.w	r8, r8, #1
 8007ce6:	68e3      	ldr	r3, [r4, #12]
 8007ce8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007cea:	1a5b      	subs	r3, r3, r1
 8007cec:	4543      	cmp	r3, r8
 8007cee:	dcf0      	bgt.n	8007cd2 <_printf_float+0x42a>
 8007cf0:	e6fc      	b.n	8007aec <_printf_float+0x244>
 8007cf2:	f04f 0800 	mov.w	r8, #0
 8007cf6:	f104 0919 	add.w	r9, r4, #25
 8007cfa:	e7f4      	b.n	8007ce6 <_printf_float+0x43e>

08007cfc <_printf_common>:
 8007cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d00:	4616      	mov	r6, r2
 8007d02:	4698      	mov	r8, r3
 8007d04:	688a      	ldr	r2, [r1, #8]
 8007d06:	690b      	ldr	r3, [r1, #16]
 8007d08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	bfb8      	it	lt
 8007d10:	4613      	movlt	r3, r2
 8007d12:	6033      	str	r3, [r6, #0]
 8007d14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d18:	4607      	mov	r7, r0
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	b10a      	cbz	r2, 8007d22 <_printf_common+0x26>
 8007d1e:	3301      	adds	r3, #1
 8007d20:	6033      	str	r3, [r6, #0]
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	0699      	lsls	r1, r3, #26
 8007d26:	bf42      	ittt	mi
 8007d28:	6833      	ldrmi	r3, [r6, #0]
 8007d2a:	3302      	addmi	r3, #2
 8007d2c:	6033      	strmi	r3, [r6, #0]
 8007d2e:	6825      	ldr	r5, [r4, #0]
 8007d30:	f015 0506 	ands.w	r5, r5, #6
 8007d34:	d106      	bne.n	8007d44 <_printf_common+0x48>
 8007d36:	f104 0a19 	add.w	sl, r4, #25
 8007d3a:	68e3      	ldr	r3, [r4, #12]
 8007d3c:	6832      	ldr	r2, [r6, #0]
 8007d3e:	1a9b      	subs	r3, r3, r2
 8007d40:	42ab      	cmp	r3, r5
 8007d42:	dc26      	bgt.n	8007d92 <_printf_common+0x96>
 8007d44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d48:	6822      	ldr	r2, [r4, #0]
 8007d4a:	3b00      	subs	r3, #0
 8007d4c:	bf18      	it	ne
 8007d4e:	2301      	movne	r3, #1
 8007d50:	0692      	lsls	r2, r2, #26
 8007d52:	d42b      	bmi.n	8007dac <_printf_common+0xb0>
 8007d54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d58:	4641      	mov	r1, r8
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	47c8      	blx	r9
 8007d5e:	3001      	adds	r0, #1
 8007d60:	d01e      	beq.n	8007da0 <_printf_common+0xa4>
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	6922      	ldr	r2, [r4, #16]
 8007d66:	f003 0306 	and.w	r3, r3, #6
 8007d6a:	2b04      	cmp	r3, #4
 8007d6c:	bf02      	ittt	eq
 8007d6e:	68e5      	ldreq	r5, [r4, #12]
 8007d70:	6833      	ldreq	r3, [r6, #0]
 8007d72:	1aed      	subeq	r5, r5, r3
 8007d74:	68a3      	ldr	r3, [r4, #8]
 8007d76:	bf0c      	ite	eq
 8007d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d7c:	2500      	movne	r5, #0
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	bfc4      	itt	gt
 8007d82:	1a9b      	subgt	r3, r3, r2
 8007d84:	18ed      	addgt	r5, r5, r3
 8007d86:	2600      	movs	r6, #0
 8007d88:	341a      	adds	r4, #26
 8007d8a:	42b5      	cmp	r5, r6
 8007d8c:	d11a      	bne.n	8007dc4 <_printf_common+0xc8>
 8007d8e:	2000      	movs	r0, #0
 8007d90:	e008      	b.n	8007da4 <_printf_common+0xa8>
 8007d92:	2301      	movs	r3, #1
 8007d94:	4652      	mov	r2, sl
 8007d96:	4641      	mov	r1, r8
 8007d98:	4638      	mov	r0, r7
 8007d9a:	47c8      	blx	r9
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d103      	bne.n	8007da8 <_printf_common+0xac>
 8007da0:	f04f 30ff 	mov.w	r0, #4294967295
 8007da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da8:	3501      	adds	r5, #1
 8007daa:	e7c6      	b.n	8007d3a <_printf_common+0x3e>
 8007dac:	18e1      	adds	r1, r4, r3
 8007dae:	1c5a      	adds	r2, r3, #1
 8007db0:	2030      	movs	r0, #48	@ 0x30
 8007db2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007db6:	4422      	add	r2, r4
 8007db8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007dbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007dc0:	3302      	adds	r3, #2
 8007dc2:	e7c7      	b.n	8007d54 <_printf_common+0x58>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	4622      	mov	r2, r4
 8007dc8:	4641      	mov	r1, r8
 8007dca:	4638      	mov	r0, r7
 8007dcc:	47c8      	blx	r9
 8007dce:	3001      	adds	r0, #1
 8007dd0:	d0e6      	beq.n	8007da0 <_printf_common+0xa4>
 8007dd2:	3601      	adds	r6, #1
 8007dd4:	e7d9      	b.n	8007d8a <_printf_common+0x8e>
	...

08007dd8 <_printf_i>:
 8007dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ddc:	7e0f      	ldrb	r7, [r1, #24]
 8007dde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007de0:	2f78      	cmp	r7, #120	@ 0x78
 8007de2:	4691      	mov	r9, r2
 8007de4:	4680      	mov	r8, r0
 8007de6:	460c      	mov	r4, r1
 8007de8:	469a      	mov	sl, r3
 8007dea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007dee:	d807      	bhi.n	8007e00 <_printf_i+0x28>
 8007df0:	2f62      	cmp	r7, #98	@ 0x62
 8007df2:	d80a      	bhi.n	8007e0a <_printf_i+0x32>
 8007df4:	2f00      	cmp	r7, #0
 8007df6:	f000 80d1 	beq.w	8007f9c <_printf_i+0x1c4>
 8007dfa:	2f58      	cmp	r7, #88	@ 0x58
 8007dfc:	f000 80b8 	beq.w	8007f70 <_printf_i+0x198>
 8007e00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e08:	e03a      	b.n	8007e80 <_printf_i+0xa8>
 8007e0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e0e:	2b15      	cmp	r3, #21
 8007e10:	d8f6      	bhi.n	8007e00 <_printf_i+0x28>
 8007e12:	a101      	add	r1, pc, #4	@ (adr r1, 8007e18 <_printf_i+0x40>)
 8007e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e18:	08007e71 	.word	0x08007e71
 8007e1c:	08007e85 	.word	0x08007e85
 8007e20:	08007e01 	.word	0x08007e01
 8007e24:	08007e01 	.word	0x08007e01
 8007e28:	08007e01 	.word	0x08007e01
 8007e2c:	08007e01 	.word	0x08007e01
 8007e30:	08007e85 	.word	0x08007e85
 8007e34:	08007e01 	.word	0x08007e01
 8007e38:	08007e01 	.word	0x08007e01
 8007e3c:	08007e01 	.word	0x08007e01
 8007e40:	08007e01 	.word	0x08007e01
 8007e44:	08007f83 	.word	0x08007f83
 8007e48:	08007eaf 	.word	0x08007eaf
 8007e4c:	08007f3d 	.word	0x08007f3d
 8007e50:	08007e01 	.word	0x08007e01
 8007e54:	08007e01 	.word	0x08007e01
 8007e58:	08007fa5 	.word	0x08007fa5
 8007e5c:	08007e01 	.word	0x08007e01
 8007e60:	08007eaf 	.word	0x08007eaf
 8007e64:	08007e01 	.word	0x08007e01
 8007e68:	08007e01 	.word	0x08007e01
 8007e6c:	08007f45 	.word	0x08007f45
 8007e70:	6833      	ldr	r3, [r6, #0]
 8007e72:	1d1a      	adds	r2, r3, #4
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6032      	str	r2, [r6, #0]
 8007e78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e80:	2301      	movs	r3, #1
 8007e82:	e09c      	b.n	8007fbe <_printf_i+0x1e6>
 8007e84:	6833      	ldr	r3, [r6, #0]
 8007e86:	6820      	ldr	r0, [r4, #0]
 8007e88:	1d19      	adds	r1, r3, #4
 8007e8a:	6031      	str	r1, [r6, #0]
 8007e8c:	0606      	lsls	r6, r0, #24
 8007e8e:	d501      	bpl.n	8007e94 <_printf_i+0xbc>
 8007e90:	681d      	ldr	r5, [r3, #0]
 8007e92:	e003      	b.n	8007e9c <_printf_i+0xc4>
 8007e94:	0645      	lsls	r5, r0, #25
 8007e96:	d5fb      	bpl.n	8007e90 <_printf_i+0xb8>
 8007e98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e9c:	2d00      	cmp	r5, #0
 8007e9e:	da03      	bge.n	8007ea8 <_printf_i+0xd0>
 8007ea0:	232d      	movs	r3, #45	@ 0x2d
 8007ea2:	426d      	negs	r5, r5
 8007ea4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ea8:	4858      	ldr	r0, [pc, #352]	@ (800800c <_printf_i+0x234>)
 8007eaa:	230a      	movs	r3, #10
 8007eac:	e011      	b.n	8007ed2 <_printf_i+0xfa>
 8007eae:	6821      	ldr	r1, [r4, #0]
 8007eb0:	6833      	ldr	r3, [r6, #0]
 8007eb2:	0608      	lsls	r0, r1, #24
 8007eb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007eb8:	d402      	bmi.n	8007ec0 <_printf_i+0xe8>
 8007eba:	0649      	lsls	r1, r1, #25
 8007ebc:	bf48      	it	mi
 8007ebe:	b2ad      	uxthmi	r5, r5
 8007ec0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007ec2:	4852      	ldr	r0, [pc, #328]	@ (800800c <_printf_i+0x234>)
 8007ec4:	6033      	str	r3, [r6, #0]
 8007ec6:	bf14      	ite	ne
 8007ec8:	230a      	movne	r3, #10
 8007eca:	2308      	moveq	r3, #8
 8007ecc:	2100      	movs	r1, #0
 8007ece:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ed2:	6866      	ldr	r6, [r4, #4]
 8007ed4:	60a6      	str	r6, [r4, #8]
 8007ed6:	2e00      	cmp	r6, #0
 8007ed8:	db05      	blt.n	8007ee6 <_printf_i+0x10e>
 8007eda:	6821      	ldr	r1, [r4, #0]
 8007edc:	432e      	orrs	r6, r5
 8007ede:	f021 0104 	bic.w	r1, r1, #4
 8007ee2:	6021      	str	r1, [r4, #0]
 8007ee4:	d04b      	beq.n	8007f7e <_printf_i+0x1a6>
 8007ee6:	4616      	mov	r6, r2
 8007ee8:	fbb5 f1f3 	udiv	r1, r5, r3
 8007eec:	fb03 5711 	mls	r7, r3, r1, r5
 8007ef0:	5dc7      	ldrb	r7, [r0, r7]
 8007ef2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ef6:	462f      	mov	r7, r5
 8007ef8:	42bb      	cmp	r3, r7
 8007efa:	460d      	mov	r5, r1
 8007efc:	d9f4      	bls.n	8007ee8 <_printf_i+0x110>
 8007efe:	2b08      	cmp	r3, #8
 8007f00:	d10b      	bne.n	8007f1a <_printf_i+0x142>
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	07df      	lsls	r7, r3, #31
 8007f06:	d508      	bpl.n	8007f1a <_printf_i+0x142>
 8007f08:	6923      	ldr	r3, [r4, #16]
 8007f0a:	6861      	ldr	r1, [r4, #4]
 8007f0c:	4299      	cmp	r1, r3
 8007f0e:	bfde      	ittt	le
 8007f10:	2330      	movle	r3, #48	@ 0x30
 8007f12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f1a:	1b92      	subs	r2, r2, r6
 8007f1c:	6122      	str	r2, [r4, #16]
 8007f1e:	f8cd a000 	str.w	sl, [sp]
 8007f22:	464b      	mov	r3, r9
 8007f24:	aa03      	add	r2, sp, #12
 8007f26:	4621      	mov	r1, r4
 8007f28:	4640      	mov	r0, r8
 8007f2a:	f7ff fee7 	bl	8007cfc <_printf_common>
 8007f2e:	3001      	adds	r0, #1
 8007f30:	d14a      	bne.n	8007fc8 <_printf_i+0x1f0>
 8007f32:	f04f 30ff 	mov.w	r0, #4294967295
 8007f36:	b004      	add	sp, #16
 8007f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	f043 0320 	orr.w	r3, r3, #32
 8007f42:	6023      	str	r3, [r4, #0]
 8007f44:	4832      	ldr	r0, [pc, #200]	@ (8008010 <_printf_i+0x238>)
 8007f46:	2778      	movs	r7, #120	@ 0x78
 8007f48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	6831      	ldr	r1, [r6, #0]
 8007f50:	061f      	lsls	r7, r3, #24
 8007f52:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f56:	d402      	bmi.n	8007f5e <_printf_i+0x186>
 8007f58:	065f      	lsls	r7, r3, #25
 8007f5a:	bf48      	it	mi
 8007f5c:	b2ad      	uxthmi	r5, r5
 8007f5e:	6031      	str	r1, [r6, #0]
 8007f60:	07d9      	lsls	r1, r3, #31
 8007f62:	bf44      	itt	mi
 8007f64:	f043 0320 	orrmi.w	r3, r3, #32
 8007f68:	6023      	strmi	r3, [r4, #0]
 8007f6a:	b11d      	cbz	r5, 8007f74 <_printf_i+0x19c>
 8007f6c:	2310      	movs	r3, #16
 8007f6e:	e7ad      	b.n	8007ecc <_printf_i+0xf4>
 8007f70:	4826      	ldr	r0, [pc, #152]	@ (800800c <_printf_i+0x234>)
 8007f72:	e7e9      	b.n	8007f48 <_printf_i+0x170>
 8007f74:	6823      	ldr	r3, [r4, #0]
 8007f76:	f023 0320 	bic.w	r3, r3, #32
 8007f7a:	6023      	str	r3, [r4, #0]
 8007f7c:	e7f6      	b.n	8007f6c <_printf_i+0x194>
 8007f7e:	4616      	mov	r6, r2
 8007f80:	e7bd      	b.n	8007efe <_printf_i+0x126>
 8007f82:	6833      	ldr	r3, [r6, #0]
 8007f84:	6825      	ldr	r5, [r4, #0]
 8007f86:	6961      	ldr	r1, [r4, #20]
 8007f88:	1d18      	adds	r0, r3, #4
 8007f8a:	6030      	str	r0, [r6, #0]
 8007f8c:	062e      	lsls	r6, r5, #24
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	d501      	bpl.n	8007f96 <_printf_i+0x1be>
 8007f92:	6019      	str	r1, [r3, #0]
 8007f94:	e002      	b.n	8007f9c <_printf_i+0x1c4>
 8007f96:	0668      	lsls	r0, r5, #25
 8007f98:	d5fb      	bpl.n	8007f92 <_printf_i+0x1ba>
 8007f9a:	8019      	strh	r1, [r3, #0]
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	6123      	str	r3, [r4, #16]
 8007fa0:	4616      	mov	r6, r2
 8007fa2:	e7bc      	b.n	8007f1e <_printf_i+0x146>
 8007fa4:	6833      	ldr	r3, [r6, #0]
 8007fa6:	1d1a      	adds	r2, r3, #4
 8007fa8:	6032      	str	r2, [r6, #0]
 8007faa:	681e      	ldr	r6, [r3, #0]
 8007fac:	6862      	ldr	r2, [r4, #4]
 8007fae:	2100      	movs	r1, #0
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f7f8 f90d 	bl	80001d0 <memchr>
 8007fb6:	b108      	cbz	r0, 8007fbc <_printf_i+0x1e4>
 8007fb8:	1b80      	subs	r0, r0, r6
 8007fba:	6060      	str	r0, [r4, #4]
 8007fbc:	6863      	ldr	r3, [r4, #4]
 8007fbe:	6123      	str	r3, [r4, #16]
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fc6:	e7aa      	b.n	8007f1e <_printf_i+0x146>
 8007fc8:	6923      	ldr	r3, [r4, #16]
 8007fca:	4632      	mov	r2, r6
 8007fcc:	4649      	mov	r1, r9
 8007fce:	4640      	mov	r0, r8
 8007fd0:	47d0      	blx	sl
 8007fd2:	3001      	adds	r0, #1
 8007fd4:	d0ad      	beq.n	8007f32 <_printf_i+0x15a>
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	079b      	lsls	r3, r3, #30
 8007fda:	d413      	bmi.n	8008004 <_printf_i+0x22c>
 8007fdc:	68e0      	ldr	r0, [r4, #12]
 8007fde:	9b03      	ldr	r3, [sp, #12]
 8007fe0:	4298      	cmp	r0, r3
 8007fe2:	bfb8      	it	lt
 8007fe4:	4618      	movlt	r0, r3
 8007fe6:	e7a6      	b.n	8007f36 <_printf_i+0x15e>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	4632      	mov	r2, r6
 8007fec:	4649      	mov	r1, r9
 8007fee:	4640      	mov	r0, r8
 8007ff0:	47d0      	blx	sl
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	d09d      	beq.n	8007f32 <_printf_i+0x15a>
 8007ff6:	3501      	adds	r5, #1
 8007ff8:	68e3      	ldr	r3, [r4, #12]
 8007ffa:	9903      	ldr	r1, [sp, #12]
 8007ffc:	1a5b      	subs	r3, r3, r1
 8007ffe:	42ab      	cmp	r3, r5
 8008000:	dcf2      	bgt.n	8007fe8 <_printf_i+0x210>
 8008002:	e7eb      	b.n	8007fdc <_printf_i+0x204>
 8008004:	2500      	movs	r5, #0
 8008006:	f104 0619 	add.w	r6, r4, #25
 800800a:	e7f5      	b.n	8007ff8 <_printf_i+0x220>
 800800c:	0800b182 	.word	0x0800b182
 8008010:	0800b193 	.word	0x0800b193

08008014 <std>:
 8008014:	2300      	movs	r3, #0
 8008016:	b510      	push	{r4, lr}
 8008018:	4604      	mov	r4, r0
 800801a:	e9c0 3300 	strd	r3, r3, [r0]
 800801e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008022:	6083      	str	r3, [r0, #8]
 8008024:	8181      	strh	r1, [r0, #12]
 8008026:	6643      	str	r3, [r0, #100]	@ 0x64
 8008028:	81c2      	strh	r2, [r0, #14]
 800802a:	6183      	str	r3, [r0, #24]
 800802c:	4619      	mov	r1, r3
 800802e:	2208      	movs	r2, #8
 8008030:	305c      	adds	r0, #92	@ 0x5c
 8008032:	f000 f916 	bl	8008262 <memset>
 8008036:	4b0d      	ldr	r3, [pc, #52]	@ (800806c <std+0x58>)
 8008038:	6263      	str	r3, [r4, #36]	@ 0x24
 800803a:	4b0d      	ldr	r3, [pc, #52]	@ (8008070 <std+0x5c>)
 800803c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800803e:	4b0d      	ldr	r3, [pc, #52]	@ (8008074 <std+0x60>)
 8008040:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008042:	4b0d      	ldr	r3, [pc, #52]	@ (8008078 <std+0x64>)
 8008044:	6323      	str	r3, [r4, #48]	@ 0x30
 8008046:	4b0d      	ldr	r3, [pc, #52]	@ (800807c <std+0x68>)
 8008048:	6224      	str	r4, [r4, #32]
 800804a:	429c      	cmp	r4, r3
 800804c:	d006      	beq.n	800805c <std+0x48>
 800804e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008052:	4294      	cmp	r4, r2
 8008054:	d002      	beq.n	800805c <std+0x48>
 8008056:	33d0      	adds	r3, #208	@ 0xd0
 8008058:	429c      	cmp	r4, r3
 800805a:	d105      	bne.n	8008068 <std+0x54>
 800805c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008064:	f000 b98a 	b.w	800837c <__retarget_lock_init_recursive>
 8008068:	bd10      	pop	{r4, pc}
 800806a:	bf00      	nop
 800806c:	080081dd 	.word	0x080081dd
 8008070:	080081ff 	.word	0x080081ff
 8008074:	08008237 	.word	0x08008237
 8008078:	0800825b 	.word	0x0800825b
 800807c:	20000364 	.word	0x20000364

08008080 <stdio_exit_handler>:
 8008080:	4a02      	ldr	r2, [pc, #8]	@ (800808c <stdio_exit_handler+0xc>)
 8008082:	4903      	ldr	r1, [pc, #12]	@ (8008090 <stdio_exit_handler+0x10>)
 8008084:	4803      	ldr	r0, [pc, #12]	@ (8008094 <stdio_exit_handler+0x14>)
 8008086:	f000 b869 	b.w	800815c <_fwalk_sglue>
 800808a:	bf00      	nop
 800808c:	2000000c 	.word	0x2000000c
 8008090:	08009ba1 	.word	0x08009ba1
 8008094:	2000001c 	.word	0x2000001c

08008098 <cleanup_stdio>:
 8008098:	6841      	ldr	r1, [r0, #4]
 800809a:	4b0c      	ldr	r3, [pc, #48]	@ (80080cc <cleanup_stdio+0x34>)
 800809c:	4299      	cmp	r1, r3
 800809e:	b510      	push	{r4, lr}
 80080a0:	4604      	mov	r4, r0
 80080a2:	d001      	beq.n	80080a8 <cleanup_stdio+0x10>
 80080a4:	f001 fd7c 	bl	8009ba0 <_fflush_r>
 80080a8:	68a1      	ldr	r1, [r4, #8]
 80080aa:	4b09      	ldr	r3, [pc, #36]	@ (80080d0 <cleanup_stdio+0x38>)
 80080ac:	4299      	cmp	r1, r3
 80080ae:	d002      	beq.n	80080b6 <cleanup_stdio+0x1e>
 80080b0:	4620      	mov	r0, r4
 80080b2:	f001 fd75 	bl	8009ba0 <_fflush_r>
 80080b6:	68e1      	ldr	r1, [r4, #12]
 80080b8:	4b06      	ldr	r3, [pc, #24]	@ (80080d4 <cleanup_stdio+0x3c>)
 80080ba:	4299      	cmp	r1, r3
 80080bc:	d004      	beq.n	80080c8 <cleanup_stdio+0x30>
 80080be:	4620      	mov	r0, r4
 80080c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080c4:	f001 bd6c 	b.w	8009ba0 <_fflush_r>
 80080c8:	bd10      	pop	{r4, pc}
 80080ca:	bf00      	nop
 80080cc:	20000364 	.word	0x20000364
 80080d0:	200003cc 	.word	0x200003cc
 80080d4:	20000434 	.word	0x20000434

080080d8 <global_stdio_init.part.0>:
 80080d8:	b510      	push	{r4, lr}
 80080da:	4b0b      	ldr	r3, [pc, #44]	@ (8008108 <global_stdio_init.part.0+0x30>)
 80080dc:	4c0b      	ldr	r4, [pc, #44]	@ (800810c <global_stdio_init.part.0+0x34>)
 80080de:	4a0c      	ldr	r2, [pc, #48]	@ (8008110 <global_stdio_init.part.0+0x38>)
 80080e0:	601a      	str	r2, [r3, #0]
 80080e2:	4620      	mov	r0, r4
 80080e4:	2200      	movs	r2, #0
 80080e6:	2104      	movs	r1, #4
 80080e8:	f7ff ff94 	bl	8008014 <std>
 80080ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80080f0:	2201      	movs	r2, #1
 80080f2:	2109      	movs	r1, #9
 80080f4:	f7ff ff8e 	bl	8008014 <std>
 80080f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80080fc:	2202      	movs	r2, #2
 80080fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008102:	2112      	movs	r1, #18
 8008104:	f7ff bf86 	b.w	8008014 <std>
 8008108:	2000049c 	.word	0x2000049c
 800810c:	20000364 	.word	0x20000364
 8008110:	08008081 	.word	0x08008081

08008114 <__sfp_lock_acquire>:
 8008114:	4801      	ldr	r0, [pc, #4]	@ (800811c <__sfp_lock_acquire+0x8>)
 8008116:	f000 b932 	b.w	800837e <__retarget_lock_acquire_recursive>
 800811a:	bf00      	nop
 800811c:	200004a5 	.word	0x200004a5

08008120 <__sfp_lock_release>:
 8008120:	4801      	ldr	r0, [pc, #4]	@ (8008128 <__sfp_lock_release+0x8>)
 8008122:	f000 b92d 	b.w	8008380 <__retarget_lock_release_recursive>
 8008126:	bf00      	nop
 8008128:	200004a5 	.word	0x200004a5

0800812c <__sinit>:
 800812c:	b510      	push	{r4, lr}
 800812e:	4604      	mov	r4, r0
 8008130:	f7ff fff0 	bl	8008114 <__sfp_lock_acquire>
 8008134:	6a23      	ldr	r3, [r4, #32]
 8008136:	b11b      	cbz	r3, 8008140 <__sinit+0x14>
 8008138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800813c:	f7ff bff0 	b.w	8008120 <__sfp_lock_release>
 8008140:	4b04      	ldr	r3, [pc, #16]	@ (8008154 <__sinit+0x28>)
 8008142:	6223      	str	r3, [r4, #32]
 8008144:	4b04      	ldr	r3, [pc, #16]	@ (8008158 <__sinit+0x2c>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1f5      	bne.n	8008138 <__sinit+0xc>
 800814c:	f7ff ffc4 	bl	80080d8 <global_stdio_init.part.0>
 8008150:	e7f2      	b.n	8008138 <__sinit+0xc>
 8008152:	bf00      	nop
 8008154:	08008099 	.word	0x08008099
 8008158:	2000049c 	.word	0x2000049c

0800815c <_fwalk_sglue>:
 800815c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008160:	4607      	mov	r7, r0
 8008162:	4688      	mov	r8, r1
 8008164:	4614      	mov	r4, r2
 8008166:	2600      	movs	r6, #0
 8008168:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800816c:	f1b9 0901 	subs.w	r9, r9, #1
 8008170:	d505      	bpl.n	800817e <_fwalk_sglue+0x22>
 8008172:	6824      	ldr	r4, [r4, #0]
 8008174:	2c00      	cmp	r4, #0
 8008176:	d1f7      	bne.n	8008168 <_fwalk_sglue+0xc>
 8008178:	4630      	mov	r0, r6
 800817a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800817e:	89ab      	ldrh	r3, [r5, #12]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d907      	bls.n	8008194 <_fwalk_sglue+0x38>
 8008184:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008188:	3301      	adds	r3, #1
 800818a:	d003      	beq.n	8008194 <_fwalk_sglue+0x38>
 800818c:	4629      	mov	r1, r5
 800818e:	4638      	mov	r0, r7
 8008190:	47c0      	blx	r8
 8008192:	4306      	orrs	r6, r0
 8008194:	3568      	adds	r5, #104	@ 0x68
 8008196:	e7e9      	b.n	800816c <_fwalk_sglue+0x10>

08008198 <siprintf>:
 8008198:	b40e      	push	{r1, r2, r3}
 800819a:	b510      	push	{r4, lr}
 800819c:	b09d      	sub	sp, #116	@ 0x74
 800819e:	ab1f      	add	r3, sp, #124	@ 0x7c
 80081a0:	9002      	str	r0, [sp, #8]
 80081a2:	9006      	str	r0, [sp, #24]
 80081a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80081a8:	480a      	ldr	r0, [pc, #40]	@ (80081d4 <siprintf+0x3c>)
 80081aa:	9107      	str	r1, [sp, #28]
 80081ac:	9104      	str	r1, [sp, #16]
 80081ae:	490a      	ldr	r1, [pc, #40]	@ (80081d8 <siprintf+0x40>)
 80081b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80081b4:	9105      	str	r1, [sp, #20]
 80081b6:	2400      	movs	r4, #0
 80081b8:	a902      	add	r1, sp, #8
 80081ba:	6800      	ldr	r0, [r0, #0]
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80081c0:	f001 fb6e 	bl	80098a0 <_svfiprintf_r>
 80081c4:	9b02      	ldr	r3, [sp, #8]
 80081c6:	701c      	strb	r4, [r3, #0]
 80081c8:	b01d      	add	sp, #116	@ 0x74
 80081ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081ce:	b003      	add	sp, #12
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	20000018 	.word	0x20000018
 80081d8:	ffff0208 	.word	0xffff0208

080081dc <__sread>:
 80081dc:	b510      	push	{r4, lr}
 80081de:	460c      	mov	r4, r1
 80081e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e4:	f000 f86c 	bl	80082c0 <_read_r>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	bfab      	itete	ge
 80081ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80081ee:	89a3      	ldrhlt	r3, [r4, #12]
 80081f0:	181b      	addge	r3, r3, r0
 80081f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80081f6:	bfac      	ite	ge
 80081f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80081fa:	81a3      	strhlt	r3, [r4, #12]
 80081fc:	bd10      	pop	{r4, pc}

080081fe <__swrite>:
 80081fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008202:	461f      	mov	r7, r3
 8008204:	898b      	ldrh	r3, [r1, #12]
 8008206:	05db      	lsls	r3, r3, #23
 8008208:	4605      	mov	r5, r0
 800820a:	460c      	mov	r4, r1
 800820c:	4616      	mov	r6, r2
 800820e:	d505      	bpl.n	800821c <__swrite+0x1e>
 8008210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008214:	2302      	movs	r3, #2
 8008216:	2200      	movs	r2, #0
 8008218:	f000 f840 	bl	800829c <_lseek_r>
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008222:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008226:	81a3      	strh	r3, [r4, #12]
 8008228:	4632      	mov	r2, r6
 800822a:	463b      	mov	r3, r7
 800822c:	4628      	mov	r0, r5
 800822e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008232:	f000 b867 	b.w	8008304 <_write_r>

08008236 <__sseek>:
 8008236:	b510      	push	{r4, lr}
 8008238:	460c      	mov	r4, r1
 800823a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800823e:	f000 f82d 	bl	800829c <_lseek_r>
 8008242:	1c43      	adds	r3, r0, #1
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	bf15      	itete	ne
 8008248:	6560      	strne	r0, [r4, #84]	@ 0x54
 800824a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800824e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008252:	81a3      	strheq	r3, [r4, #12]
 8008254:	bf18      	it	ne
 8008256:	81a3      	strhne	r3, [r4, #12]
 8008258:	bd10      	pop	{r4, pc}

0800825a <__sclose>:
 800825a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800825e:	f000 b80d 	b.w	800827c <_close_r>

08008262 <memset>:
 8008262:	4402      	add	r2, r0
 8008264:	4603      	mov	r3, r0
 8008266:	4293      	cmp	r3, r2
 8008268:	d100      	bne.n	800826c <memset+0xa>
 800826a:	4770      	bx	lr
 800826c:	f803 1b01 	strb.w	r1, [r3], #1
 8008270:	e7f9      	b.n	8008266 <memset+0x4>
	...

08008274 <_localeconv_r>:
 8008274:	4800      	ldr	r0, [pc, #0]	@ (8008278 <_localeconv_r+0x4>)
 8008276:	4770      	bx	lr
 8008278:	20000158 	.word	0x20000158

0800827c <_close_r>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	4d06      	ldr	r5, [pc, #24]	@ (8008298 <_close_r+0x1c>)
 8008280:	2300      	movs	r3, #0
 8008282:	4604      	mov	r4, r0
 8008284:	4608      	mov	r0, r1
 8008286:	602b      	str	r3, [r5, #0]
 8008288:	f7fa f931 	bl	80024ee <_close>
 800828c:	1c43      	adds	r3, r0, #1
 800828e:	d102      	bne.n	8008296 <_close_r+0x1a>
 8008290:	682b      	ldr	r3, [r5, #0]
 8008292:	b103      	cbz	r3, 8008296 <_close_r+0x1a>
 8008294:	6023      	str	r3, [r4, #0]
 8008296:	bd38      	pop	{r3, r4, r5, pc}
 8008298:	200004a0 	.word	0x200004a0

0800829c <_lseek_r>:
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	4d07      	ldr	r5, [pc, #28]	@ (80082bc <_lseek_r+0x20>)
 80082a0:	4604      	mov	r4, r0
 80082a2:	4608      	mov	r0, r1
 80082a4:	4611      	mov	r1, r2
 80082a6:	2200      	movs	r2, #0
 80082a8:	602a      	str	r2, [r5, #0]
 80082aa:	461a      	mov	r2, r3
 80082ac:	f7fa f946 	bl	800253c <_lseek>
 80082b0:	1c43      	adds	r3, r0, #1
 80082b2:	d102      	bne.n	80082ba <_lseek_r+0x1e>
 80082b4:	682b      	ldr	r3, [r5, #0]
 80082b6:	b103      	cbz	r3, 80082ba <_lseek_r+0x1e>
 80082b8:	6023      	str	r3, [r4, #0]
 80082ba:	bd38      	pop	{r3, r4, r5, pc}
 80082bc:	200004a0 	.word	0x200004a0

080082c0 <_read_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4d07      	ldr	r5, [pc, #28]	@ (80082e0 <_read_r+0x20>)
 80082c4:	4604      	mov	r4, r0
 80082c6:	4608      	mov	r0, r1
 80082c8:	4611      	mov	r1, r2
 80082ca:	2200      	movs	r2, #0
 80082cc:	602a      	str	r2, [r5, #0]
 80082ce:	461a      	mov	r2, r3
 80082d0:	f7fa f8d4 	bl	800247c <_read>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d102      	bne.n	80082de <_read_r+0x1e>
 80082d8:	682b      	ldr	r3, [r5, #0]
 80082da:	b103      	cbz	r3, 80082de <_read_r+0x1e>
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	bd38      	pop	{r3, r4, r5, pc}
 80082e0:	200004a0 	.word	0x200004a0

080082e4 <_sbrk_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	4d06      	ldr	r5, [pc, #24]	@ (8008300 <_sbrk_r+0x1c>)
 80082e8:	2300      	movs	r3, #0
 80082ea:	4604      	mov	r4, r0
 80082ec:	4608      	mov	r0, r1
 80082ee:	602b      	str	r3, [r5, #0]
 80082f0:	f7fa f932 	bl	8002558 <_sbrk>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d102      	bne.n	80082fe <_sbrk_r+0x1a>
 80082f8:	682b      	ldr	r3, [r5, #0]
 80082fa:	b103      	cbz	r3, 80082fe <_sbrk_r+0x1a>
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	200004a0 	.word	0x200004a0

08008304 <_write_r>:
 8008304:	b538      	push	{r3, r4, r5, lr}
 8008306:	4d07      	ldr	r5, [pc, #28]	@ (8008324 <_write_r+0x20>)
 8008308:	4604      	mov	r4, r0
 800830a:	4608      	mov	r0, r1
 800830c:	4611      	mov	r1, r2
 800830e:	2200      	movs	r2, #0
 8008310:	602a      	str	r2, [r5, #0]
 8008312:	461a      	mov	r2, r3
 8008314:	f7fa f8cf 	bl	80024b6 <_write>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d102      	bne.n	8008322 <_write_r+0x1e>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	b103      	cbz	r3, 8008322 <_write_r+0x1e>
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	bd38      	pop	{r3, r4, r5, pc}
 8008324:	200004a0 	.word	0x200004a0

08008328 <__errno>:
 8008328:	4b01      	ldr	r3, [pc, #4]	@ (8008330 <__errno+0x8>)
 800832a:	6818      	ldr	r0, [r3, #0]
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	20000018 	.word	0x20000018

08008334 <__libc_init_array>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	4d0d      	ldr	r5, [pc, #52]	@ (800836c <__libc_init_array+0x38>)
 8008338:	4c0d      	ldr	r4, [pc, #52]	@ (8008370 <__libc_init_array+0x3c>)
 800833a:	1b64      	subs	r4, r4, r5
 800833c:	10a4      	asrs	r4, r4, #2
 800833e:	2600      	movs	r6, #0
 8008340:	42a6      	cmp	r6, r4
 8008342:	d109      	bne.n	8008358 <__libc_init_array+0x24>
 8008344:	4d0b      	ldr	r5, [pc, #44]	@ (8008374 <__libc_init_array+0x40>)
 8008346:	4c0c      	ldr	r4, [pc, #48]	@ (8008378 <__libc_init_array+0x44>)
 8008348:	f002 fef4 	bl	800b134 <_init>
 800834c:	1b64      	subs	r4, r4, r5
 800834e:	10a4      	asrs	r4, r4, #2
 8008350:	2600      	movs	r6, #0
 8008352:	42a6      	cmp	r6, r4
 8008354:	d105      	bne.n	8008362 <__libc_init_array+0x2e>
 8008356:	bd70      	pop	{r4, r5, r6, pc}
 8008358:	f855 3b04 	ldr.w	r3, [r5], #4
 800835c:	4798      	blx	r3
 800835e:	3601      	adds	r6, #1
 8008360:	e7ee      	b.n	8008340 <__libc_init_array+0xc>
 8008362:	f855 3b04 	ldr.w	r3, [r5], #4
 8008366:	4798      	blx	r3
 8008368:	3601      	adds	r6, #1
 800836a:	e7f2      	b.n	8008352 <__libc_init_array+0x1e>
 800836c:	0800b530 	.word	0x0800b530
 8008370:	0800b530 	.word	0x0800b530
 8008374:	0800b530 	.word	0x0800b530
 8008378:	0800b534 	.word	0x0800b534

0800837c <__retarget_lock_init_recursive>:
 800837c:	4770      	bx	lr

0800837e <__retarget_lock_acquire_recursive>:
 800837e:	4770      	bx	lr

08008380 <__retarget_lock_release_recursive>:
 8008380:	4770      	bx	lr

08008382 <memcpy>:
 8008382:	440a      	add	r2, r1
 8008384:	4291      	cmp	r1, r2
 8008386:	f100 33ff 	add.w	r3, r0, #4294967295
 800838a:	d100      	bne.n	800838e <memcpy+0xc>
 800838c:	4770      	bx	lr
 800838e:	b510      	push	{r4, lr}
 8008390:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008394:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008398:	4291      	cmp	r1, r2
 800839a:	d1f9      	bne.n	8008390 <memcpy+0xe>
 800839c:	bd10      	pop	{r4, pc}

0800839e <quorem>:
 800839e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a2:	6903      	ldr	r3, [r0, #16]
 80083a4:	690c      	ldr	r4, [r1, #16]
 80083a6:	42a3      	cmp	r3, r4
 80083a8:	4607      	mov	r7, r0
 80083aa:	db7e      	blt.n	80084aa <quorem+0x10c>
 80083ac:	3c01      	subs	r4, #1
 80083ae:	f101 0814 	add.w	r8, r1, #20
 80083b2:	00a3      	lsls	r3, r4, #2
 80083b4:	f100 0514 	add.w	r5, r0, #20
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083be:	9301      	str	r3, [sp, #4]
 80083c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80083c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083c8:	3301      	adds	r3, #1
 80083ca:	429a      	cmp	r2, r3
 80083cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80083d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80083d4:	d32e      	bcc.n	8008434 <quorem+0x96>
 80083d6:	f04f 0a00 	mov.w	sl, #0
 80083da:	46c4      	mov	ip, r8
 80083dc:	46ae      	mov	lr, r5
 80083de:	46d3      	mov	fp, sl
 80083e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80083e4:	b298      	uxth	r0, r3
 80083e6:	fb06 a000 	mla	r0, r6, r0, sl
 80083ea:	0c02      	lsrs	r2, r0, #16
 80083ec:	0c1b      	lsrs	r3, r3, #16
 80083ee:	fb06 2303 	mla	r3, r6, r3, r2
 80083f2:	f8de 2000 	ldr.w	r2, [lr]
 80083f6:	b280      	uxth	r0, r0
 80083f8:	b292      	uxth	r2, r2
 80083fa:	1a12      	subs	r2, r2, r0
 80083fc:	445a      	add	r2, fp
 80083fe:	f8de 0000 	ldr.w	r0, [lr]
 8008402:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008406:	b29b      	uxth	r3, r3
 8008408:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800840c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008410:	b292      	uxth	r2, r2
 8008412:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008416:	45e1      	cmp	r9, ip
 8008418:	f84e 2b04 	str.w	r2, [lr], #4
 800841c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008420:	d2de      	bcs.n	80083e0 <quorem+0x42>
 8008422:	9b00      	ldr	r3, [sp, #0]
 8008424:	58eb      	ldr	r3, [r5, r3]
 8008426:	b92b      	cbnz	r3, 8008434 <quorem+0x96>
 8008428:	9b01      	ldr	r3, [sp, #4]
 800842a:	3b04      	subs	r3, #4
 800842c:	429d      	cmp	r5, r3
 800842e:	461a      	mov	r2, r3
 8008430:	d32f      	bcc.n	8008492 <quorem+0xf4>
 8008432:	613c      	str	r4, [r7, #16]
 8008434:	4638      	mov	r0, r7
 8008436:	f001 f8cf 	bl	80095d8 <__mcmp>
 800843a:	2800      	cmp	r0, #0
 800843c:	db25      	blt.n	800848a <quorem+0xec>
 800843e:	4629      	mov	r1, r5
 8008440:	2000      	movs	r0, #0
 8008442:	f858 2b04 	ldr.w	r2, [r8], #4
 8008446:	f8d1 c000 	ldr.w	ip, [r1]
 800844a:	fa1f fe82 	uxth.w	lr, r2
 800844e:	fa1f f38c 	uxth.w	r3, ip
 8008452:	eba3 030e 	sub.w	r3, r3, lr
 8008456:	4403      	add	r3, r0
 8008458:	0c12      	lsrs	r2, r2, #16
 800845a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800845e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008462:	b29b      	uxth	r3, r3
 8008464:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008468:	45c1      	cmp	r9, r8
 800846a:	f841 3b04 	str.w	r3, [r1], #4
 800846e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008472:	d2e6      	bcs.n	8008442 <quorem+0xa4>
 8008474:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008478:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800847c:	b922      	cbnz	r2, 8008488 <quorem+0xea>
 800847e:	3b04      	subs	r3, #4
 8008480:	429d      	cmp	r5, r3
 8008482:	461a      	mov	r2, r3
 8008484:	d30b      	bcc.n	800849e <quorem+0x100>
 8008486:	613c      	str	r4, [r7, #16]
 8008488:	3601      	adds	r6, #1
 800848a:	4630      	mov	r0, r6
 800848c:	b003      	add	sp, #12
 800848e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008492:	6812      	ldr	r2, [r2, #0]
 8008494:	3b04      	subs	r3, #4
 8008496:	2a00      	cmp	r2, #0
 8008498:	d1cb      	bne.n	8008432 <quorem+0x94>
 800849a:	3c01      	subs	r4, #1
 800849c:	e7c6      	b.n	800842c <quorem+0x8e>
 800849e:	6812      	ldr	r2, [r2, #0]
 80084a0:	3b04      	subs	r3, #4
 80084a2:	2a00      	cmp	r2, #0
 80084a4:	d1ef      	bne.n	8008486 <quorem+0xe8>
 80084a6:	3c01      	subs	r4, #1
 80084a8:	e7ea      	b.n	8008480 <quorem+0xe2>
 80084aa:	2000      	movs	r0, #0
 80084ac:	e7ee      	b.n	800848c <quorem+0xee>
	...

080084b0 <_dtoa_r>:
 80084b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b4:	69c7      	ldr	r7, [r0, #28]
 80084b6:	b097      	sub	sp, #92	@ 0x5c
 80084b8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80084bc:	ec55 4b10 	vmov	r4, r5, d0
 80084c0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80084c2:	9107      	str	r1, [sp, #28]
 80084c4:	4681      	mov	r9, r0
 80084c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80084c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80084ca:	b97f      	cbnz	r7, 80084ec <_dtoa_r+0x3c>
 80084cc:	2010      	movs	r0, #16
 80084ce:	f000 fe09 	bl	80090e4 <malloc>
 80084d2:	4602      	mov	r2, r0
 80084d4:	f8c9 001c 	str.w	r0, [r9, #28]
 80084d8:	b920      	cbnz	r0, 80084e4 <_dtoa_r+0x34>
 80084da:	4ba9      	ldr	r3, [pc, #676]	@ (8008780 <_dtoa_r+0x2d0>)
 80084dc:	21ef      	movs	r1, #239	@ 0xef
 80084de:	48a9      	ldr	r0, [pc, #676]	@ (8008784 <_dtoa_r+0x2d4>)
 80084e0:	f001 fba0 	bl	8009c24 <__assert_func>
 80084e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80084e8:	6007      	str	r7, [r0, #0]
 80084ea:	60c7      	str	r7, [r0, #12]
 80084ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80084f0:	6819      	ldr	r1, [r3, #0]
 80084f2:	b159      	cbz	r1, 800850c <_dtoa_r+0x5c>
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	604a      	str	r2, [r1, #4]
 80084f8:	2301      	movs	r3, #1
 80084fa:	4093      	lsls	r3, r2
 80084fc:	608b      	str	r3, [r1, #8]
 80084fe:	4648      	mov	r0, r9
 8008500:	f000 fe38 	bl	8009174 <_Bfree>
 8008504:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008508:	2200      	movs	r2, #0
 800850a:	601a      	str	r2, [r3, #0]
 800850c:	1e2b      	subs	r3, r5, #0
 800850e:	bfb9      	ittee	lt
 8008510:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008514:	9305      	strlt	r3, [sp, #20]
 8008516:	2300      	movge	r3, #0
 8008518:	6033      	strge	r3, [r6, #0]
 800851a:	9f05      	ldr	r7, [sp, #20]
 800851c:	4b9a      	ldr	r3, [pc, #616]	@ (8008788 <_dtoa_r+0x2d8>)
 800851e:	bfbc      	itt	lt
 8008520:	2201      	movlt	r2, #1
 8008522:	6032      	strlt	r2, [r6, #0]
 8008524:	43bb      	bics	r3, r7
 8008526:	d112      	bne.n	800854e <_dtoa_r+0x9e>
 8008528:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800852a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008534:	4323      	orrs	r3, r4
 8008536:	f000 855a 	beq.w	8008fee <_dtoa_r+0xb3e>
 800853a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800853c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800879c <_dtoa_r+0x2ec>
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 855c 	beq.w	8008ffe <_dtoa_r+0xb4e>
 8008546:	f10a 0303 	add.w	r3, sl, #3
 800854a:	f000 bd56 	b.w	8008ffa <_dtoa_r+0xb4a>
 800854e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008552:	2200      	movs	r2, #0
 8008554:	ec51 0b17 	vmov	r0, r1, d7
 8008558:	2300      	movs	r3, #0
 800855a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800855e:	f7f8 fab3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008562:	4680      	mov	r8, r0
 8008564:	b158      	cbz	r0, 800857e <_dtoa_r+0xce>
 8008566:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008568:	2301      	movs	r3, #1
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800856e:	b113      	cbz	r3, 8008576 <_dtoa_r+0xc6>
 8008570:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008572:	4b86      	ldr	r3, [pc, #536]	@ (800878c <_dtoa_r+0x2dc>)
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80087a0 <_dtoa_r+0x2f0>
 800857a:	f000 bd40 	b.w	8008ffe <_dtoa_r+0xb4e>
 800857e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008582:	aa14      	add	r2, sp, #80	@ 0x50
 8008584:	a915      	add	r1, sp, #84	@ 0x54
 8008586:	4648      	mov	r0, r9
 8008588:	f001 f8d6 	bl	8009738 <__d2b>
 800858c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008590:	9002      	str	r0, [sp, #8]
 8008592:	2e00      	cmp	r6, #0
 8008594:	d078      	beq.n	8008688 <_dtoa_r+0x1d8>
 8008596:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008598:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800859c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80085a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80085a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80085ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80085b0:	4619      	mov	r1, r3
 80085b2:	2200      	movs	r2, #0
 80085b4:	4b76      	ldr	r3, [pc, #472]	@ (8008790 <_dtoa_r+0x2e0>)
 80085b6:	f7f7 fe67 	bl	8000288 <__aeabi_dsub>
 80085ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8008768 <_dtoa_r+0x2b8>)
 80085bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c0:	f7f8 f81a 	bl	80005f8 <__aeabi_dmul>
 80085c4:	a36a      	add	r3, pc, #424	@ (adr r3, 8008770 <_dtoa_r+0x2c0>)
 80085c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ca:	f7f7 fe5f 	bl	800028c <__adddf3>
 80085ce:	4604      	mov	r4, r0
 80085d0:	4630      	mov	r0, r6
 80085d2:	460d      	mov	r5, r1
 80085d4:	f7f7 ffa6 	bl	8000524 <__aeabi_i2d>
 80085d8:	a367      	add	r3, pc, #412	@ (adr r3, 8008778 <_dtoa_r+0x2c8>)
 80085da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085de:	f7f8 f80b 	bl	80005f8 <__aeabi_dmul>
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	4620      	mov	r0, r4
 80085e8:	4629      	mov	r1, r5
 80085ea:	f7f7 fe4f 	bl	800028c <__adddf3>
 80085ee:	4604      	mov	r4, r0
 80085f0:	460d      	mov	r5, r1
 80085f2:	f7f8 fab1 	bl	8000b58 <__aeabi_d2iz>
 80085f6:	2200      	movs	r2, #0
 80085f8:	4607      	mov	r7, r0
 80085fa:	2300      	movs	r3, #0
 80085fc:	4620      	mov	r0, r4
 80085fe:	4629      	mov	r1, r5
 8008600:	f7f8 fa6c 	bl	8000adc <__aeabi_dcmplt>
 8008604:	b140      	cbz	r0, 8008618 <_dtoa_r+0x168>
 8008606:	4638      	mov	r0, r7
 8008608:	f7f7 ff8c 	bl	8000524 <__aeabi_i2d>
 800860c:	4622      	mov	r2, r4
 800860e:	462b      	mov	r3, r5
 8008610:	f7f8 fa5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008614:	b900      	cbnz	r0, 8008618 <_dtoa_r+0x168>
 8008616:	3f01      	subs	r7, #1
 8008618:	2f16      	cmp	r7, #22
 800861a:	d852      	bhi.n	80086c2 <_dtoa_r+0x212>
 800861c:	4b5d      	ldr	r3, [pc, #372]	@ (8008794 <_dtoa_r+0x2e4>)
 800861e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800862a:	f7f8 fa57 	bl	8000adc <__aeabi_dcmplt>
 800862e:	2800      	cmp	r0, #0
 8008630:	d049      	beq.n	80086c6 <_dtoa_r+0x216>
 8008632:	3f01      	subs	r7, #1
 8008634:	2300      	movs	r3, #0
 8008636:	9310      	str	r3, [sp, #64]	@ 0x40
 8008638:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800863a:	1b9b      	subs	r3, r3, r6
 800863c:	1e5a      	subs	r2, r3, #1
 800863e:	bf45      	ittet	mi
 8008640:	f1c3 0301 	rsbmi	r3, r3, #1
 8008644:	9300      	strmi	r3, [sp, #0]
 8008646:	2300      	movpl	r3, #0
 8008648:	2300      	movmi	r3, #0
 800864a:	9206      	str	r2, [sp, #24]
 800864c:	bf54      	ite	pl
 800864e:	9300      	strpl	r3, [sp, #0]
 8008650:	9306      	strmi	r3, [sp, #24]
 8008652:	2f00      	cmp	r7, #0
 8008654:	db39      	blt.n	80086ca <_dtoa_r+0x21a>
 8008656:	9b06      	ldr	r3, [sp, #24]
 8008658:	970d      	str	r7, [sp, #52]	@ 0x34
 800865a:	443b      	add	r3, r7
 800865c:	9306      	str	r3, [sp, #24]
 800865e:	2300      	movs	r3, #0
 8008660:	9308      	str	r3, [sp, #32]
 8008662:	9b07      	ldr	r3, [sp, #28]
 8008664:	2b09      	cmp	r3, #9
 8008666:	d863      	bhi.n	8008730 <_dtoa_r+0x280>
 8008668:	2b05      	cmp	r3, #5
 800866a:	bfc4      	itt	gt
 800866c:	3b04      	subgt	r3, #4
 800866e:	9307      	strgt	r3, [sp, #28]
 8008670:	9b07      	ldr	r3, [sp, #28]
 8008672:	f1a3 0302 	sub.w	r3, r3, #2
 8008676:	bfcc      	ite	gt
 8008678:	2400      	movgt	r4, #0
 800867a:	2401      	movle	r4, #1
 800867c:	2b03      	cmp	r3, #3
 800867e:	d863      	bhi.n	8008748 <_dtoa_r+0x298>
 8008680:	e8df f003 	tbb	[pc, r3]
 8008684:	2b375452 	.word	0x2b375452
 8008688:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800868c:	441e      	add	r6, r3
 800868e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008692:	2b20      	cmp	r3, #32
 8008694:	bfc1      	itttt	gt
 8008696:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800869a:	409f      	lslgt	r7, r3
 800869c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80086a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80086a4:	bfd6      	itet	le
 80086a6:	f1c3 0320 	rsble	r3, r3, #32
 80086aa:	ea47 0003 	orrgt.w	r0, r7, r3
 80086ae:	fa04 f003 	lslle.w	r0, r4, r3
 80086b2:	f7f7 ff27 	bl	8000504 <__aeabi_ui2d>
 80086b6:	2201      	movs	r2, #1
 80086b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80086bc:	3e01      	subs	r6, #1
 80086be:	9212      	str	r2, [sp, #72]	@ 0x48
 80086c0:	e776      	b.n	80085b0 <_dtoa_r+0x100>
 80086c2:	2301      	movs	r3, #1
 80086c4:	e7b7      	b.n	8008636 <_dtoa_r+0x186>
 80086c6:	9010      	str	r0, [sp, #64]	@ 0x40
 80086c8:	e7b6      	b.n	8008638 <_dtoa_r+0x188>
 80086ca:	9b00      	ldr	r3, [sp, #0]
 80086cc:	1bdb      	subs	r3, r3, r7
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	427b      	negs	r3, r7
 80086d2:	9308      	str	r3, [sp, #32]
 80086d4:	2300      	movs	r3, #0
 80086d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80086d8:	e7c3      	b.n	8008662 <_dtoa_r+0x1b2>
 80086da:	2301      	movs	r3, #1
 80086dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80086de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086e0:	eb07 0b03 	add.w	fp, r7, r3
 80086e4:	f10b 0301 	add.w	r3, fp, #1
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	9303      	str	r3, [sp, #12]
 80086ec:	bfb8      	it	lt
 80086ee:	2301      	movlt	r3, #1
 80086f0:	e006      	b.n	8008700 <_dtoa_r+0x250>
 80086f2:	2301      	movs	r3, #1
 80086f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80086f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	dd28      	ble.n	800874e <_dtoa_r+0x29e>
 80086fc:	469b      	mov	fp, r3
 80086fe:	9303      	str	r3, [sp, #12]
 8008700:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008704:	2100      	movs	r1, #0
 8008706:	2204      	movs	r2, #4
 8008708:	f102 0514 	add.w	r5, r2, #20
 800870c:	429d      	cmp	r5, r3
 800870e:	d926      	bls.n	800875e <_dtoa_r+0x2ae>
 8008710:	6041      	str	r1, [r0, #4]
 8008712:	4648      	mov	r0, r9
 8008714:	f000 fcee 	bl	80090f4 <_Balloc>
 8008718:	4682      	mov	sl, r0
 800871a:	2800      	cmp	r0, #0
 800871c:	d142      	bne.n	80087a4 <_dtoa_r+0x2f4>
 800871e:	4b1e      	ldr	r3, [pc, #120]	@ (8008798 <_dtoa_r+0x2e8>)
 8008720:	4602      	mov	r2, r0
 8008722:	f240 11af 	movw	r1, #431	@ 0x1af
 8008726:	e6da      	b.n	80084de <_dtoa_r+0x2e>
 8008728:	2300      	movs	r3, #0
 800872a:	e7e3      	b.n	80086f4 <_dtoa_r+0x244>
 800872c:	2300      	movs	r3, #0
 800872e:	e7d5      	b.n	80086dc <_dtoa_r+0x22c>
 8008730:	2401      	movs	r4, #1
 8008732:	2300      	movs	r3, #0
 8008734:	9307      	str	r3, [sp, #28]
 8008736:	9409      	str	r4, [sp, #36]	@ 0x24
 8008738:	f04f 3bff 	mov.w	fp, #4294967295
 800873c:	2200      	movs	r2, #0
 800873e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008742:	2312      	movs	r3, #18
 8008744:	920c      	str	r2, [sp, #48]	@ 0x30
 8008746:	e7db      	b.n	8008700 <_dtoa_r+0x250>
 8008748:	2301      	movs	r3, #1
 800874a:	9309      	str	r3, [sp, #36]	@ 0x24
 800874c:	e7f4      	b.n	8008738 <_dtoa_r+0x288>
 800874e:	f04f 0b01 	mov.w	fp, #1
 8008752:	f8cd b00c 	str.w	fp, [sp, #12]
 8008756:	465b      	mov	r3, fp
 8008758:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800875c:	e7d0      	b.n	8008700 <_dtoa_r+0x250>
 800875e:	3101      	adds	r1, #1
 8008760:	0052      	lsls	r2, r2, #1
 8008762:	e7d1      	b.n	8008708 <_dtoa_r+0x258>
 8008764:	f3af 8000 	nop.w
 8008768:	636f4361 	.word	0x636f4361
 800876c:	3fd287a7 	.word	0x3fd287a7
 8008770:	8b60c8b3 	.word	0x8b60c8b3
 8008774:	3fc68a28 	.word	0x3fc68a28
 8008778:	509f79fb 	.word	0x509f79fb
 800877c:	3fd34413 	.word	0x3fd34413
 8008780:	0800b1b1 	.word	0x0800b1b1
 8008784:	0800b1c8 	.word	0x0800b1c8
 8008788:	7ff00000 	.word	0x7ff00000
 800878c:	0800b181 	.word	0x0800b181
 8008790:	3ff80000 	.word	0x3ff80000
 8008794:	0800b318 	.word	0x0800b318
 8008798:	0800b220 	.word	0x0800b220
 800879c:	0800b1ad 	.word	0x0800b1ad
 80087a0:	0800b180 	.word	0x0800b180
 80087a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80087a8:	6018      	str	r0, [r3, #0]
 80087aa:	9b03      	ldr	r3, [sp, #12]
 80087ac:	2b0e      	cmp	r3, #14
 80087ae:	f200 80a1 	bhi.w	80088f4 <_dtoa_r+0x444>
 80087b2:	2c00      	cmp	r4, #0
 80087b4:	f000 809e 	beq.w	80088f4 <_dtoa_r+0x444>
 80087b8:	2f00      	cmp	r7, #0
 80087ba:	dd33      	ble.n	8008824 <_dtoa_r+0x374>
 80087bc:	4b9c      	ldr	r3, [pc, #624]	@ (8008a30 <_dtoa_r+0x580>)
 80087be:	f007 020f 	and.w	r2, r7, #15
 80087c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087c6:	ed93 7b00 	vldr	d7, [r3]
 80087ca:	05f8      	lsls	r0, r7, #23
 80087cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80087d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80087d4:	d516      	bpl.n	8008804 <_dtoa_r+0x354>
 80087d6:	4b97      	ldr	r3, [pc, #604]	@ (8008a34 <_dtoa_r+0x584>)
 80087d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80087dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087e0:	f7f8 f834 	bl	800084c <__aeabi_ddiv>
 80087e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087e8:	f004 040f 	and.w	r4, r4, #15
 80087ec:	2603      	movs	r6, #3
 80087ee:	4d91      	ldr	r5, [pc, #580]	@ (8008a34 <_dtoa_r+0x584>)
 80087f0:	b954      	cbnz	r4, 8008808 <_dtoa_r+0x358>
 80087f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80087f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087fa:	f7f8 f827 	bl	800084c <__aeabi_ddiv>
 80087fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008802:	e028      	b.n	8008856 <_dtoa_r+0x3a6>
 8008804:	2602      	movs	r6, #2
 8008806:	e7f2      	b.n	80087ee <_dtoa_r+0x33e>
 8008808:	07e1      	lsls	r1, r4, #31
 800880a:	d508      	bpl.n	800881e <_dtoa_r+0x36e>
 800880c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008810:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008814:	f7f7 fef0 	bl	80005f8 <__aeabi_dmul>
 8008818:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800881c:	3601      	adds	r6, #1
 800881e:	1064      	asrs	r4, r4, #1
 8008820:	3508      	adds	r5, #8
 8008822:	e7e5      	b.n	80087f0 <_dtoa_r+0x340>
 8008824:	f000 80af 	beq.w	8008986 <_dtoa_r+0x4d6>
 8008828:	427c      	negs	r4, r7
 800882a:	4b81      	ldr	r3, [pc, #516]	@ (8008a30 <_dtoa_r+0x580>)
 800882c:	4d81      	ldr	r5, [pc, #516]	@ (8008a34 <_dtoa_r+0x584>)
 800882e:	f004 020f 	and.w	r2, r4, #15
 8008832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800883e:	f7f7 fedb 	bl	80005f8 <__aeabi_dmul>
 8008842:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008846:	1124      	asrs	r4, r4, #4
 8008848:	2300      	movs	r3, #0
 800884a:	2602      	movs	r6, #2
 800884c:	2c00      	cmp	r4, #0
 800884e:	f040 808f 	bne.w	8008970 <_dtoa_r+0x4c0>
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1d3      	bne.n	80087fe <_dtoa_r+0x34e>
 8008856:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008858:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	f000 8094 	beq.w	800898a <_dtoa_r+0x4da>
 8008862:	4b75      	ldr	r3, [pc, #468]	@ (8008a38 <_dtoa_r+0x588>)
 8008864:	2200      	movs	r2, #0
 8008866:	4620      	mov	r0, r4
 8008868:	4629      	mov	r1, r5
 800886a:	f7f8 f937 	bl	8000adc <__aeabi_dcmplt>
 800886e:	2800      	cmp	r0, #0
 8008870:	f000 808b 	beq.w	800898a <_dtoa_r+0x4da>
 8008874:	9b03      	ldr	r3, [sp, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 8087 	beq.w	800898a <_dtoa_r+0x4da>
 800887c:	f1bb 0f00 	cmp.w	fp, #0
 8008880:	dd34      	ble.n	80088ec <_dtoa_r+0x43c>
 8008882:	4620      	mov	r0, r4
 8008884:	4b6d      	ldr	r3, [pc, #436]	@ (8008a3c <_dtoa_r+0x58c>)
 8008886:	2200      	movs	r2, #0
 8008888:	4629      	mov	r1, r5
 800888a:	f7f7 feb5 	bl	80005f8 <__aeabi_dmul>
 800888e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008892:	f107 38ff 	add.w	r8, r7, #4294967295
 8008896:	3601      	adds	r6, #1
 8008898:	465c      	mov	r4, fp
 800889a:	4630      	mov	r0, r6
 800889c:	f7f7 fe42 	bl	8000524 <__aeabi_i2d>
 80088a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088a4:	f7f7 fea8 	bl	80005f8 <__aeabi_dmul>
 80088a8:	4b65      	ldr	r3, [pc, #404]	@ (8008a40 <_dtoa_r+0x590>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	f7f7 fcee 	bl	800028c <__adddf3>
 80088b0:	4605      	mov	r5, r0
 80088b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80088b6:	2c00      	cmp	r4, #0
 80088b8:	d16a      	bne.n	8008990 <_dtoa_r+0x4e0>
 80088ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088be:	4b61      	ldr	r3, [pc, #388]	@ (8008a44 <_dtoa_r+0x594>)
 80088c0:	2200      	movs	r2, #0
 80088c2:	f7f7 fce1 	bl	8000288 <__aeabi_dsub>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088ce:	462a      	mov	r2, r5
 80088d0:	4633      	mov	r3, r6
 80088d2:	f7f8 f921 	bl	8000b18 <__aeabi_dcmpgt>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	f040 8298 	bne.w	8008e0c <_dtoa_r+0x95c>
 80088dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088e0:	462a      	mov	r2, r5
 80088e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80088e6:	f7f8 f8f9 	bl	8000adc <__aeabi_dcmplt>
 80088ea:	bb38      	cbnz	r0, 800893c <_dtoa_r+0x48c>
 80088ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80088f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80088f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f2c0 8157 	blt.w	8008baa <_dtoa_r+0x6fa>
 80088fc:	2f0e      	cmp	r7, #14
 80088fe:	f300 8154 	bgt.w	8008baa <_dtoa_r+0x6fa>
 8008902:	4b4b      	ldr	r3, [pc, #300]	@ (8008a30 <_dtoa_r+0x580>)
 8008904:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008908:	ed93 7b00 	vldr	d7, [r3]
 800890c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800890e:	2b00      	cmp	r3, #0
 8008910:	ed8d 7b00 	vstr	d7, [sp]
 8008914:	f280 80e5 	bge.w	8008ae2 <_dtoa_r+0x632>
 8008918:	9b03      	ldr	r3, [sp, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	f300 80e1 	bgt.w	8008ae2 <_dtoa_r+0x632>
 8008920:	d10c      	bne.n	800893c <_dtoa_r+0x48c>
 8008922:	4b48      	ldr	r3, [pc, #288]	@ (8008a44 <_dtoa_r+0x594>)
 8008924:	2200      	movs	r2, #0
 8008926:	ec51 0b17 	vmov	r0, r1, d7
 800892a:	f7f7 fe65 	bl	80005f8 <__aeabi_dmul>
 800892e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008932:	f7f8 f8e7 	bl	8000b04 <__aeabi_dcmpge>
 8008936:	2800      	cmp	r0, #0
 8008938:	f000 8266 	beq.w	8008e08 <_dtoa_r+0x958>
 800893c:	2400      	movs	r4, #0
 800893e:	4625      	mov	r5, r4
 8008940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008942:	4656      	mov	r6, sl
 8008944:	ea6f 0803 	mvn.w	r8, r3
 8008948:	2700      	movs	r7, #0
 800894a:	4621      	mov	r1, r4
 800894c:	4648      	mov	r0, r9
 800894e:	f000 fc11 	bl	8009174 <_Bfree>
 8008952:	2d00      	cmp	r5, #0
 8008954:	f000 80bd 	beq.w	8008ad2 <_dtoa_r+0x622>
 8008958:	b12f      	cbz	r7, 8008966 <_dtoa_r+0x4b6>
 800895a:	42af      	cmp	r7, r5
 800895c:	d003      	beq.n	8008966 <_dtoa_r+0x4b6>
 800895e:	4639      	mov	r1, r7
 8008960:	4648      	mov	r0, r9
 8008962:	f000 fc07 	bl	8009174 <_Bfree>
 8008966:	4629      	mov	r1, r5
 8008968:	4648      	mov	r0, r9
 800896a:	f000 fc03 	bl	8009174 <_Bfree>
 800896e:	e0b0      	b.n	8008ad2 <_dtoa_r+0x622>
 8008970:	07e2      	lsls	r2, r4, #31
 8008972:	d505      	bpl.n	8008980 <_dtoa_r+0x4d0>
 8008974:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008978:	f7f7 fe3e 	bl	80005f8 <__aeabi_dmul>
 800897c:	3601      	adds	r6, #1
 800897e:	2301      	movs	r3, #1
 8008980:	1064      	asrs	r4, r4, #1
 8008982:	3508      	adds	r5, #8
 8008984:	e762      	b.n	800884c <_dtoa_r+0x39c>
 8008986:	2602      	movs	r6, #2
 8008988:	e765      	b.n	8008856 <_dtoa_r+0x3a6>
 800898a:	9c03      	ldr	r4, [sp, #12]
 800898c:	46b8      	mov	r8, r7
 800898e:	e784      	b.n	800889a <_dtoa_r+0x3ea>
 8008990:	4b27      	ldr	r3, [pc, #156]	@ (8008a30 <_dtoa_r+0x580>)
 8008992:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008994:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008998:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800899c:	4454      	add	r4, sl
 800899e:	2900      	cmp	r1, #0
 80089a0:	d054      	beq.n	8008a4c <_dtoa_r+0x59c>
 80089a2:	4929      	ldr	r1, [pc, #164]	@ (8008a48 <_dtoa_r+0x598>)
 80089a4:	2000      	movs	r0, #0
 80089a6:	f7f7 ff51 	bl	800084c <__aeabi_ddiv>
 80089aa:	4633      	mov	r3, r6
 80089ac:	462a      	mov	r2, r5
 80089ae:	f7f7 fc6b 	bl	8000288 <__aeabi_dsub>
 80089b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80089b6:	4656      	mov	r6, sl
 80089b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089bc:	f7f8 f8cc 	bl	8000b58 <__aeabi_d2iz>
 80089c0:	4605      	mov	r5, r0
 80089c2:	f7f7 fdaf 	bl	8000524 <__aeabi_i2d>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089ce:	f7f7 fc5b 	bl	8000288 <__aeabi_dsub>
 80089d2:	3530      	adds	r5, #48	@ 0x30
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80089dc:	f806 5b01 	strb.w	r5, [r6], #1
 80089e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80089e4:	f7f8 f87a 	bl	8000adc <__aeabi_dcmplt>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d172      	bne.n	8008ad2 <_dtoa_r+0x622>
 80089ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089f0:	4911      	ldr	r1, [pc, #68]	@ (8008a38 <_dtoa_r+0x588>)
 80089f2:	2000      	movs	r0, #0
 80089f4:	f7f7 fc48 	bl	8000288 <__aeabi_dsub>
 80089f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80089fc:	f7f8 f86e 	bl	8000adc <__aeabi_dcmplt>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	f040 80b4 	bne.w	8008b6e <_dtoa_r+0x6be>
 8008a06:	42a6      	cmp	r6, r4
 8008a08:	f43f af70 	beq.w	80088ec <_dtoa_r+0x43c>
 8008a0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008a10:	4b0a      	ldr	r3, [pc, #40]	@ (8008a3c <_dtoa_r+0x58c>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	f7f7 fdf0 	bl	80005f8 <__aeabi_dmul>
 8008a18:	4b08      	ldr	r3, [pc, #32]	@ (8008a3c <_dtoa_r+0x58c>)
 8008a1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008a1e:	2200      	movs	r2, #0
 8008a20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a24:	f7f7 fde8 	bl	80005f8 <__aeabi_dmul>
 8008a28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a2c:	e7c4      	b.n	80089b8 <_dtoa_r+0x508>
 8008a2e:	bf00      	nop
 8008a30:	0800b318 	.word	0x0800b318
 8008a34:	0800b2f0 	.word	0x0800b2f0
 8008a38:	3ff00000 	.word	0x3ff00000
 8008a3c:	40240000 	.word	0x40240000
 8008a40:	401c0000 	.word	0x401c0000
 8008a44:	40140000 	.word	0x40140000
 8008a48:	3fe00000 	.word	0x3fe00000
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f7f7 fdd2 	bl	80005f8 <__aeabi_dmul>
 8008a54:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008a58:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008a5a:	4656      	mov	r6, sl
 8008a5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a60:	f7f8 f87a 	bl	8000b58 <__aeabi_d2iz>
 8008a64:	4605      	mov	r5, r0
 8008a66:	f7f7 fd5d 	bl	8000524 <__aeabi_i2d>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a72:	f7f7 fc09 	bl	8000288 <__aeabi_dsub>
 8008a76:	3530      	adds	r5, #48	@ 0x30
 8008a78:	f806 5b01 	strb.w	r5, [r6], #1
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	42a6      	cmp	r6, r4
 8008a82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a86:	f04f 0200 	mov.w	r2, #0
 8008a8a:	d124      	bne.n	8008ad6 <_dtoa_r+0x626>
 8008a8c:	4baf      	ldr	r3, [pc, #700]	@ (8008d4c <_dtoa_r+0x89c>)
 8008a8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008a92:	f7f7 fbfb 	bl	800028c <__adddf3>
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a9e:	f7f8 f83b 	bl	8000b18 <__aeabi_dcmpgt>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d163      	bne.n	8008b6e <_dtoa_r+0x6be>
 8008aa6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008aaa:	49a8      	ldr	r1, [pc, #672]	@ (8008d4c <_dtoa_r+0x89c>)
 8008aac:	2000      	movs	r0, #0
 8008aae:	f7f7 fbeb 	bl	8000288 <__aeabi_dsub>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008aba:	f7f8 f80f 	bl	8000adc <__aeabi_dcmplt>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	f43f af14 	beq.w	80088ec <_dtoa_r+0x43c>
 8008ac4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008ac6:	1e73      	subs	r3, r6, #1
 8008ac8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008aca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ace:	2b30      	cmp	r3, #48	@ 0x30
 8008ad0:	d0f8      	beq.n	8008ac4 <_dtoa_r+0x614>
 8008ad2:	4647      	mov	r7, r8
 8008ad4:	e03b      	b.n	8008b4e <_dtoa_r+0x69e>
 8008ad6:	4b9e      	ldr	r3, [pc, #632]	@ (8008d50 <_dtoa_r+0x8a0>)
 8008ad8:	f7f7 fd8e 	bl	80005f8 <__aeabi_dmul>
 8008adc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ae0:	e7bc      	b.n	8008a5c <_dtoa_r+0x5ac>
 8008ae2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008ae6:	4656      	mov	r6, sl
 8008ae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aec:	4620      	mov	r0, r4
 8008aee:	4629      	mov	r1, r5
 8008af0:	f7f7 feac 	bl	800084c <__aeabi_ddiv>
 8008af4:	f7f8 f830 	bl	8000b58 <__aeabi_d2iz>
 8008af8:	4680      	mov	r8, r0
 8008afa:	f7f7 fd13 	bl	8000524 <__aeabi_i2d>
 8008afe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b02:	f7f7 fd79 	bl	80005f8 <__aeabi_dmul>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008b12:	f7f7 fbb9 	bl	8000288 <__aeabi_dsub>
 8008b16:	f806 4b01 	strb.w	r4, [r6], #1
 8008b1a:	9d03      	ldr	r5, [sp, #12]
 8008b1c:	eba6 040a 	sub.w	r4, r6, sl
 8008b20:	42a5      	cmp	r5, r4
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	d133      	bne.n	8008b90 <_dtoa_r+0x6e0>
 8008b28:	f7f7 fbb0 	bl	800028c <__adddf3>
 8008b2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b30:	4604      	mov	r4, r0
 8008b32:	460d      	mov	r5, r1
 8008b34:	f7f7 fff0 	bl	8000b18 <__aeabi_dcmpgt>
 8008b38:	b9c0      	cbnz	r0, 8008b6c <_dtoa_r+0x6bc>
 8008b3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b3e:	4620      	mov	r0, r4
 8008b40:	4629      	mov	r1, r5
 8008b42:	f7f7 ffc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b46:	b110      	cbz	r0, 8008b4e <_dtoa_r+0x69e>
 8008b48:	f018 0f01 	tst.w	r8, #1
 8008b4c:	d10e      	bne.n	8008b6c <_dtoa_r+0x6bc>
 8008b4e:	9902      	ldr	r1, [sp, #8]
 8008b50:	4648      	mov	r0, r9
 8008b52:	f000 fb0f 	bl	8009174 <_Bfree>
 8008b56:	2300      	movs	r3, #0
 8008b58:	7033      	strb	r3, [r6, #0]
 8008b5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008b5c:	3701      	adds	r7, #1
 8008b5e:	601f      	str	r7, [r3, #0]
 8008b60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 824b 	beq.w	8008ffe <_dtoa_r+0xb4e>
 8008b68:	601e      	str	r6, [r3, #0]
 8008b6a:	e248      	b.n	8008ffe <_dtoa_r+0xb4e>
 8008b6c:	46b8      	mov	r8, r7
 8008b6e:	4633      	mov	r3, r6
 8008b70:	461e      	mov	r6, r3
 8008b72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b76:	2a39      	cmp	r2, #57	@ 0x39
 8008b78:	d106      	bne.n	8008b88 <_dtoa_r+0x6d8>
 8008b7a:	459a      	cmp	sl, r3
 8008b7c:	d1f8      	bne.n	8008b70 <_dtoa_r+0x6c0>
 8008b7e:	2230      	movs	r2, #48	@ 0x30
 8008b80:	f108 0801 	add.w	r8, r8, #1
 8008b84:	f88a 2000 	strb.w	r2, [sl]
 8008b88:	781a      	ldrb	r2, [r3, #0]
 8008b8a:	3201      	adds	r2, #1
 8008b8c:	701a      	strb	r2, [r3, #0]
 8008b8e:	e7a0      	b.n	8008ad2 <_dtoa_r+0x622>
 8008b90:	4b6f      	ldr	r3, [pc, #444]	@ (8008d50 <_dtoa_r+0x8a0>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	f7f7 fd30 	bl	80005f8 <__aeabi_dmul>
 8008b98:	2200      	movs	r2, #0
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	460d      	mov	r5, r1
 8008ba0:	f7f7 ff92 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	d09f      	beq.n	8008ae8 <_dtoa_r+0x638>
 8008ba8:	e7d1      	b.n	8008b4e <_dtoa_r+0x69e>
 8008baa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bac:	2a00      	cmp	r2, #0
 8008bae:	f000 80ea 	beq.w	8008d86 <_dtoa_r+0x8d6>
 8008bb2:	9a07      	ldr	r2, [sp, #28]
 8008bb4:	2a01      	cmp	r2, #1
 8008bb6:	f300 80cd 	bgt.w	8008d54 <_dtoa_r+0x8a4>
 8008bba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008bbc:	2a00      	cmp	r2, #0
 8008bbe:	f000 80c1 	beq.w	8008d44 <_dtoa_r+0x894>
 8008bc2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008bc6:	9c08      	ldr	r4, [sp, #32]
 8008bc8:	9e00      	ldr	r6, [sp, #0]
 8008bca:	9a00      	ldr	r2, [sp, #0]
 8008bcc:	441a      	add	r2, r3
 8008bce:	9200      	str	r2, [sp, #0]
 8008bd0:	9a06      	ldr	r2, [sp, #24]
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	441a      	add	r2, r3
 8008bd6:	4648      	mov	r0, r9
 8008bd8:	9206      	str	r2, [sp, #24]
 8008bda:	f000 fb7f 	bl	80092dc <__i2b>
 8008bde:	4605      	mov	r5, r0
 8008be0:	b166      	cbz	r6, 8008bfc <_dtoa_r+0x74c>
 8008be2:	9b06      	ldr	r3, [sp, #24]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	dd09      	ble.n	8008bfc <_dtoa_r+0x74c>
 8008be8:	42b3      	cmp	r3, r6
 8008bea:	9a00      	ldr	r2, [sp, #0]
 8008bec:	bfa8      	it	ge
 8008bee:	4633      	movge	r3, r6
 8008bf0:	1ad2      	subs	r2, r2, r3
 8008bf2:	9200      	str	r2, [sp, #0]
 8008bf4:	9a06      	ldr	r2, [sp, #24]
 8008bf6:	1af6      	subs	r6, r6, r3
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	9306      	str	r3, [sp, #24]
 8008bfc:	9b08      	ldr	r3, [sp, #32]
 8008bfe:	b30b      	cbz	r3, 8008c44 <_dtoa_r+0x794>
 8008c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f000 80c6 	beq.w	8008d94 <_dtoa_r+0x8e4>
 8008c08:	2c00      	cmp	r4, #0
 8008c0a:	f000 80c0 	beq.w	8008d8e <_dtoa_r+0x8de>
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4622      	mov	r2, r4
 8008c12:	4648      	mov	r0, r9
 8008c14:	f000 fc1a 	bl	800944c <__pow5mult>
 8008c18:	9a02      	ldr	r2, [sp, #8]
 8008c1a:	4601      	mov	r1, r0
 8008c1c:	4605      	mov	r5, r0
 8008c1e:	4648      	mov	r0, r9
 8008c20:	f000 fb72 	bl	8009308 <__multiply>
 8008c24:	9902      	ldr	r1, [sp, #8]
 8008c26:	4680      	mov	r8, r0
 8008c28:	4648      	mov	r0, r9
 8008c2a:	f000 faa3 	bl	8009174 <_Bfree>
 8008c2e:	9b08      	ldr	r3, [sp, #32]
 8008c30:	1b1b      	subs	r3, r3, r4
 8008c32:	9308      	str	r3, [sp, #32]
 8008c34:	f000 80b1 	beq.w	8008d9a <_dtoa_r+0x8ea>
 8008c38:	9a08      	ldr	r2, [sp, #32]
 8008c3a:	4641      	mov	r1, r8
 8008c3c:	4648      	mov	r0, r9
 8008c3e:	f000 fc05 	bl	800944c <__pow5mult>
 8008c42:	9002      	str	r0, [sp, #8]
 8008c44:	2101      	movs	r1, #1
 8008c46:	4648      	mov	r0, r9
 8008c48:	f000 fb48 	bl	80092dc <__i2b>
 8008c4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c4e:	4604      	mov	r4, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 81d8 	beq.w	8009006 <_dtoa_r+0xb56>
 8008c56:	461a      	mov	r2, r3
 8008c58:	4601      	mov	r1, r0
 8008c5a:	4648      	mov	r0, r9
 8008c5c:	f000 fbf6 	bl	800944c <__pow5mult>
 8008c60:	9b07      	ldr	r3, [sp, #28]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	4604      	mov	r4, r0
 8008c66:	f300 809f 	bgt.w	8008da8 <_dtoa_r+0x8f8>
 8008c6a:	9b04      	ldr	r3, [sp, #16]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f040 8097 	bne.w	8008da0 <_dtoa_r+0x8f0>
 8008c72:	9b05      	ldr	r3, [sp, #20]
 8008c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f040 8093 	bne.w	8008da4 <_dtoa_r+0x8f4>
 8008c7e:	9b05      	ldr	r3, [sp, #20]
 8008c80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c84:	0d1b      	lsrs	r3, r3, #20
 8008c86:	051b      	lsls	r3, r3, #20
 8008c88:	b133      	cbz	r3, 8008c98 <_dtoa_r+0x7e8>
 8008c8a:	9b00      	ldr	r3, [sp, #0]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	9b06      	ldr	r3, [sp, #24]
 8008c92:	3301      	adds	r3, #1
 8008c94:	9306      	str	r3, [sp, #24]
 8008c96:	2301      	movs	r3, #1
 8008c98:	9308      	str	r3, [sp, #32]
 8008c9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 81b8 	beq.w	8009012 <_dtoa_r+0xb62>
 8008ca2:	6923      	ldr	r3, [r4, #16]
 8008ca4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ca8:	6918      	ldr	r0, [r3, #16]
 8008caa:	f000 facb 	bl	8009244 <__hi0bits>
 8008cae:	f1c0 0020 	rsb	r0, r0, #32
 8008cb2:	9b06      	ldr	r3, [sp, #24]
 8008cb4:	4418      	add	r0, r3
 8008cb6:	f010 001f 	ands.w	r0, r0, #31
 8008cba:	f000 8082 	beq.w	8008dc2 <_dtoa_r+0x912>
 8008cbe:	f1c0 0320 	rsb	r3, r0, #32
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	dd73      	ble.n	8008dae <_dtoa_r+0x8fe>
 8008cc6:	9b00      	ldr	r3, [sp, #0]
 8008cc8:	f1c0 001c 	rsb	r0, r0, #28
 8008ccc:	4403      	add	r3, r0
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	9b06      	ldr	r3, [sp, #24]
 8008cd2:	4403      	add	r3, r0
 8008cd4:	4406      	add	r6, r0
 8008cd6:	9306      	str	r3, [sp, #24]
 8008cd8:	9b00      	ldr	r3, [sp, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	dd05      	ble.n	8008cea <_dtoa_r+0x83a>
 8008cde:	9902      	ldr	r1, [sp, #8]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	4648      	mov	r0, r9
 8008ce4:	f000 fc0c 	bl	8009500 <__lshift>
 8008ce8:	9002      	str	r0, [sp, #8]
 8008cea:	9b06      	ldr	r3, [sp, #24]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dd05      	ble.n	8008cfc <_dtoa_r+0x84c>
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	4648      	mov	r0, r9
 8008cf6:	f000 fc03 	bl	8009500 <__lshift>
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d061      	beq.n	8008dc6 <_dtoa_r+0x916>
 8008d02:	9802      	ldr	r0, [sp, #8]
 8008d04:	4621      	mov	r1, r4
 8008d06:	f000 fc67 	bl	80095d8 <__mcmp>
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	da5b      	bge.n	8008dc6 <_dtoa_r+0x916>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	9902      	ldr	r1, [sp, #8]
 8008d12:	220a      	movs	r2, #10
 8008d14:	4648      	mov	r0, r9
 8008d16:	f000 fa4f 	bl	80091b8 <__multadd>
 8008d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d1c:	9002      	str	r0, [sp, #8]
 8008d1e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f000 8177 	beq.w	8009016 <_dtoa_r+0xb66>
 8008d28:	4629      	mov	r1, r5
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	220a      	movs	r2, #10
 8008d2e:	4648      	mov	r0, r9
 8008d30:	f000 fa42 	bl	80091b8 <__multadd>
 8008d34:	f1bb 0f00 	cmp.w	fp, #0
 8008d38:	4605      	mov	r5, r0
 8008d3a:	dc6f      	bgt.n	8008e1c <_dtoa_r+0x96c>
 8008d3c:	9b07      	ldr	r3, [sp, #28]
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	dc49      	bgt.n	8008dd6 <_dtoa_r+0x926>
 8008d42:	e06b      	b.n	8008e1c <_dtoa_r+0x96c>
 8008d44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008d46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008d4a:	e73c      	b.n	8008bc6 <_dtoa_r+0x716>
 8008d4c:	3fe00000 	.word	0x3fe00000
 8008d50:	40240000 	.word	0x40240000
 8008d54:	9b03      	ldr	r3, [sp, #12]
 8008d56:	1e5c      	subs	r4, r3, #1
 8008d58:	9b08      	ldr	r3, [sp, #32]
 8008d5a:	42a3      	cmp	r3, r4
 8008d5c:	db09      	blt.n	8008d72 <_dtoa_r+0x8c2>
 8008d5e:	1b1c      	subs	r4, r3, r4
 8008d60:	9b03      	ldr	r3, [sp, #12]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f6bf af30 	bge.w	8008bc8 <_dtoa_r+0x718>
 8008d68:	9b00      	ldr	r3, [sp, #0]
 8008d6a:	9a03      	ldr	r2, [sp, #12]
 8008d6c:	1a9e      	subs	r6, r3, r2
 8008d6e:	2300      	movs	r3, #0
 8008d70:	e72b      	b.n	8008bca <_dtoa_r+0x71a>
 8008d72:	9b08      	ldr	r3, [sp, #32]
 8008d74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d76:	9408      	str	r4, [sp, #32]
 8008d78:	1ae3      	subs	r3, r4, r3
 8008d7a:	441a      	add	r2, r3
 8008d7c:	9e00      	ldr	r6, [sp, #0]
 8008d7e:	9b03      	ldr	r3, [sp, #12]
 8008d80:	920d      	str	r2, [sp, #52]	@ 0x34
 8008d82:	2400      	movs	r4, #0
 8008d84:	e721      	b.n	8008bca <_dtoa_r+0x71a>
 8008d86:	9c08      	ldr	r4, [sp, #32]
 8008d88:	9e00      	ldr	r6, [sp, #0]
 8008d8a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008d8c:	e728      	b.n	8008be0 <_dtoa_r+0x730>
 8008d8e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008d92:	e751      	b.n	8008c38 <_dtoa_r+0x788>
 8008d94:	9a08      	ldr	r2, [sp, #32]
 8008d96:	9902      	ldr	r1, [sp, #8]
 8008d98:	e750      	b.n	8008c3c <_dtoa_r+0x78c>
 8008d9a:	f8cd 8008 	str.w	r8, [sp, #8]
 8008d9e:	e751      	b.n	8008c44 <_dtoa_r+0x794>
 8008da0:	2300      	movs	r3, #0
 8008da2:	e779      	b.n	8008c98 <_dtoa_r+0x7e8>
 8008da4:	9b04      	ldr	r3, [sp, #16]
 8008da6:	e777      	b.n	8008c98 <_dtoa_r+0x7e8>
 8008da8:	2300      	movs	r3, #0
 8008daa:	9308      	str	r3, [sp, #32]
 8008dac:	e779      	b.n	8008ca2 <_dtoa_r+0x7f2>
 8008dae:	d093      	beq.n	8008cd8 <_dtoa_r+0x828>
 8008db0:	9a00      	ldr	r2, [sp, #0]
 8008db2:	331c      	adds	r3, #28
 8008db4:	441a      	add	r2, r3
 8008db6:	9200      	str	r2, [sp, #0]
 8008db8:	9a06      	ldr	r2, [sp, #24]
 8008dba:	441a      	add	r2, r3
 8008dbc:	441e      	add	r6, r3
 8008dbe:	9206      	str	r2, [sp, #24]
 8008dc0:	e78a      	b.n	8008cd8 <_dtoa_r+0x828>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	e7f4      	b.n	8008db0 <_dtoa_r+0x900>
 8008dc6:	9b03      	ldr	r3, [sp, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	46b8      	mov	r8, r7
 8008dcc:	dc20      	bgt.n	8008e10 <_dtoa_r+0x960>
 8008dce:	469b      	mov	fp, r3
 8008dd0:	9b07      	ldr	r3, [sp, #28]
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	dd1e      	ble.n	8008e14 <_dtoa_r+0x964>
 8008dd6:	f1bb 0f00 	cmp.w	fp, #0
 8008dda:	f47f adb1 	bne.w	8008940 <_dtoa_r+0x490>
 8008dde:	4621      	mov	r1, r4
 8008de0:	465b      	mov	r3, fp
 8008de2:	2205      	movs	r2, #5
 8008de4:	4648      	mov	r0, r9
 8008de6:	f000 f9e7 	bl	80091b8 <__multadd>
 8008dea:	4601      	mov	r1, r0
 8008dec:	4604      	mov	r4, r0
 8008dee:	9802      	ldr	r0, [sp, #8]
 8008df0:	f000 fbf2 	bl	80095d8 <__mcmp>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	f77f ada3 	ble.w	8008940 <_dtoa_r+0x490>
 8008dfa:	4656      	mov	r6, sl
 8008dfc:	2331      	movs	r3, #49	@ 0x31
 8008dfe:	f806 3b01 	strb.w	r3, [r6], #1
 8008e02:	f108 0801 	add.w	r8, r8, #1
 8008e06:	e59f      	b.n	8008948 <_dtoa_r+0x498>
 8008e08:	9c03      	ldr	r4, [sp, #12]
 8008e0a:	46b8      	mov	r8, r7
 8008e0c:	4625      	mov	r5, r4
 8008e0e:	e7f4      	b.n	8008dfa <_dtoa_r+0x94a>
 8008e10:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f000 8101 	beq.w	800901e <_dtoa_r+0xb6e>
 8008e1c:	2e00      	cmp	r6, #0
 8008e1e:	dd05      	ble.n	8008e2c <_dtoa_r+0x97c>
 8008e20:	4629      	mov	r1, r5
 8008e22:	4632      	mov	r2, r6
 8008e24:	4648      	mov	r0, r9
 8008e26:	f000 fb6b 	bl	8009500 <__lshift>
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	9b08      	ldr	r3, [sp, #32]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d05c      	beq.n	8008eec <_dtoa_r+0xa3c>
 8008e32:	6869      	ldr	r1, [r5, #4]
 8008e34:	4648      	mov	r0, r9
 8008e36:	f000 f95d 	bl	80090f4 <_Balloc>
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	b928      	cbnz	r0, 8008e4a <_dtoa_r+0x99a>
 8008e3e:	4b82      	ldr	r3, [pc, #520]	@ (8009048 <_dtoa_r+0xb98>)
 8008e40:	4602      	mov	r2, r0
 8008e42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008e46:	f7ff bb4a 	b.w	80084de <_dtoa_r+0x2e>
 8008e4a:	692a      	ldr	r2, [r5, #16]
 8008e4c:	3202      	adds	r2, #2
 8008e4e:	0092      	lsls	r2, r2, #2
 8008e50:	f105 010c 	add.w	r1, r5, #12
 8008e54:	300c      	adds	r0, #12
 8008e56:	f7ff fa94 	bl	8008382 <memcpy>
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	4631      	mov	r1, r6
 8008e5e:	4648      	mov	r0, r9
 8008e60:	f000 fb4e 	bl	8009500 <__lshift>
 8008e64:	f10a 0301 	add.w	r3, sl, #1
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	eb0a 030b 	add.w	r3, sl, fp
 8008e6e:	9308      	str	r3, [sp, #32]
 8008e70:	9b04      	ldr	r3, [sp, #16]
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	462f      	mov	r7, r5
 8008e78:	9306      	str	r3, [sp, #24]
 8008e7a:	4605      	mov	r5, r0
 8008e7c:	9b00      	ldr	r3, [sp, #0]
 8008e7e:	9802      	ldr	r0, [sp, #8]
 8008e80:	4621      	mov	r1, r4
 8008e82:	f103 3bff 	add.w	fp, r3, #4294967295
 8008e86:	f7ff fa8a 	bl	800839e <quorem>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	3330      	adds	r3, #48	@ 0x30
 8008e8e:	9003      	str	r0, [sp, #12]
 8008e90:	4639      	mov	r1, r7
 8008e92:	9802      	ldr	r0, [sp, #8]
 8008e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e96:	f000 fb9f 	bl	80095d8 <__mcmp>
 8008e9a:	462a      	mov	r2, r5
 8008e9c:	9004      	str	r0, [sp, #16]
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	4648      	mov	r0, r9
 8008ea2:	f000 fbb5 	bl	8009610 <__mdiff>
 8008ea6:	68c2      	ldr	r2, [r0, #12]
 8008ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eaa:	4606      	mov	r6, r0
 8008eac:	bb02      	cbnz	r2, 8008ef0 <_dtoa_r+0xa40>
 8008eae:	4601      	mov	r1, r0
 8008eb0:	9802      	ldr	r0, [sp, #8]
 8008eb2:	f000 fb91 	bl	80095d8 <__mcmp>
 8008eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eb8:	4602      	mov	r2, r0
 8008eba:	4631      	mov	r1, r6
 8008ebc:	4648      	mov	r0, r9
 8008ebe:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ec2:	f000 f957 	bl	8009174 <_Bfree>
 8008ec6:	9b07      	ldr	r3, [sp, #28]
 8008ec8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008eca:	9e00      	ldr	r6, [sp, #0]
 8008ecc:	ea42 0103 	orr.w	r1, r2, r3
 8008ed0:	9b06      	ldr	r3, [sp, #24]
 8008ed2:	4319      	orrs	r1, r3
 8008ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ed6:	d10d      	bne.n	8008ef4 <_dtoa_r+0xa44>
 8008ed8:	2b39      	cmp	r3, #57	@ 0x39
 8008eda:	d027      	beq.n	8008f2c <_dtoa_r+0xa7c>
 8008edc:	9a04      	ldr	r2, [sp, #16]
 8008ede:	2a00      	cmp	r2, #0
 8008ee0:	dd01      	ble.n	8008ee6 <_dtoa_r+0xa36>
 8008ee2:	9b03      	ldr	r3, [sp, #12]
 8008ee4:	3331      	adds	r3, #49	@ 0x31
 8008ee6:	f88b 3000 	strb.w	r3, [fp]
 8008eea:	e52e      	b.n	800894a <_dtoa_r+0x49a>
 8008eec:	4628      	mov	r0, r5
 8008eee:	e7b9      	b.n	8008e64 <_dtoa_r+0x9b4>
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	e7e2      	b.n	8008eba <_dtoa_r+0xa0a>
 8008ef4:	9904      	ldr	r1, [sp, #16]
 8008ef6:	2900      	cmp	r1, #0
 8008ef8:	db04      	blt.n	8008f04 <_dtoa_r+0xa54>
 8008efa:	9807      	ldr	r0, [sp, #28]
 8008efc:	4301      	orrs	r1, r0
 8008efe:	9806      	ldr	r0, [sp, #24]
 8008f00:	4301      	orrs	r1, r0
 8008f02:	d120      	bne.n	8008f46 <_dtoa_r+0xa96>
 8008f04:	2a00      	cmp	r2, #0
 8008f06:	ddee      	ble.n	8008ee6 <_dtoa_r+0xa36>
 8008f08:	9902      	ldr	r1, [sp, #8]
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	4648      	mov	r0, r9
 8008f10:	f000 faf6 	bl	8009500 <__lshift>
 8008f14:	4621      	mov	r1, r4
 8008f16:	9002      	str	r0, [sp, #8]
 8008f18:	f000 fb5e 	bl	80095d8 <__mcmp>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	9b00      	ldr	r3, [sp, #0]
 8008f20:	dc02      	bgt.n	8008f28 <_dtoa_r+0xa78>
 8008f22:	d1e0      	bne.n	8008ee6 <_dtoa_r+0xa36>
 8008f24:	07da      	lsls	r2, r3, #31
 8008f26:	d5de      	bpl.n	8008ee6 <_dtoa_r+0xa36>
 8008f28:	2b39      	cmp	r3, #57	@ 0x39
 8008f2a:	d1da      	bne.n	8008ee2 <_dtoa_r+0xa32>
 8008f2c:	2339      	movs	r3, #57	@ 0x39
 8008f2e:	f88b 3000 	strb.w	r3, [fp]
 8008f32:	4633      	mov	r3, r6
 8008f34:	461e      	mov	r6, r3
 8008f36:	3b01      	subs	r3, #1
 8008f38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008f3c:	2a39      	cmp	r2, #57	@ 0x39
 8008f3e:	d04e      	beq.n	8008fde <_dtoa_r+0xb2e>
 8008f40:	3201      	adds	r2, #1
 8008f42:	701a      	strb	r2, [r3, #0]
 8008f44:	e501      	b.n	800894a <_dtoa_r+0x49a>
 8008f46:	2a00      	cmp	r2, #0
 8008f48:	dd03      	ble.n	8008f52 <_dtoa_r+0xaa2>
 8008f4a:	2b39      	cmp	r3, #57	@ 0x39
 8008f4c:	d0ee      	beq.n	8008f2c <_dtoa_r+0xa7c>
 8008f4e:	3301      	adds	r3, #1
 8008f50:	e7c9      	b.n	8008ee6 <_dtoa_r+0xa36>
 8008f52:	9a00      	ldr	r2, [sp, #0]
 8008f54:	9908      	ldr	r1, [sp, #32]
 8008f56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008f5a:	428a      	cmp	r2, r1
 8008f5c:	d028      	beq.n	8008fb0 <_dtoa_r+0xb00>
 8008f5e:	9902      	ldr	r1, [sp, #8]
 8008f60:	2300      	movs	r3, #0
 8008f62:	220a      	movs	r2, #10
 8008f64:	4648      	mov	r0, r9
 8008f66:	f000 f927 	bl	80091b8 <__multadd>
 8008f6a:	42af      	cmp	r7, r5
 8008f6c:	9002      	str	r0, [sp, #8]
 8008f6e:	f04f 0300 	mov.w	r3, #0
 8008f72:	f04f 020a 	mov.w	r2, #10
 8008f76:	4639      	mov	r1, r7
 8008f78:	4648      	mov	r0, r9
 8008f7a:	d107      	bne.n	8008f8c <_dtoa_r+0xadc>
 8008f7c:	f000 f91c 	bl	80091b8 <__multadd>
 8008f80:	4607      	mov	r7, r0
 8008f82:	4605      	mov	r5, r0
 8008f84:	9b00      	ldr	r3, [sp, #0]
 8008f86:	3301      	adds	r3, #1
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	e777      	b.n	8008e7c <_dtoa_r+0x9cc>
 8008f8c:	f000 f914 	bl	80091b8 <__multadd>
 8008f90:	4629      	mov	r1, r5
 8008f92:	4607      	mov	r7, r0
 8008f94:	2300      	movs	r3, #0
 8008f96:	220a      	movs	r2, #10
 8008f98:	4648      	mov	r0, r9
 8008f9a:	f000 f90d 	bl	80091b8 <__multadd>
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	e7f0      	b.n	8008f84 <_dtoa_r+0xad4>
 8008fa2:	f1bb 0f00 	cmp.w	fp, #0
 8008fa6:	bfcc      	ite	gt
 8008fa8:	465e      	movgt	r6, fp
 8008faa:	2601      	movle	r6, #1
 8008fac:	4456      	add	r6, sl
 8008fae:	2700      	movs	r7, #0
 8008fb0:	9902      	ldr	r1, [sp, #8]
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	4648      	mov	r0, r9
 8008fb8:	f000 faa2 	bl	8009500 <__lshift>
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	9002      	str	r0, [sp, #8]
 8008fc0:	f000 fb0a 	bl	80095d8 <__mcmp>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	dcb4      	bgt.n	8008f32 <_dtoa_r+0xa82>
 8008fc8:	d102      	bne.n	8008fd0 <_dtoa_r+0xb20>
 8008fca:	9b00      	ldr	r3, [sp, #0]
 8008fcc:	07db      	lsls	r3, r3, #31
 8008fce:	d4b0      	bmi.n	8008f32 <_dtoa_r+0xa82>
 8008fd0:	4633      	mov	r3, r6
 8008fd2:	461e      	mov	r6, r3
 8008fd4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fd8:	2a30      	cmp	r2, #48	@ 0x30
 8008fda:	d0fa      	beq.n	8008fd2 <_dtoa_r+0xb22>
 8008fdc:	e4b5      	b.n	800894a <_dtoa_r+0x49a>
 8008fde:	459a      	cmp	sl, r3
 8008fe0:	d1a8      	bne.n	8008f34 <_dtoa_r+0xa84>
 8008fe2:	2331      	movs	r3, #49	@ 0x31
 8008fe4:	f108 0801 	add.w	r8, r8, #1
 8008fe8:	f88a 3000 	strb.w	r3, [sl]
 8008fec:	e4ad      	b.n	800894a <_dtoa_r+0x49a>
 8008fee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ff0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800904c <_dtoa_r+0xb9c>
 8008ff4:	b11b      	cbz	r3, 8008ffe <_dtoa_r+0xb4e>
 8008ff6:	f10a 0308 	add.w	r3, sl, #8
 8008ffa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008ffc:	6013      	str	r3, [r2, #0]
 8008ffe:	4650      	mov	r0, sl
 8009000:	b017      	add	sp, #92	@ 0x5c
 8009002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009006:	9b07      	ldr	r3, [sp, #28]
 8009008:	2b01      	cmp	r3, #1
 800900a:	f77f ae2e 	ble.w	8008c6a <_dtoa_r+0x7ba>
 800900e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009010:	9308      	str	r3, [sp, #32]
 8009012:	2001      	movs	r0, #1
 8009014:	e64d      	b.n	8008cb2 <_dtoa_r+0x802>
 8009016:	f1bb 0f00 	cmp.w	fp, #0
 800901a:	f77f aed9 	ble.w	8008dd0 <_dtoa_r+0x920>
 800901e:	4656      	mov	r6, sl
 8009020:	9802      	ldr	r0, [sp, #8]
 8009022:	4621      	mov	r1, r4
 8009024:	f7ff f9bb 	bl	800839e <quorem>
 8009028:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800902c:	f806 3b01 	strb.w	r3, [r6], #1
 8009030:	eba6 020a 	sub.w	r2, r6, sl
 8009034:	4593      	cmp	fp, r2
 8009036:	ddb4      	ble.n	8008fa2 <_dtoa_r+0xaf2>
 8009038:	9902      	ldr	r1, [sp, #8]
 800903a:	2300      	movs	r3, #0
 800903c:	220a      	movs	r2, #10
 800903e:	4648      	mov	r0, r9
 8009040:	f000 f8ba 	bl	80091b8 <__multadd>
 8009044:	9002      	str	r0, [sp, #8]
 8009046:	e7eb      	b.n	8009020 <_dtoa_r+0xb70>
 8009048:	0800b220 	.word	0x0800b220
 800904c:	0800b1a4 	.word	0x0800b1a4

08009050 <_free_r>:
 8009050:	b538      	push	{r3, r4, r5, lr}
 8009052:	4605      	mov	r5, r0
 8009054:	2900      	cmp	r1, #0
 8009056:	d041      	beq.n	80090dc <_free_r+0x8c>
 8009058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800905c:	1f0c      	subs	r4, r1, #4
 800905e:	2b00      	cmp	r3, #0
 8009060:	bfb8      	it	lt
 8009062:	18e4      	addlt	r4, r4, r3
 8009064:	f7fe fb74 	bl	8007750 <__malloc_lock>
 8009068:	4a1d      	ldr	r2, [pc, #116]	@ (80090e0 <_free_r+0x90>)
 800906a:	6813      	ldr	r3, [r2, #0]
 800906c:	b933      	cbnz	r3, 800907c <_free_r+0x2c>
 800906e:	6063      	str	r3, [r4, #4]
 8009070:	6014      	str	r4, [r2, #0]
 8009072:	4628      	mov	r0, r5
 8009074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009078:	f7fe bb70 	b.w	800775c <__malloc_unlock>
 800907c:	42a3      	cmp	r3, r4
 800907e:	d908      	bls.n	8009092 <_free_r+0x42>
 8009080:	6820      	ldr	r0, [r4, #0]
 8009082:	1821      	adds	r1, r4, r0
 8009084:	428b      	cmp	r3, r1
 8009086:	bf01      	itttt	eq
 8009088:	6819      	ldreq	r1, [r3, #0]
 800908a:	685b      	ldreq	r3, [r3, #4]
 800908c:	1809      	addeq	r1, r1, r0
 800908e:	6021      	streq	r1, [r4, #0]
 8009090:	e7ed      	b.n	800906e <_free_r+0x1e>
 8009092:	461a      	mov	r2, r3
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	b10b      	cbz	r3, 800909c <_free_r+0x4c>
 8009098:	42a3      	cmp	r3, r4
 800909a:	d9fa      	bls.n	8009092 <_free_r+0x42>
 800909c:	6811      	ldr	r1, [r2, #0]
 800909e:	1850      	adds	r0, r2, r1
 80090a0:	42a0      	cmp	r0, r4
 80090a2:	d10b      	bne.n	80090bc <_free_r+0x6c>
 80090a4:	6820      	ldr	r0, [r4, #0]
 80090a6:	4401      	add	r1, r0
 80090a8:	1850      	adds	r0, r2, r1
 80090aa:	4283      	cmp	r3, r0
 80090ac:	6011      	str	r1, [r2, #0]
 80090ae:	d1e0      	bne.n	8009072 <_free_r+0x22>
 80090b0:	6818      	ldr	r0, [r3, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	6053      	str	r3, [r2, #4]
 80090b6:	4408      	add	r0, r1
 80090b8:	6010      	str	r0, [r2, #0]
 80090ba:	e7da      	b.n	8009072 <_free_r+0x22>
 80090bc:	d902      	bls.n	80090c4 <_free_r+0x74>
 80090be:	230c      	movs	r3, #12
 80090c0:	602b      	str	r3, [r5, #0]
 80090c2:	e7d6      	b.n	8009072 <_free_r+0x22>
 80090c4:	6820      	ldr	r0, [r4, #0]
 80090c6:	1821      	adds	r1, r4, r0
 80090c8:	428b      	cmp	r3, r1
 80090ca:	bf04      	itt	eq
 80090cc:	6819      	ldreq	r1, [r3, #0]
 80090ce:	685b      	ldreq	r3, [r3, #4]
 80090d0:	6063      	str	r3, [r4, #4]
 80090d2:	bf04      	itt	eq
 80090d4:	1809      	addeq	r1, r1, r0
 80090d6:	6021      	streq	r1, [r4, #0]
 80090d8:	6054      	str	r4, [r2, #4]
 80090da:	e7ca      	b.n	8009072 <_free_r+0x22>
 80090dc:	bd38      	pop	{r3, r4, r5, pc}
 80090de:	bf00      	nop
 80090e0:	20000360 	.word	0x20000360

080090e4 <malloc>:
 80090e4:	4b02      	ldr	r3, [pc, #8]	@ (80090f0 <malloc+0xc>)
 80090e6:	4601      	mov	r1, r0
 80090e8:	6818      	ldr	r0, [r3, #0]
 80090ea:	f7fe bab1 	b.w	8007650 <_malloc_r>
 80090ee:	bf00      	nop
 80090f0:	20000018 	.word	0x20000018

080090f4 <_Balloc>:
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	69c6      	ldr	r6, [r0, #28]
 80090f8:	4604      	mov	r4, r0
 80090fa:	460d      	mov	r5, r1
 80090fc:	b976      	cbnz	r6, 800911c <_Balloc+0x28>
 80090fe:	2010      	movs	r0, #16
 8009100:	f7ff fff0 	bl	80090e4 <malloc>
 8009104:	4602      	mov	r2, r0
 8009106:	61e0      	str	r0, [r4, #28]
 8009108:	b920      	cbnz	r0, 8009114 <_Balloc+0x20>
 800910a:	4b18      	ldr	r3, [pc, #96]	@ (800916c <_Balloc+0x78>)
 800910c:	4818      	ldr	r0, [pc, #96]	@ (8009170 <_Balloc+0x7c>)
 800910e:	216b      	movs	r1, #107	@ 0x6b
 8009110:	f000 fd88 	bl	8009c24 <__assert_func>
 8009114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009118:	6006      	str	r6, [r0, #0]
 800911a:	60c6      	str	r6, [r0, #12]
 800911c:	69e6      	ldr	r6, [r4, #28]
 800911e:	68f3      	ldr	r3, [r6, #12]
 8009120:	b183      	cbz	r3, 8009144 <_Balloc+0x50>
 8009122:	69e3      	ldr	r3, [r4, #28]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800912a:	b9b8      	cbnz	r0, 800915c <_Balloc+0x68>
 800912c:	2101      	movs	r1, #1
 800912e:	fa01 f605 	lsl.w	r6, r1, r5
 8009132:	1d72      	adds	r2, r6, #5
 8009134:	0092      	lsls	r2, r2, #2
 8009136:	4620      	mov	r0, r4
 8009138:	f7fe fa54 	bl	80075e4 <_calloc_r>
 800913c:	b160      	cbz	r0, 8009158 <_Balloc+0x64>
 800913e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009142:	e00e      	b.n	8009162 <_Balloc+0x6e>
 8009144:	2221      	movs	r2, #33	@ 0x21
 8009146:	2104      	movs	r1, #4
 8009148:	4620      	mov	r0, r4
 800914a:	f7fe fa4b 	bl	80075e4 <_calloc_r>
 800914e:	69e3      	ldr	r3, [r4, #28]
 8009150:	60f0      	str	r0, [r6, #12]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1e4      	bne.n	8009122 <_Balloc+0x2e>
 8009158:	2000      	movs	r0, #0
 800915a:	bd70      	pop	{r4, r5, r6, pc}
 800915c:	6802      	ldr	r2, [r0, #0]
 800915e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009162:	2300      	movs	r3, #0
 8009164:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009168:	e7f7      	b.n	800915a <_Balloc+0x66>
 800916a:	bf00      	nop
 800916c:	0800b1b1 	.word	0x0800b1b1
 8009170:	0800b231 	.word	0x0800b231

08009174 <_Bfree>:
 8009174:	b570      	push	{r4, r5, r6, lr}
 8009176:	69c6      	ldr	r6, [r0, #28]
 8009178:	4605      	mov	r5, r0
 800917a:	460c      	mov	r4, r1
 800917c:	b976      	cbnz	r6, 800919c <_Bfree+0x28>
 800917e:	2010      	movs	r0, #16
 8009180:	f7ff ffb0 	bl	80090e4 <malloc>
 8009184:	4602      	mov	r2, r0
 8009186:	61e8      	str	r0, [r5, #28]
 8009188:	b920      	cbnz	r0, 8009194 <_Bfree+0x20>
 800918a:	4b09      	ldr	r3, [pc, #36]	@ (80091b0 <_Bfree+0x3c>)
 800918c:	4809      	ldr	r0, [pc, #36]	@ (80091b4 <_Bfree+0x40>)
 800918e:	218f      	movs	r1, #143	@ 0x8f
 8009190:	f000 fd48 	bl	8009c24 <__assert_func>
 8009194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009198:	6006      	str	r6, [r0, #0]
 800919a:	60c6      	str	r6, [r0, #12]
 800919c:	b13c      	cbz	r4, 80091ae <_Bfree+0x3a>
 800919e:	69eb      	ldr	r3, [r5, #28]
 80091a0:	6862      	ldr	r2, [r4, #4]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091a8:	6021      	str	r1, [r4, #0]
 80091aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091ae:	bd70      	pop	{r4, r5, r6, pc}
 80091b0:	0800b1b1 	.word	0x0800b1b1
 80091b4:	0800b231 	.word	0x0800b231

080091b8 <__multadd>:
 80091b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091bc:	690d      	ldr	r5, [r1, #16]
 80091be:	4607      	mov	r7, r0
 80091c0:	460c      	mov	r4, r1
 80091c2:	461e      	mov	r6, r3
 80091c4:	f101 0c14 	add.w	ip, r1, #20
 80091c8:	2000      	movs	r0, #0
 80091ca:	f8dc 3000 	ldr.w	r3, [ip]
 80091ce:	b299      	uxth	r1, r3
 80091d0:	fb02 6101 	mla	r1, r2, r1, r6
 80091d4:	0c1e      	lsrs	r6, r3, #16
 80091d6:	0c0b      	lsrs	r3, r1, #16
 80091d8:	fb02 3306 	mla	r3, r2, r6, r3
 80091dc:	b289      	uxth	r1, r1
 80091de:	3001      	adds	r0, #1
 80091e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091e4:	4285      	cmp	r5, r0
 80091e6:	f84c 1b04 	str.w	r1, [ip], #4
 80091ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091ee:	dcec      	bgt.n	80091ca <__multadd+0x12>
 80091f0:	b30e      	cbz	r6, 8009236 <__multadd+0x7e>
 80091f2:	68a3      	ldr	r3, [r4, #8]
 80091f4:	42ab      	cmp	r3, r5
 80091f6:	dc19      	bgt.n	800922c <__multadd+0x74>
 80091f8:	6861      	ldr	r1, [r4, #4]
 80091fa:	4638      	mov	r0, r7
 80091fc:	3101      	adds	r1, #1
 80091fe:	f7ff ff79 	bl	80090f4 <_Balloc>
 8009202:	4680      	mov	r8, r0
 8009204:	b928      	cbnz	r0, 8009212 <__multadd+0x5a>
 8009206:	4602      	mov	r2, r0
 8009208:	4b0c      	ldr	r3, [pc, #48]	@ (800923c <__multadd+0x84>)
 800920a:	480d      	ldr	r0, [pc, #52]	@ (8009240 <__multadd+0x88>)
 800920c:	21ba      	movs	r1, #186	@ 0xba
 800920e:	f000 fd09 	bl	8009c24 <__assert_func>
 8009212:	6922      	ldr	r2, [r4, #16]
 8009214:	3202      	adds	r2, #2
 8009216:	f104 010c 	add.w	r1, r4, #12
 800921a:	0092      	lsls	r2, r2, #2
 800921c:	300c      	adds	r0, #12
 800921e:	f7ff f8b0 	bl	8008382 <memcpy>
 8009222:	4621      	mov	r1, r4
 8009224:	4638      	mov	r0, r7
 8009226:	f7ff ffa5 	bl	8009174 <_Bfree>
 800922a:	4644      	mov	r4, r8
 800922c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009230:	3501      	adds	r5, #1
 8009232:	615e      	str	r6, [r3, #20]
 8009234:	6125      	str	r5, [r4, #16]
 8009236:	4620      	mov	r0, r4
 8009238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800923c:	0800b220 	.word	0x0800b220
 8009240:	0800b231 	.word	0x0800b231

08009244 <__hi0bits>:
 8009244:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009248:	4603      	mov	r3, r0
 800924a:	bf36      	itet	cc
 800924c:	0403      	lslcc	r3, r0, #16
 800924e:	2000      	movcs	r0, #0
 8009250:	2010      	movcc	r0, #16
 8009252:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009256:	bf3c      	itt	cc
 8009258:	021b      	lslcc	r3, r3, #8
 800925a:	3008      	addcc	r0, #8
 800925c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009260:	bf3c      	itt	cc
 8009262:	011b      	lslcc	r3, r3, #4
 8009264:	3004      	addcc	r0, #4
 8009266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800926a:	bf3c      	itt	cc
 800926c:	009b      	lslcc	r3, r3, #2
 800926e:	3002      	addcc	r0, #2
 8009270:	2b00      	cmp	r3, #0
 8009272:	db05      	blt.n	8009280 <__hi0bits+0x3c>
 8009274:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009278:	f100 0001 	add.w	r0, r0, #1
 800927c:	bf08      	it	eq
 800927e:	2020      	moveq	r0, #32
 8009280:	4770      	bx	lr

08009282 <__lo0bits>:
 8009282:	6803      	ldr	r3, [r0, #0]
 8009284:	4602      	mov	r2, r0
 8009286:	f013 0007 	ands.w	r0, r3, #7
 800928a:	d00b      	beq.n	80092a4 <__lo0bits+0x22>
 800928c:	07d9      	lsls	r1, r3, #31
 800928e:	d421      	bmi.n	80092d4 <__lo0bits+0x52>
 8009290:	0798      	lsls	r0, r3, #30
 8009292:	bf49      	itett	mi
 8009294:	085b      	lsrmi	r3, r3, #1
 8009296:	089b      	lsrpl	r3, r3, #2
 8009298:	2001      	movmi	r0, #1
 800929a:	6013      	strmi	r3, [r2, #0]
 800929c:	bf5c      	itt	pl
 800929e:	6013      	strpl	r3, [r2, #0]
 80092a0:	2002      	movpl	r0, #2
 80092a2:	4770      	bx	lr
 80092a4:	b299      	uxth	r1, r3
 80092a6:	b909      	cbnz	r1, 80092ac <__lo0bits+0x2a>
 80092a8:	0c1b      	lsrs	r3, r3, #16
 80092aa:	2010      	movs	r0, #16
 80092ac:	b2d9      	uxtb	r1, r3
 80092ae:	b909      	cbnz	r1, 80092b4 <__lo0bits+0x32>
 80092b0:	3008      	adds	r0, #8
 80092b2:	0a1b      	lsrs	r3, r3, #8
 80092b4:	0719      	lsls	r1, r3, #28
 80092b6:	bf04      	itt	eq
 80092b8:	091b      	lsreq	r3, r3, #4
 80092ba:	3004      	addeq	r0, #4
 80092bc:	0799      	lsls	r1, r3, #30
 80092be:	bf04      	itt	eq
 80092c0:	089b      	lsreq	r3, r3, #2
 80092c2:	3002      	addeq	r0, #2
 80092c4:	07d9      	lsls	r1, r3, #31
 80092c6:	d403      	bmi.n	80092d0 <__lo0bits+0x4e>
 80092c8:	085b      	lsrs	r3, r3, #1
 80092ca:	f100 0001 	add.w	r0, r0, #1
 80092ce:	d003      	beq.n	80092d8 <__lo0bits+0x56>
 80092d0:	6013      	str	r3, [r2, #0]
 80092d2:	4770      	bx	lr
 80092d4:	2000      	movs	r0, #0
 80092d6:	4770      	bx	lr
 80092d8:	2020      	movs	r0, #32
 80092da:	4770      	bx	lr

080092dc <__i2b>:
 80092dc:	b510      	push	{r4, lr}
 80092de:	460c      	mov	r4, r1
 80092e0:	2101      	movs	r1, #1
 80092e2:	f7ff ff07 	bl	80090f4 <_Balloc>
 80092e6:	4602      	mov	r2, r0
 80092e8:	b928      	cbnz	r0, 80092f6 <__i2b+0x1a>
 80092ea:	4b05      	ldr	r3, [pc, #20]	@ (8009300 <__i2b+0x24>)
 80092ec:	4805      	ldr	r0, [pc, #20]	@ (8009304 <__i2b+0x28>)
 80092ee:	f240 1145 	movw	r1, #325	@ 0x145
 80092f2:	f000 fc97 	bl	8009c24 <__assert_func>
 80092f6:	2301      	movs	r3, #1
 80092f8:	6144      	str	r4, [r0, #20]
 80092fa:	6103      	str	r3, [r0, #16]
 80092fc:	bd10      	pop	{r4, pc}
 80092fe:	bf00      	nop
 8009300:	0800b220 	.word	0x0800b220
 8009304:	0800b231 	.word	0x0800b231

08009308 <__multiply>:
 8009308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800930c:	4617      	mov	r7, r2
 800930e:	690a      	ldr	r2, [r1, #16]
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	429a      	cmp	r2, r3
 8009314:	bfa8      	it	ge
 8009316:	463b      	movge	r3, r7
 8009318:	4689      	mov	r9, r1
 800931a:	bfa4      	itt	ge
 800931c:	460f      	movge	r7, r1
 800931e:	4699      	movge	r9, r3
 8009320:	693d      	ldr	r5, [r7, #16]
 8009322:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	6879      	ldr	r1, [r7, #4]
 800932a:	eb05 060a 	add.w	r6, r5, sl
 800932e:	42b3      	cmp	r3, r6
 8009330:	b085      	sub	sp, #20
 8009332:	bfb8      	it	lt
 8009334:	3101      	addlt	r1, #1
 8009336:	f7ff fedd 	bl	80090f4 <_Balloc>
 800933a:	b930      	cbnz	r0, 800934a <__multiply+0x42>
 800933c:	4602      	mov	r2, r0
 800933e:	4b41      	ldr	r3, [pc, #260]	@ (8009444 <__multiply+0x13c>)
 8009340:	4841      	ldr	r0, [pc, #260]	@ (8009448 <__multiply+0x140>)
 8009342:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009346:	f000 fc6d 	bl	8009c24 <__assert_func>
 800934a:	f100 0414 	add.w	r4, r0, #20
 800934e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009352:	4623      	mov	r3, r4
 8009354:	2200      	movs	r2, #0
 8009356:	4573      	cmp	r3, lr
 8009358:	d320      	bcc.n	800939c <__multiply+0x94>
 800935a:	f107 0814 	add.w	r8, r7, #20
 800935e:	f109 0114 	add.w	r1, r9, #20
 8009362:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009366:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800936a:	9302      	str	r3, [sp, #8]
 800936c:	1beb      	subs	r3, r5, r7
 800936e:	3b15      	subs	r3, #21
 8009370:	f023 0303 	bic.w	r3, r3, #3
 8009374:	3304      	adds	r3, #4
 8009376:	3715      	adds	r7, #21
 8009378:	42bd      	cmp	r5, r7
 800937a:	bf38      	it	cc
 800937c:	2304      	movcc	r3, #4
 800937e:	9301      	str	r3, [sp, #4]
 8009380:	9b02      	ldr	r3, [sp, #8]
 8009382:	9103      	str	r1, [sp, #12]
 8009384:	428b      	cmp	r3, r1
 8009386:	d80c      	bhi.n	80093a2 <__multiply+0x9a>
 8009388:	2e00      	cmp	r6, #0
 800938a:	dd03      	ble.n	8009394 <__multiply+0x8c>
 800938c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009390:	2b00      	cmp	r3, #0
 8009392:	d055      	beq.n	8009440 <__multiply+0x138>
 8009394:	6106      	str	r6, [r0, #16]
 8009396:	b005      	add	sp, #20
 8009398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800939c:	f843 2b04 	str.w	r2, [r3], #4
 80093a0:	e7d9      	b.n	8009356 <__multiply+0x4e>
 80093a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80093a6:	f1ba 0f00 	cmp.w	sl, #0
 80093aa:	d01f      	beq.n	80093ec <__multiply+0xe4>
 80093ac:	46c4      	mov	ip, r8
 80093ae:	46a1      	mov	r9, r4
 80093b0:	2700      	movs	r7, #0
 80093b2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80093b6:	f8d9 3000 	ldr.w	r3, [r9]
 80093ba:	fa1f fb82 	uxth.w	fp, r2
 80093be:	b29b      	uxth	r3, r3
 80093c0:	fb0a 330b 	mla	r3, sl, fp, r3
 80093c4:	443b      	add	r3, r7
 80093c6:	f8d9 7000 	ldr.w	r7, [r9]
 80093ca:	0c12      	lsrs	r2, r2, #16
 80093cc:	0c3f      	lsrs	r7, r7, #16
 80093ce:	fb0a 7202 	mla	r2, sl, r2, r7
 80093d2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093dc:	4565      	cmp	r5, ip
 80093de:	f849 3b04 	str.w	r3, [r9], #4
 80093e2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80093e6:	d8e4      	bhi.n	80093b2 <__multiply+0xaa>
 80093e8:	9b01      	ldr	r3, [sp, #4]
 80093ea:	50e7      	str	r7, [r4, r3]
 80093ec:	9b03      	ldr	r3, [sp, #12]
 80093ee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80093f2:	3104      	adds	r1, #4
 80093f4:	f1b9 0f00 	cmp.w	r9, #0
 80093f8:	d020      	beq.n	800943c <__multiply+0x134>
 80093fa:	6823      	ldr	r3, [r4, #0]
 80093fc:	4647      	mov	r7, r8
 80093fe:	46a4      	mov	ip, r4
 8009400:	f04f 0a00 	mov.w	sl, #0
 8009404:	f8b7 b000 	ldrh.w	fp, [r7]
 8009408:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800940c:	fb09 220b 	mla	r2, r9, fp, r2
 8009410:	4452      	add	r2, sl
 8009412:	b29b      	uxth	r3, r3
 8009414:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009418:	f84c 3b04 	str.w	r3, [ip], #4
 800941c:	f857 3b04 	ldr.w	r3, [r7], #4
 8009420:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009424:	f8bc 3000 	ldrh.w	r3, [ip]
 8009428:	fb09 330a 	mla	r3, r9, sl, r3
 800942c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009430:	42bd      	cmp	r5, r7
 8009432:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009436:	d8e5      	bhi.n	8009404 <__multiply+0xfc>
 8009438:	9a01      	ldr	r2, [sp, #4]
 800943a:	50a3      	str	r3, [r4, r2]
 800943c:	3404      	adds	r4, #4
 800943e:	e79f      	b.n	8009380 <__multiply+0x78>
 8009440:	3e01      	subs	r6, #1
 8009442:	e7a1      	b.n	8009388 <__multiply+0x80>
 8009444:	0800b220 	.word	0x0800b220
 8009448:	0800b231 	.word	0x0800b231

0800944c <__pow5mult>:
 800944c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009450:	4615      	mov	r5, r2
 8009452:	f012 0203 	ands.w	r2, r2, #3
 8009456:	4607      	mov	r7, r0
 8009458:	460e      	mov	r6, r1
 800945a:	d007      	beq.n	800946c <__pow5mult+0x20>
 800945c:	4c25      	ldr	r4, [pc, #148]	@ (80094f4 <__pow5mult+0xa8>)
 800945e:	3a01      	subs	r2, #1
 8009460:	2300      	movs	r3, #0
 8009462:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009466:	f7ff fea7 	bl	80091b8 <__multadd>
 800946a:	4606      	mov	r6, r0
 800946c:	10ad      	asrs	r5, r5, #2
 800946e:	d03d      	beq.n	80094ec <__pow5mult+0xa0>
 8009470:	69fc      	ldr	r4, [r7, #28]
 8009472:	b97c      	cbnz	r4, 8009494 <__pow5mult+0x48>
 8009474:	2010      	movs	r0, #16
 8009476:	f7ff fe35 	bl	80090e4 <malloc>
 800947a:	4602      	mov	r2, r0
 800947c:	61f8      	str	r0, [r7, #28]
 800947e:	b928      	cbnz	r0, 800948c <__pow5mult+0x40>
 8009480:	4b1d      	ldr	r3, [pc, #116]	@ (80094f8 <__pow5mult+0xac>)
 8009482:	481e      	ldr	r0, [pc, #120]	@ (80094fc <__pow5mult+0xb0>)
 8009484:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009488:	f000 fbcc 	bl	8009c24 <__assert_func>
 800948c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009490:	6004      	str	r4, [r0, #0]
 8009492:	60c4      	str	r4, [r0, #12]
 8009494:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009498:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800949c:	b94c      	cbnz	r4, 80094b2 <__pow5mult+0x66>
 800949e:	f240 2171 	movw	r1, #625	@ 0x271
 80094a2:	4638      	mov	r0, r7
 80094a4:	f7ff ff1a 	bl	80092dc <__i2b>
 80094a8:	2300      	movs	r3, #0
 80094aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80094ae:	4604      	mov	r4, r0
 80094b0:	6003      	str	r3, [r0, #0]
 80094b2:	f04f 0900 	mov.w	r9, #0
 80094b6:	07eb      	lsls	r3, r5, #31
 80094b8:	d50a      	bpl.n	80094d0 <__pow5mult+0x84>
 80094ba:	4631      	mov	r1, r6
 80094bc:	4622      	mov	r2, r4
 80094be:	4638      	mov	r0, r7
 80094c0:	f7ff ff22 	bl	8009308 <__multiply>
 80094c4:	4631      	mov	r1, r6
 80094c6:	4680      	mov	r8, r0
 80094c8:	4638      	mov	r0, r7
 80094ca:	f7ff fe53 	bl	8009174 <_Bfree>
 80094ce:	4646      	mov	r6, r8
 80094d0:	106d      	asrs	r5, r5, #1
 80094d2:	d00b      	beq.n	80094ec <__pow5mult+0xa0>
 80094d4:	6820      	ldr	r0, [r4, #0]
 80094d6:	b938      	cbnz	r0, 80094e8 <__pow5mult+0x9c>
 80094d8:	4622      	mov	r2, r4
 80094da:	4621      	mov	r1, r4
 80094dc:	4638      	mov	r0, r7
 80094de:	f7ff ff13 	bl	8009308 <__multiply>
 80094e2:	6020      	str	r0, [r4, #0]
 80094e4:	f8c0 9000 	str.w	r9, [r0]
 80094e8:	4604      	mov	r4, r0
 80094ea:	e7e4      	b.n	80094b6 <__pow5mult+0x6a>
 80094ec:	4630      	mov	r0, r6
 80094ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094f2:	bf00      	nop
 80094f4:	0800b2e4 	.word	0x0800b2e4
 80094f8:	0800b1b1 	.word	0x0800b1b1
 80094fc:	0800b231 	.word	0x0800b231

08009500 <__lshift>:
 8009500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009504:	460c      	mov	r4, r1
 8009506:	6849      	ldr	r1, [r1, #4]
 8009508:	6923      	ldr	r3, [r4, #16]
 800950a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800950e:	68a3      	ldr	r3, [r4, #8]
 8009510:	4607      	mov	r7, r0
 8009512:	4691      	mov	r9, r2
 8009514:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009518:	f108 0601 	add.w	r6, r8, #1
 800951c:	42b3      	cmp	r3, r6
 800951e:	db0b      	blt.n	8009538 <__lshift+0x38>
 8009520:	4638      	mov	r0, r7
 8009522:	f7ff fde7 	bl	80090f4 <_Balloc>
 8009526:	4605      	mov	r5, r0
 8009528:	b948      	cbnz	r0, 800953e <__lshift+0x3e>
 800952a:	4602      	mov	r2, r0
 800952c:	4b28      	ldr	r3, [pc, #160]	@ (80095d0 <__lshift+0xd0>)
 800952e:	4829      	ldr	r0, [pc, #164]	@ (80095d4 <__lshift+0xd4>)
 8009530:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009534:	f000 fb76 	bl	8009c24 <__assert_func>
 8009538:	3101      	adds	r1, #1
 800953a:	005b      	lsls	r3, r3, #1
 800953c:	e7ee      	b.n	800951c <__lshift+0x1c>
 800953e:	2300      	movs	r3, #0
 8009540:	f100 0114 	add.w	r1, r0, #20
 8009544:	f100 0210 	add.w	r2, r0, #16
 8009548:	4618      	mov	r0, r3
 800954a:	4553      	cmp	r3, sl
 800954c:	db33      	blt.n	80095b6 <__lshift+0xb6>
 800954e:	6920      	ldr	r0, [r4, #16]
 8009550:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009554:	f104 0314 	add.w	r3, r4, #20
 8009558:	f019 091f 	ands.w	r9, r9, #31
 800955c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009560:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009564:	d02b      	beq.n	80095be <__lshift+0xbe>
 8009566:	f1c9 0e20 	rsb	lr, r9, #32
 800956a:	468a      	mov	sl, r1
 800956c:	2200      	movs	r2, #0
 800956e:	6818      	ldr	r0, [r3, #0]
 8009570:	fa00 f009 	lsl.w	r0, r0, r9
 8009574:	4310      	orrs	r0, r2
 8009576:	f84a 0b04 	str.w	r0, [sl], #4
 800957a:	f853 2b04 	ldr.w	r2, [r3], #4
 800957e:	459c      	cmp	ip, r3
 8009580:	fa22 f20e 	lsr.w	r2, r2, lr
 8009584:	d8f3      	bhi.n	800956e <__lshift+0x6e>
 8009586:	ebac 0304 	sub.w	r3, ip, r4
 800958a:	3b15      	subs	r3, #21
 800958c:	f023 0303 	bic.w	r3, r3, #3
 8009590:	3304      	adds	r3, #4
 8009592:	f104 0015 	add.w	r0, r4, #21
 8009596:	4560      	cmp	r0, ip
 8009598:	bf88      	it	hi
 800959a:	2304      	movhi	r3, #4
 800959c:	50ca      	str	r2, [r1, r3]
 800959e:	b10a      	cbz	r2, 80095a4 <__lshift+0xa4>
 80095a0:	f108 0602 	add.w	r6, r8, #2
 80095a4:	3e01      	subs	r6, #1
 80095a6:	4638      	mov	r0, r7
 80095a8:	612e      	str	r6, [r5, #16]
 80095aa:	4621      	mov	r1, r4
 80095ac:	f7ff fde2 	bl	8009174 <_Bfree>
 80095b0:	4628      	mov	r0, r5
 80095b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80095ba:	3301      	adds	r3, #1
 80095bc:	e7c5      	b.n	800954a <__lshift+0x4a>
 80095be:	3904      	subs	r1, #4
 80095c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80095c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80095c8:	459c      	cmp	ip, r3
 80095ca:	d8f9      	bhi.n	80095c0 <__lshift+0xc0>
 80095cc:	e7ea      	b.n	80095a4 <__lshift+0xa4>
 80095ce:	bf00      	nop
 80095d0:	0800b220 	.word	0x0800b220
 80095d4:	0800b231 	.word	0x0800b231

080095d8 <__mcmp>:
 80095d8:	690a      	ldr	r2, [r1, #16]
 80095da:	4603      	mov	r3, r0
 80095dc:	6900      	ldr	r0, [r0, #16]
 80095de:	1a80      	subs	r0, r0, r2
 80095e0:	b530      	push	{r4, r5, lr}
 80095e2:	d10e      	bne.n	8009602 <__mcmp+0x2a>
 80095e4:	3314      	adds	r3, #20
 80095e6:	3114      	adds	r1, #20
 80095e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80095ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80095f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80095f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80095f8:	4295      	cmp	r5, r2
 80095fa:	d003      	beq.n	8009604 <__mcmp+0x2c>
 80095fc:	d205      	bcs.n	800960a <__mcmp+0x32>
 80095fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009602:	bd30      	pop	{r4, r5, pc}
 8009604:	42a3      	cmp	r3, r4
 8009606:	d3f3      	bcc.n	80095f0 <__mcmp+0x18>
 8009608:	e7fb      	b.n	8009602 <__mcmp+0x2a>
 800960a:	2001      	movs	r0, #1
 800960c:	e7f9      	b.n	8009602 <__mcmp+0x2a>
	...

08009610 <__mdiff>:
 8009610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	4689      	mov	r9, r1
 8009616:	4606      	mov	r6, r0
 8009618:	4611      	mov	r1, r2
 800961a:	4648      	mov	r0, r9
 800961c:	4614      	mov	r4, r2
 800961e:	f7ff ffdb 	bl	80095d8 <__mcmp>
 8009622:	1e05      	subs	r5, r0, #0
 8009624:	d112      	bne.n	800964c <__mdiff+0x3c>
 8009626:	4629      	mov	r1, r5
 8009628:	4630      	mov	r0, r6
 800962a:	f7ff fd63 	bl	80090f4 <_Balloc>
 800962e:	4602      	mov	r2, r0
 8009630:	b928      	cbnz	r0, 800963e <__mdiff+0x2e>
 8009632:	4b3f      	ldr	r3, [pc, #252]	@ (8009730 <__mdiff+0x120>)
 8009634:	f240 2137 	movw	r1, #567	@ 0x237
 8009638:	483e      	ldr	r0, [pc, #248]	@ (8009734 <__mdiff+0x124>)
 800963a:	f000 faf3 	bl	8009c24 <__assert_func>
 800963e:	2301      	movs	r3, #1
 8009640:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009644:	4610      	mov	r0, r2
 8009646:	b003      	add	sp, #12
 8009648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800964c:	bfbc      	itt	lt
 800964e:	464b      	movlt	r3, r9
 8009650:	46a1      	movlt	r9, r4
 8009652:	4630      	mov	r0, r6
 8009654:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009658:	bfba      	itte	lt
 800965a:	461c      	movlt	r4, r3
 800965c:	2501      	movlt	r5, #1
 800965e:	2500      	movge	r5, #0
 8009660:	f7ff fd48 	bl	80090f4 <_Balloc>
 8009664:	4602      	mov	r2, r0
 8009666:	b918      	cbnz	r0, 8009670 <__mdiff+0x60>
 8009668:	4b31      	ldr	r3, [pc, #196]	@ (8009730 <__mdiff+0x120>)
 800966a:	f240 2145 	movw	r1, #581	@ 0x245
 800966e:	e7e3      	b.n	8009638 <__mdiff+0x28>
 8009670:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009674:	6926      	ldr	r6, [r4, #16]
 8009676:	60c5      	str	r5, [r0, #12]
 8009678:	f109 0310 	add.w	r3, r9, #16
 800967c:	f109 0514 	add.w	r5, r9, #20
 8009680:	f104 0e14 	add.w	lr, r4, #20
 8009684:	f100 0b14 	add.w	fp, r0, #20
 8009688:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800968c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009690:	9301      	str	r3, [sp, #4]
 8009692:	46d9      	mov	r9, fp
 8009694:	f04f 0c00 	mov.w	ip, #0
 8009698:	9b01      	ldr	r3, [sp, #4]
 800969a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800969e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80096a2:	9301      	str	r3, [sp, #4]
 80096a4:	fa1f f38a 	uxth.w	r3, sl
 80096a8:	4619      	mov	r1, r3
 80096aa:	b283      	uxth	r3, r0
 80096ac:	1acb      	subs	r3, r1, r3
 80096ae:	0c00      	lsrs	r0, r0, #16
 80096b0:	4463      	add	r3, ip
 80096b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80096b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80096c0:	4576      	cmp	r6, lr
 80096c2:	f849 3b04 	str.w	r3, [r9], #4
 80096c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096ca:	d8e5      	bhi.n	8009698 <__mdiff+0x88>
 80096cc:	1b33      	subs	r3, r6, r4
 80096ce:	3b15      	subs	r3, #21
 80096d0:	f023 0303 	bic.w	r3, r3, #3
 80096d4:	3415      	adds	r4, #21
 80096d6:	3304      	adds	r3, #4
 80096d8:	42a6      	cmp	r6, r4
 80096da:	bf38      	it	cc
 80096dc:	2304      	movcc	r3, #4
 80096de:	441d      	add	r5, r3
 80096e0:	445b      	add	r3, fp
 80096e2:	461e      	mov	r6, r3
 80096e4:	462c      	mov	r4, r5
 80096e6:	4544      	cmp	r4, r8
 80096e8:	d30e      	bcc.n	8009708 <__mdiff+0xf8>
 80096ea:	f108 0103 	add.w	r1, r8, #3
 80096ee:	1b49      	subs	r1, r1, r5
 80096f0:	f021 0103 	bic.w	r1, r1, #3
 80096f4:	3d03      	subs	r5, #3
 80096f6:	45a8      	cmp	r8, r5
 80096f8:	bf38      	it	cc
 80096fa:	2100      	movcc	r1, #0
 80096fc:	440b      	add	r3, r1
 80096fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009702:	b191      	cbz	r1, 800972a <__mdiff+0x11a>
 8009704:	6117      	str	r7, [r2, #16]
 8009706:	e79d      	b.n	8009644 <__mdiff+0x34>
 8009708:	f854 1b04 	ldr.w	r1, [r4], #4
 800970c:	46e6      	mov	lr, ip
 800970e:	0c08      	lsrs	r0, r1, #16
 8009710:	fa1c fc81 	uxtah	ip, ip, r1
 8009714:	4471      	add	r1, lr
 8009716:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800971a:	b289      	uxth	r1, r1
 800971c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009720:	f846 1b04 	str.w	r1, [r6], #4
 8009724:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009728:	e7dd      	b.n	80096e6 <__mdiff+0xd6>
 800972a:	3f01      	subs	r7, #1
 800972c:	e7e7      	b.n	80096fe <__mdiff+0xee>
 800972e:	bf00      	nop
 8009730:	0800b220 	.word	0x0800b220
 8009734:	0800b231 	.word	0x0800b231

08009738 <__d2b>:
 8009738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800973c:	460f      	mov	r7, r1
 800973e:	2101      	movs	r1, #1
 8009740:	ec59 8b10 	vmov	r8, r9, d0
 8009744:	4616      	mov	r6, r2
 8009746:	f7ff fcd5 	bl	80090f4 <_Balloc>
 800974a:	4604      	mov	r4, r0
 800974c:	b930      	cbnz	r0, 800975c <__d2b+0x24>
 800974e:	4602      	mov	r2, r0
 8009750:	4b23      	ldr	r3, [pc, #140]	@ (80097e0 <__d2b+0xa8>)
 8009752:	4824      	ldr	r0, [pc, #144]	@ (80097e4 <__d2b+0xac>)
 8009754:	f240 310f 	movw	r1, #783	@ 0x30f
 8009758:	f000 fa64 	bl	8009c24 <__assert_func>
 800975c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009764:	b10d      	cbz	r5, 800976a <__d2b+0x32>
 8009766:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800976a:	9301      	str	r3, [sp, #4]
 800976c:	f1b8 0300 	subs.w	r3, r8, #0
 8009770:	d023      	beq.n	80097ba <__d2b+0x82>
 8009772:	4668      	mov	r0, sp
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	f7ff fd84 	bl	8009282 <__lo0bits>
 800977a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800977e:	b1d0      	cbz	r0, 80097b6 <__d2b+0x7e>
 8009780:	f1c0 0320 	rsb	r3, r0, #32
 8009784:	fa02 f303 	lsl.w	r3, r2, r3
 8009788:	430b      	orrs	r3, r1
 800978a:	40c2      	lsrs	r2, r0
 800978c:	6163      	str	r3, [r4, #20]
 800978e:	9201      	str	r2, [sp, #4]
 8009790:	9b01      	ldr	r3, [sp, #4]
 8009792:	61a3      	str	r3, [r4, #24]
 8009794:	2b00      	cmp	r3, #0
 8009796:	bf0c      	ite	eq
 8009798:	2201      	moveq	r2, #1
 800979a:	2202      	movne	r2, #2
 800979c:	6122      	str	r2, [r4, #16]
 800979e:	b1a5      	cbz	r5, 80097ca <__d2b+0x92>
 80097a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80097a4:	4405      	add	r5, r0
 80097a6:	603d      	str	r5, [r7, #0]
 80097a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80097ac:	6030      	str	r0, [r6, #0]
 80097ae:	4620      	mov	r0, r4
 80097b0:	b003      	add	sp, #12
 80097b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097b6:	6161      	str	r1, [r4, #20]
 80097b8:	e7ea      	b.n	8009790 <__d2b+0x58>
 80097ba:	a801      	add	r0, sp, #4
 80097bc:	f7ff fd61 	bl	8009282 <__lo0bits>
 80097c0:	9b01      	ldr	r3, [sp, #4]
 80097c2:	6163      	str	r3, [r4, #20]
 80097c4:	3020      	adds	r0, #32
 80097c6:	2201      	movs	r2, #1
 80097c8:	e7e8      	b.n	800979c <__d2b+0x64>
 80097ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80097d2:	6038      	str	r0, [r7, #0]
 80097d4:	6918      	ldr	r0, [r3, #16]
 80097d6:	f7ff fd35 	bl	8009244 <__hi0bits>
 80097da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097de:	e7e5      	b.n	80097ac <__d2b+0x74>
 80097e0:	0800b220 	.word	0x0800b220
 80097e4:	0800b231 	.word	0x0800b231

080097e8 <__ssputs_r>:
 80097e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097ec:	688e      	ldr	r6, [r1, #8]
 80097ee:	461f      	mov	r7, r3
 80097f0:	42be      	cmp	r6, r7
 80097f2:	680b      	ldr	r3, [r1, #0]
 80097f4:	4682      	mov	sl, r0
 80097f6:	460c      	mov	r4, r1
 80097f8:	4690      	mov	r8, r2
 80097fa:	d82d      	bhi.n	8009858 <__ssputs_r+0x70>
 80097fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009800:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009804:	d026      	beq.n	8009854 <__ssputs_r+0x6c>
 8009806:	6965      	ldr	r5, [r4, #20]
 8009808:	6909      	ldr	r1, [r1, #16]
 800980a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800980e:	eba3 0901 	sub.w	r9, r3, r1
 8009812:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009816:	1c7b      	adds	r3, r7, #1
 8009818:	444b      	add	r3, r9
 800981a:	106d      	asrs	r5, r5, #1
 800981c:	429d      	cmp	r5, r3
 800981e:	bf38      	it	cc
 8009820:	461d      	movcc	r5, r3
 8009822:	0553      	lsls	r3, r2, #21
 8009824:	d527      	bpl.n	8009876 <__ssputs_r+0x8e>
 8009826:	4629      	mov	r1, r5
 8009828:	f7fd ff12 	bl	8007650 <_malloc_r>
 800982c:	4606      	mov	r6, r0
 800982e:	b360      	cbz	r0, 800988a <__ssputs_r+0xa2>
 8009830:	6921      	ldr	r1, [r4, #16]
 8009832:	464a      	mov	r2, r9
 8009834:	f7fe fda5 	bl	8008382 <memcpy>
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800983e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009842:	81a3      	strh	r3, [r4, #12]
 8009844:	6126      	str	r6, [r4, #16]
 8009846:	6165      	str	r5, [r4, #20]
 8009848:	444e      	add	r6, r9
 800984a:	eba5 0509 	sub.w	r5, r5, r9
 800984e:	6026      	str	r6, [r4, #0]
 8009850:	60a5      	str	r5, [r4, #8]
 8009852:	463e      	mov	r6, r7
 8009854:	42be      	cmp	r6, r7
 8009856:	d900      	bls.n	800985a <__ssputs_r+0x72>
 8009858:	463e      	mov	r6, r7
 800985a:	6820      	ldr	r0, [r4, #0]
 800985c:	4632      	mov	r2, r6
 800985e:	4641      	mov	r1, r8
 8009860:	f000 f9c6 	bl	8009bf0 <memmove>
 8009864:	68a3      	ldr	r3, [r4, #8]
 8009866:	1b9b      	subs	r3, r3, r6
 8009868:	60a3      	str	r3, [r4, #8]
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	4433      	add	r3, r6
 800986e:	6023      	str	r3, [r4, #0]
 8009870:	2000      	movs	r0, #0
 8009872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009876:	462a      	mov	r2, r5
 8009878:	f000 fa04 	bl	8009c84 <_realloc_r>
 800987c:	4606      	mov	r6, r0
 800987e:	2800      	cmp	r0, #0
 8009880:	d1e0      	bne.n	8009844 <__ssputs_r+0x5c>
 8009882:	6921      	ldr	r1, [r4, #16]
 8009884:	4650      	mov	r0, sl
 8009886:	f7ff fbe3 	bl	8009050 <_free_r>
 800988a:	230c      	movs	r3, #12
 800988c:	f8ca 3000 	str.w	r3, [sl]
 8009890:	89a3      	ldrh	r3, [r4, #12]
 8009892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009896:	81a3      	strh	r3, [r4, #12]
 8009898:	f04f 30ff 	mov.w	r0, #4294967295
 800989c:	e7e9      	b.n	8009872 <__ssputs_r+0x8a>
	...

080098a0 <_svfiprintf_r>:
 80098a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a4:	4698      	mov	r8, r3
 80098a6:	898b      	ldrh	r3, [r1, #12]
 80098a8:	061b      	lsls	r3, r3, #24
 80098aa:	b09d      	sub	sp, #116	@ 0x74
 80098ac:	4607      	mov	r7, r0
 80098ae:	460d      	mov	r5, r1
 80098b0:	4614      	mov	r4, r2
 80098b2:	d510      	bpl.n	80098d6 <_svfiprintf_r+0x36>
 80098b4:	690b      	ldr	r3, [r1, #16]
 80098b6:	b973      	cbnz	r3, 80098d6 <_svfiprintf_r+0x36>
 80098b8:	2140      	movs	r1, #64	@ 0x40
 80098ba:	f7fd fec9 	bl	8007650 <_malloc_r>
 80098be:	6028      	str	r0, [r5, #0]
 80098c0:	6128      	str	r0, [r5, #16]
 80098c2:	b930      	cbnz	r0, 80098d2 <_svfiprintf_r+0x32>
 80098c4:	230c      	movs	r3, #12
 80098c6:	603b      	str	r3, [r7, #0]
 80098c8:	f04f 30ff 	mov.w	r0, #4294967295
 80098cc:	b01d      	add	sp, #116	@ 0x74
 80098ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d2:	2340      	movs	r3, #64	@ 0x40
 80098d4:	616b      	str	r3, [r5, #20]
 80098d6:	2300      	movs	r3, #0
 80098d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80098da:	2320      	movs	r3, #32
 80098dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80098e4:	2330      	movs	r3, #48	@ 0x30
 80098e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009a84 <_svfiprintf_r+0x1e4>
 80098ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098ee:	f04f 0901 	mov.w	r9, #1
 80098f2:	4623      	mov	r3, r4
 80098f4:	469a      	mov	sl, r3
 80098f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098fa:	b10a      	cbz	r2, 8009900 <_svfiprintf_r+0x60>
 80098fc:	2a25      	cmp	r2, #37	@ 0x25
 80098fe:	d1f9      	bne.n	80098f4 <_svfiprintf_r+0x54>
 8009900:	ebba 0b04 	subs.w	fp, sl, r4
 8009904:	d00b      	beq.n	800991e <_svfiprintf_r+0x7e>
 8009906:	465b      	mov	r3, fp
 8009908:	4622      	mov	r2, r4
 800990a:	4629      	mov	r1, r5
 800990c:	4638      	mov	r0, r7
 800990e:	f7ff ff6b 	bl	80097e8 <__ssputs_r>
 8009912:	3001      	adds	r0, #1
 8009914:	f000 80a7 	beq.w	8009a66 <_svfiprintf_r+0x1c6>
 8009918:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800991a:	445a      	add	r2, fp
 800991c:	9209      	str	r2, [sp, #36]	@ 0x24
 800991e:	f89a 3000 	ldrb.w	r3, [sl]
 8009922:	2b00      	cmp	r3, #0
 8009924:	f000 809f 	beq.w	8009a66 <_svfiprintf_r+0x1c6>
 8009928:	2300      	movs	r3, #0
 800992a:	f04f 32ff 	mov.w	r2, #4294967295
 800992e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009932:	f10a 0a01 	add.w	sl, sl, #1
 8009936:	9304      	str	r3, [sp, #16]
 8009938:	9307      	str	r3, [sp, #28]
 800993a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800993e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009940:	4654      	mov	r4, sl
 8009942:	2205      	movs	r2, #5
 8009944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009948:	484e      	ldr	r0, [pc, #312]	@ (8009a84 <_svfiprintf_r+0x1e4>)
 800994a:	f7f6 fc41 	bl	80001d0 <memchr>
 800994e:	9a04      	ldr	r2, [sp, #16]
 8009950:	b9d8      	cbnz	r0, 800998a <_svfiprintf_r+0xea>
 8009952:	06d0      	lsls	r0, r2, #27
 8009954:	bf44      	itt	mi
 8009956:	2320      	movmi	r3, #32
 8009958:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800995c:	0711      	lsls	r1, r2, #28
 800995e:	bf44      	itt	mi
 8009960:	232b      	movmi	r3, #43	@ 0x2b
 8009962:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009966:	f89a 3000 	ldrb.w	r3, [sl]
 800996a:	2b2a      	cmp	r3, #42	@ 0x2a
 800996c:	d015      	beq.n	800999a <_svfiprintf_r+0xfa>
 800996e:	9a07      	ldr	r2, [sp, #28]
 8009970:	4654      	mov	r4, sl
 8009972:	2000      	movs	r0, #0
 8009974:	f04f 0c0a 	mov.w	ip, #10
 8009978:	4621      	mov	r1, r4
 800997a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800997e:	3b30      	subs	r3, #48	@ 0x30
 8009980:	2b09      	cmp	r3, #9
 8009982:	d94b      	bls.n	8009a1c <_svfiprintf_r+0x17c>
 8009984:	b1b0      	cbz	r0, 80099b4 <_svfiprintf_r+0x114>
 8009986:	9207      	str	r2, [sp, #28]
 8009988:	e014      	b.n	80099b4 <_svfiprintf_r+0x114>
 800998a:	eba0 0308 	sub.w	r3, r0, r8
 800998e:	fa09 f303 	lsl.w	r3, r9, r3
 8009992:	4313      	orrs	r3, r2
 8009994:	9304      	str	r3, [sp, #16]
 8009996:	46a2      	mov	sl, r4
 8009998:	e7d2      	b.n	8009940 <_svfiprintf_r+0xa0>
 800999a:	9b03      	ldr	r3, [sp, #12]
 800999c:	1d19      	adds	r1, r3, #4
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	9103      	str	r1, [sp, #12]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	bfbb      	ittet	lt
 80099a6:	425b      	neglt	r3, r3
 80099a8:	f042 0202 	orrlt.w	r2, r2, #2
 80099ac:	9307      	strge	r3, [sp, #28]
 80099ae:	9307      	strlt	r3, [sp, #28]
 80099b0:	bfb8      	it	lt
 80099b2:	9204      	strlt	r2, [sp, #16]
 80099b4:	7823      	ldrb	r3, [r4, #0]
 80099b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80099b8:	d10a      	bne.n	80099d0 <_svfiprintf_r+0x130>
 80099ba:	7863      	ldrb	r3, [r4, #1]
 80099bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80099be:	d132      	bne.n	8009a26 <_svfiprintf_r+0x186>
 80099c0:	9b03      	ldr	r3, [sp, #12]
 80099c2:	1d1a      	adds	r2, r3, #4
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	9203      	str	r2, [sp, #12]
 80099c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099cc:	3402      	adds	r4, #2
 80099ce:	9305      	str	r3, [sp, #20]
 80099d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009a94 <_svfiprintf_r+0x1f4>
 80099d4:	7821      	ldrb	r1, [r4, #0]
 80099d6:	2203      	movs	r2, #3
 80099d8:	4650      	mov	r0, sl
 80099da:	f7f6 fbf9 	bl	80001d0 <memchr>
 80099de:	b138      	cbz	r0, 80099f0 <_svfiprintf_r+0x150>
 80099e0:	9b04      	ldr	r3, [sp, #16]
 80099e2:	eba0 000a 	sub.w	r0, r0, sl
 80099e6:	2240      	movs	r2, #64	@ 0x40
 80099e8:	4082      	lsls	r2, r0
 80099ea:	4313      	orrs	r3, r2
 80099ec:	3401      	adds	r4, #1
 80099ee:	9304      	str	r3, [sp, #16]
 80099f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f4:	4824      	ldr	r0, [pc, #144]	@ (8009a88 <_svfiprintf_r+0x1e8>)
 80099f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099fa:	2206      	movs	r2, #6
 80099fc:	f7f6 fbe8 	bl	80001d0 <memchr>
 8009a00:	2800      	cmp	r0, #0
 8009a02:	d036      	beq.n	8009a72 <_svfiprintf_r+0x1d2>
 8009a04:	4b21      	ldr	r3, [pc, #132]	@ (8009a8c <_svfiprintf_r+0x1ec>)
 8009a06:	bb1b      	cbnz	r3, 8009a50 <_svfiprintf_r+0x1b0>
 8009a08:	9b03      	ldr	r3, [sp, #12]
 8009a0a:	3307      	adds	r3, #7
 8009a0c:	f023 0307 	bic.w	r3, r3, #7
 8009a10:	3308      	adds	r3, #8
 8009a12:	9303      	str	r3, [sp, #12]
 8009a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a16:	4433      	add	r3, r6
 8009a18:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a1a:	e76a      	b.n	80098f2 <_svfiprintf_r+0x52>
 8009a1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a20:	460c      	mov	r4, r1
 8009a22:	2001      	movs	r0, #1
 8009a24:	e7a8      	b.n	8009978 <_svfiprintf_r+0xd8>
 8009a26:	2300      	movs	r3, #0
 8009a28:	3401      	adds	r4, #1
 8009a2a:	9305      	str	r3, [sp, #20]
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	f04f 0c0a 	mov.w	ip, #10
 8009a32:	4620      	mov	r0, r4
 8009a34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a38:	3a30      	subs	r2, #48	@ 0x30
 8009a3a:	2a09      	cmp	r2, #9
 8009a3c:	d903      	bls.n	8009a46 <_svfiprintf_r+0x1a6>
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d0c6      	beq.n	80099d0 <_svfiprintf_r+0x130>
 8009a42:	9105      	str	r1, [sp, #20]
 8009a44:	e7c4      	b.n	80099d0 <_svfiprintf_r+0x130>
 8009a46:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e7f0      	b.n	8009a32 <_svfiprintf_r+0x192>
 8009a50:	ab03      	add	r3, sp, #12
 8009a52:	9300      	str	r3, [sp, #0]
 8009a54:	462a      	mov	r2, r5
 8009a56:	4b0e      	ldr	r3, [pc, #56]	@ (8009a90 <_svfiprintf_r+0x1f0>)
 8009a58:	a904      	add	r1, sp, #16
 8009a5a:	4638      	mov	r0, r7
 8009a5c:	f7fd ff24 	bl	80078a8 <_printf_float>
 8009a60:	1c42      	adds	r2, r0, #1
 8009a62:	4606      	mov	r6, r0
 8009a64:	d1d6      	bne.n	8009a14 <_svfiprintf_r+0x174>
 8009a66:	89ab      	ldrh	r3, [r5, #12]
 8009a68:	065b      	lsls	r3, r3, #25
 8009a6a:	f53f af2d 	bmi.w	80098c8 <_svfiprintf_r+0x28>
 8009a6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a70:	e72c      	b.n	80098cc <_svfiprintf_r+0x2c>
 8009a72:	ab03      	add	r3, sp, #12
 8009a74:	9300      	str	r3, [sp, #0]
 8009a76:	462a      	mov	r2, r5
 8009a78:	4b05      	ldr	r3, [pc, #20]	@ (8009a90 <_svfiprintf_r+0x1f0>)
 8009a7a:	a904      	add	r1, sp, #16
 8009a7c:	4638      	mov	r0, r7
 8009a7e:	f7fe f9ab 	bl	8007dd8 <_printf_i>
 8009a82:	e7ed      	b.n	8009a60 <_svfiprintf_r+0x1c0>
 8009a84:	0800b28a 	.word	0x0800b28a
 8009a88:	0800b294 	.word	0x0800b294
 8009a8c:	080078a9 	.word	0x080078a9
 8009a90:	080097e9 	.word	0x080097e9
 8009a94:	0800b290 	.word	0x0800b290

08009a98 <__sflush_r>:
 8009a98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa0:	0716      	lsls	r6, r2, #28
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	d454      	bmi.n	8009b52 <__sflush_r+0xba>
 8009aa8:	684b      	ldr	r3, [r1, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	dc02      	bgt.n	8009ab4 <__sflush_r+0x1c>
 8009aae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	dd48      	ble.n	8009b46 <__sflush_r+0xae>
 8009ab4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ab6:	2e00      	cmp	r6, #0
 8009ab8:	d045      	beq.n	8009b46 <__sflush_r+0xae>
 8009aba:	2300      	movs	r3, #0
 8009abc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009ac0:	682f      	ldr	r7, [r5, #0]
 8009ac2:	6a21      	ldr	r1, [r4, #32]
 8009ac4:	602b      	str	r3, [r5, #0]
 8009ac6:	d030      	beq.n	8009b2a <__sflush_r+0x92>
 8009ac8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009aca:	89a3      	ldrh	r3, [r4, #12]
 8009acc:	0759      	lsls	r1, r3, #29
 8009ace:	d505      	bpl.n	8009adc <__sflush_r+0x44>
 8009ad0:	6863      	ldr	r3, [r4, #4]
 8009ad2:	1ad2      	subs	r2, r2, r3
 8009ad4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ad6:	b10b      	cbz	r3, 8009adc <__sflush_r+0x44>
 8009ad8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ada:	1ad2      	subs	r2, r2, r3
 8009adc:	2300      	movs	r3, #0
 8009ade:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ae0:	6a21      	ldr	r1, [r4, #32]
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	47b0      	blx	r6
 8009ae6:	1c43      	adds	r3, r0, #1
 8009ae8:	89a3      	ldrh	r3, [r4, #12]
 8009aea:	d106      	bne.n	8009afa <__sflush_r+0x62>
 8009aec:	6829      	ldr	r1, [r5, #0]
 8009aee:	291d      	cmp	r1, #29
 8009af0:	d82b      	bhi.n	8009b4a <__sflush_r+0xb2>
 8009af2:	4a2a      	ldr	r2, [pc, #168]	@ (8009b9c <__sflush_r+0x104>)
 8009af4:	40ca      	lsrs	r2, r1
 8009af6:	07d6      	lsls	r6, r2, #31
 8009af8:	d527      	bpl.n	8009b4a <__sflush_r+0xb2>
 8009afa:	2200      	movs	r2, #0
 8009afc:	6062      	str	r2, [r4, #4]
 8009afe:	04d9      	lsls	r1, r3, #19
 8009b00:	6922      	ldr	r2, [r4, #16]
 8009b02:	6022      	str	r2, [r4, #0]
 8009b04:	d504      	bpl.n	8009b10 <__sflush_r+0x78>
 8009b06:	1c42      	adds	r2, r0, #1
 8009b08:	d101      	bne.n	8009b0e <__sflush_r+0x76>
 8009b0a:	682b      	ldr	r3, [r5, #0]
 8009b0c:	b903      	cbnz	r3, 8009b10 <__sflush_r+0x78>
 8009b0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b12:	602f      	str	r7, [r5, #0]
 8009b14:	b1b9      	cbz	r1, 8009b46 <__sflush_r+0xae>
 8009b16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b1a:	4299      	cmp	r1, r3
 8009b1c:	d002      	beq.n	8009b24 <__sflush_r+0x8c>
 8009b1e:	4628      	mov	r0, r5
 8009b20:	f7ff fa96 	bl	8009050 <_free_r>
 8009b24:	2300      	movs	r3, #0
 8009b26:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b28:	e00d      	b.n	8009b46 <__sflush_r+0xae>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	47b0      	blx	r6
 8009b30:	4602      	mov	r2, r0
 8009b32:	1c50      	adds	r0, r2, #1
 8009b34:	d1c9      	bne.n	8009aca <__sflush_r+0x32>
 8009b36:	682b      	ldr	r3, [r5, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d0c6      	beq.n	8009aca <__sflush_r+0x32>
 8009b3c:	2b1d      	cmp	r3, #29
 8009b3e:	d001      	beq.n	8009b44 <__sflush_r+0xac>
 8009b40:	2b16      	cmp	r3, #22
 8009b42:	d11e      	bne.n	8009b82 <__sflush_r+0xea>
 8009b44:	602f      	str	r7, [r5, #0]
 8009b46:	2000      	movs	r0, #0
 8009b48:	e022      	b.n	8009b90 <__sflush_r+0xf8>
 8009b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b4e:	b21b      	sxth	r3, r3
 8009b50:	e01b      	b.n	8009b8a <__sflush_r+0xf2>
 8009b52:	690f      	ldr	r7, [r1, #16]
 8009b54:	2f00      	cmp	r7, #0
 8009b56:	d0f6      	beq.n	8009b46 <__sflush_r+0xae>
 8009b58:	0793      	lsls	r3, r2, #30
 8009b5a:	680e      	ldr	r6, [r1, #0]
 8009b5c:	bf08      	it	eq
 8009b5e:	694b      	ldreq	r3, [r1, #20]
 8009b60:	600f      	str	r7, [r1, #0]
 8009b62:	bf18      	it	ne
 8009b64:	2300      	movne	r3, #0
 8009b66:	eba6 0807 	sub.w	r8, r6, r7
 8009b6a:	608b      	str	r3, [r1, #8]
 8009b6c:	f1b8 0f00 	cmp.w	r8, #0
 8009b70:	dde9      	ble.n	8009b46 <__sflush_r+0xae>
 8009b72:	6a21      	ldr	r1, [r4, #32]
 8009b74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009b76:	4643      	mov	r3, r8
 8009b78:	463a      	mov	r2, r7
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	47b0      	blx	r6
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	dc08      	bgt.n	8009b94 <__sflush_r+0xfc>
 8009b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b8a:	81a3      	strh	r3, [r4, #12]
 8009b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b94:	4407      	add	r7, r0
 8009b96:	eba8 0800 	sub.w	r8, r8, r0
 8009b9a:	e7e7      	b.n	8009b6c <__sflush_r+0xd4>
 8009b9c:	20400001 	.word	0x20400001

08009ba0 <_fflush_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	690b      	ldr	r3, [r1, #16]
 8009ba4:	4605      	mov	r5, r0
 8009ba6:	460c      	mov	r4, r1
 8009ba8:	b913      	cbnz	r3, 8009bb0 <_fflush_r+0x10>
 8009baa:	2500      	movs	r5, #0
 8009bac:	4628      	mov	r0, r5
 8009bae:	bd38      	pop	{r3, r4, r5, pc}
 8009bb0:	b118      	cbz	r0, 8009bba <_fflush_r+0x1a>
 8009bb2:	6a03      	ldr	r3, [r0, #32]
 8009bb4:	b90b      	cbnz	r3, 8009bba <_fflush_r+0x1a>
 8009bb6:	f7fe fab9 	bl	800812c <__sinit>
 8009bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d0f3      	beq.n	8009baa <_fflush_r+0xa>
 8009bc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009bc4:	07d0      	lsls	r0, r2, #31
 8009bc6:	d404      	bmi.n	8009bd2 <_fflush_r+0x32>
 8009bc8:	0599      	lsls	r1, r3, #22
 8009bca:	d402      	bmi.n	8009bd2 <_fflush_r+0x32>
 8009bcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bce:	f7fe fbd6 	bl	800837e <__retarget_lock_acquire_recursive>
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	4621      	mov	r1, r4
 8009bd6:	f7ff ff5f 	bl	8009a98 <__sflush_r>
 8009bda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bdc:	07da      	lsls	r2, r3, #31
 8009bde:	4605      	mov	r5, r0
 8009be0:	d4e4      	bmi.n	8009bac <_fflush_r+0xc>
 8009be2:	89a3      	ldrh	r3, [r4, #12]
 8009be4:	059b      	lsls	r3, r3, #22
 8009be6:	d4e1      	bmi.n	8009bac <_fflush_r+0xc>
 8009be8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bea:	f7fe fbc9 	bl	8008380 <__retarget_lock_release_recursive>
 8009bee:	e7dd      	b.n	8009bac <_fflush_r+0xc>

08009bf0 <memmove>:
 8009bf0:	4288      	cmp	r0, r1
 8009bf2:	b510      	push	{r4, lr}
 8009bf4:	eb01 0402 	add.w	r4, r1, r2
 8009bf8:	d902      	bls.n	8009c00 <memmove+0x10>
 8009bfa:	4284      	cmp	r4, r0
 8009bfc:	4623      	mov	r3, r4
 8009bfe:	d807      	bhi.n	8009c10 <memmove+0x20>
 8009c00:	1e43      	subs	r3, r0, #1
 8009c02:	42a1      	cmp	r1, r4
 8009c04:	d008      	beq.n	8009c18 <memmove+0x28>
 8009c06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c0e:	e7f8      	b.n	8009c02 <memmove+0x12>
 8009c10:	4402      	add	r2, r0
 8009c12:	4601      	mov	r1, r0
 8009c14:	428a      	cmp	r2, r1
 8009c16:	d100      	bne.n	8009c1a <memmove+0x2a>
 8009c18:	bd10      	pop	{r4, pc}
 8009c1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c22:	e7f7      	b.n	8009c14 <memmove+0x24>

08009c24 <__assert_func>:
 8009c24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c26:	4614      	mov	r4, r2
 8009c28:	461a      	mov	r2, r3
 8009c2a:	4b09      	ldr	r3, [pc, #36]	@ (8009c50 <__assert_func+0x2c>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4605      	mov	r5, r0
 8009c30:	68d8      	ldr	r0, [r3, #12]
 8009c32:	b14c      	cbz	r4, 8009c48 <__assert_func+0x24>
 8009c34:	4b07      	ldr	r3, [pc, #28]	@ (8009c54 <__assert_func+0x30>)
 8009c36:	9100      	str	r1, [sp, #0]
 8009c38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c3c:	4906      	ldr	r1, [pc, #24]	@ (8009c58 <__assert_func+0x34>)
 8009c3e:	462b      	mov	r3, r5
 8009c40:	f000 f85c 	bl	8009cfc <fiprintf>
 8009c44:	f000 f86c 	bl	8009d20 <abort>
 8009c48:	4b04      	ldr	r3, [pc, #16]	@ (8009c5c <__assert_func+0x38>)
 8009c4a:	461c      	mov	r4, r3
 8009c4c:	e7f3      	b.n	8009c36 <__assert_func+0x12>
 8009c4e:	bf00      	nop
 8009c50:	20000018 	.word	0x20000018
 8009c54:	0800b2a5 	.word	0x0800b2a5
 8009c58:	0800b2b2 	.word	0x0800b2b2
 8009c5c:	0800b2e0 	.word	0x0800b2e0

08009c60 <__ascii_mbtowc>:
 8009c60:	b082      	sub	sp, #8
 8009c62:	b901      	cbnz	r1, 8009c66 <__ascii_mbtowc+0x6>
 8009c64:	a901      	add	r1, sp, #4
 8009c66:	b142      	cbz	r2, 8009c7a <__ascii_mbtowc+0x1a>
 8009c68:	b14b      	cbz	r3, 8009c7e <__ascii_mbtowc+0x1e>
 8009c6a:	7813      	ldrb	r3, [r2, #0]
 8009c6c:	600b      	str	r3, [r1, #0]
 8009c6e:	7812      	ldrb	r2, [r2, #0]
 8009c70:	1e10      	subs	r0, r2, #0
 8009c72:	bf18      	it	ne
 8009c74:	2001      	movne	r0, #1
 8009c76:	b002      	add	sp, #8
 8009c78:	4770      	bx	lr
 8009c7a:	4610      	mov	r0, r2
 8009c7c:	e7fb      	b.n	8009c76 <__ascii_mbtowc+0x16>
 8009c7e:	f06f 0001 	mvn.w	r0, #1
 8009c82:	e7f8      	b.n	8009c76 <__ascii_mbtowc+0x16>

08009c84 <_realloc_r>:
 8009c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c88:	4607      	mov	r7, r0
 8009c8a:	4614      	mov	r4, r2
 8009c8c:	460d      	mov	r5, r1
 8009c8e:	b921      	cbnz	r1, 8009c9a <_realloc_r+0x16>
 8009c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c94:	4611      	mov	r1, r2
 8009c96:	f7fd bcdb 	b.w	8007650 <_malloc_r>
 8009c9a:	b92a      	cbnz	r2, 8009ca8 <_realloc_r+0x24>
 8009c9c:	f7ff f9d8 	bl	8009050 <_free_r>
 8009ca0:	4625      	mov	r5, r4
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca8:	f000 f841 	bl	8009d2e <_malloc_usable_size_r>
 8009cac:	4284      	cmp	r4, r0
 8009cae:	4606      	mov	r6, r0
 8009cb0:	d802      	bhi.n	8009cb8 <_realloc_r+0x34>
 8009cb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cb6:	d8f4      	bhi.n	8009ca2 <_realloc_r+0x1e>
 8009cb8:	4621      	mov	r1, r4
 8009cba:	4638      	mov	r0, r7
 8009cbc:	f7fd fcc8 	bl	8007650 <_malloc_r>
 8009cc0:	4680      	mov	r8, r0
 8009cc2:	b908      	cbnz	r0, 8009cc8 <_realloc_r+0x44>
 8009cc4:	4645      	mov	r5, r8
 8009cc6:	e7ec      	b.n	8009ca2 <_realloc_r+0x1e>
 8009cc8:	42b4      	cmp	r4, r6
 8009cca:	4622      	mov	r2, r4
 8009ccc:	4629      	mov	r1, r5
 8009cce:	bf28      	it	cs
 8009cd0:	4632      	movcs	r2, r6
 8009cd2:	f7fe fb56 	bl	8008382 <memcpy>
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	4638      	mov	r0, r7
 8009cda:	f7ff f9b9 	bl	8009050 <_free_r>
 8009cde:	e7f1      	b.n	8009cc4 <_realloc_r+0x40>

08009ce0 <__ascii_wctomb>:
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	4608      	mov	r0, r1
 8009ce4:	b141      	cbz	r1, 8009cf8 <__ascii_wctomb+0x18>
 8009ce6:	2aff      	cmp	r2, #255	@ 0xff
 8009ce8:	d904      	bls.n	8009cf4 <__ascii_wctomb+0x14>
 8009cea:	228a      	movs	r2, #138	@ 0x8a
 8009cec:	601a      	str	r2, [r3, #0]
 8009cee:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf2:	4770      	bx	lr
 8009cf4:	700a      	strb	r2, [r1, #0]
 8009cf6:	2001      	movs	r0, #1
 8009cf8:	4770      	bx	lr
	...

08009cfc <fiprintf>:
 8009cfc:	b40e      	push	{r1, r2, r3}
 8009cfe:	b503      	push	{r0, r1, lr}
 8009d00:	4601      	mov	r1, r0
 8009d02:	ab03      	add	r3, sp, #12
 8009d04:	4805      	ldr	r0, [pc, #20]	@ (8009d1c <fiprintf+0x20>)
 8009d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d0a:	6800      	ldr	r0, [r0, #0]
 8009d0c:	9301      	str	r3, [sp, #4]
 8009d0e:	f000 f83f 	bl	8009d90 <_vfiprintf_r>
 8009d12:	b002      	add	sp, #8
 8009d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d18:	b003      	add	sp, #12
 8009d1a:	4770      	bx	lr
 8009d1c:	20000018 	.word	0x20000018

08009d20 <abort>:
 8009d20:	b508      	push	{r3, lr}
 8009d22:	2006      	movs	r0, #6
 8009d24:	f000 fa08 	bl	800a138 <raise>
 8009d28:	2001      	movs	r0, #1
 8009d2a:	f7f8 fb9c 	bl	8002466 <_exit>

08009d2e <_malloc_usable_size_r>:
 8009d2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d32:	1f18      	subs	r0, r3, #4
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	bfbc      	itt	lt
 8009d38:	580b      	ldrlt	r3, [r1, r0]
 8009d3a:	18c0      	addlt	r0, r0, r3
 8009d3c:	4770      	bx	lr

08009d3e <__sfputc_r>:
 8009d3e:	6893      	ldr	r3, [r2, #8]
 8009d40:	3b01      	subs	r3, #1
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	b410      	push	{r4}
 8009d46:	6093      	str	r3, [r2, #8]
 8009d48:	da08      	bge.n	8009d5c <__sfputc_r+0x1e>
 8009d4a:	6994      	ldr	r4, [r2, #24]
 8009d4c:	42a3      	cmp	r3, r4
 8009d4e:	db01      	blt.n	8009d54 <__sfputc_r+0x16>
 8009d50:	290a      	cmp	r1, #10
 8009d52:	d103      	bne.n	8009d5c <__sfputc_r+0x1e>
 8009d54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d58:	f000 b932 	b.w	8009fc0 <__swbuf_r>
 8009d5c:	6813      	ldr	r3, [r2, #0]
 8009d5e:	1c58      	adds	r0, r3, #1
 8009d60:	6010      	str	r0, [r2, #0]
 8009d62:	7019      	strb	r1, [r3, #0]
 8009d64:	4608      	mov	r0, r1
 8009d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <__sfputs_r>:
 8009d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6e:	4606      	mov	r6, r0
 8009d70:	460f      	mov	r7, r1
 8009d72:	4614      	mov	r4, r2
 8009d74:	18d5      	adds	r5, r2, r3
 8009d76:	42ac      	cmp	r4, r5
 8009d78:	d101      	bne.n	8009d7e <__sfputs_r+0x12>
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	e007      	b.n	8009d8e <__sfputs_r+0x22>
 8009d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d82:	463a      	mov	r2, r7
 8009d84:	4630      	mov	r0, r6
 8009d86:	f7ff ffda 	bl	8009d3e <__sfputc_r>
 8009d8a:	1c43      	adds	r3, r0, #1
 8009d8c:	d1f3      	bne.n	8009d76 <__sfputs_r+0xa>
 8009d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d90 <_vfiprintf_r>:
 8009d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d94:	460d      	mov	r5, r1
 8009d96:	b09d      	sub	sp, #116	@ 0x74
 8009d98:	4614      	mov	r4, r2
 8009d9a:	4698      	mov	r8, r3
 8009d9c:	4606      	mov	r6, r0
 8009d9e:	b118      	cbz	r0, 8009da8 <_vfiprintf_r+0x18>
 8009da0:	6a03      	ldr	r3, [r0, #32]
 8009da2:	b90b      	cbnz	r3, 8009da8 <_vfiprintf_r+0x18>
 8009da4:	f7fe f9c2 	bl	800812c <__sinit>
 8009da8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009daa:	07d9      	lsls	r1, r3, #31
 8009dac:	d405      	bmi.n	8009dba <_vfiprintf_r+0x2a>
 8009dae:	89ab      	ldrh	r3, [r5, #12]
 8009db0:	059a      	lsls	r2, r3, #22
 8009db2:	d402      	bmi.n	8009dba <_vfiprintf_r+0x2a>
 8009db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009db6:	f7fe fae2 	bl	800837e <__retarget_lock_acquire_recursive>
 8009dba:	89ab      	ldrh	r3, [r5, #12]
 8009dbc:	071b      	lsls	r3, r3, #28
 8009dbe:	d501      	bpl.n	8009dc4 <_vfiprintf_r+0x34>
 8009dc0:	692b      	ldr	r3, [r5, #16]
 8009dc2:	b99b      	cbnz	r3, 8009dec <_vfiprintf_r+0x5c>
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	f000 f938 	bl	800a03c <__swsetup_r>
 8009dcc:	b170      	cbz	r0, 8009dec <_vfiprintf_r+0x5c>
 8009dce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dd0:	07dc      	lsls	r4, r3, #31
 8009dd2:	d504      	bpl.n	8009dde <_vfiprintf_r+0x4e>
 8009dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd8:	b01d      	add	sp, #116	@ 0x74
 8009dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dde:	89ab      	ldrh	r3, [r5, #12]
 8009de0:	0598      	lsls	r0, r3, #22
 8009de2:	d4f7      	bmi.n	8009dd4 <_vfiprintf_r+0x44>
 8009de4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009de6:	f7fe facb 	bl	8008380 <__retarget_lock_release_recursive>
 8009dea:	e7f3      	b.n	8009dd4 <_vfiprintf_r+0x44>
 8009dec:	2300      	movs	r3, #0
 8009dee:	9309      	str	r3, [sp, #36]	@ 0x24
 8009df0:	2320      	movs	r3, #32
 8009df2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dfa:	2330      	movs	r3, #48	@ 0x30
 8009dfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009fac <_vfiprintf_r+0x21c>
 8009e00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e04:	f04f 0901 	mov.w	r9, #1
 8009e08:	4623      	mov	r3, r4
 8009e0a:	469a      	mov	sl, r3
 8009e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e10:	b10a      	cbz	r2, 8009e16 <_vfiprintf_r+0x86>
 8009e12:	2a25      	cmp	r2, #37	@ 0x25
 8009e14:	d1f9      	bne.n	8009e0a <_vfiprintf_r+0x7a>
 8009e16:	ebba 0b04 	subs.w	fp, sl, r4
 8009e1a:	d00b      	beq.n	8009e34 <_vfiprintf_r+0xa4>
 8009e1c:	465b      	mov	r3, fp
 8009e1e:	4622      	mov	r2, r4
 8009e20:	4629      	mov	r1, r5
 8009e22:	4630      	mov	r0, r6
 8009e24:	f7ff ffa2 	bl	8009d6c <__sfputs_r>
 8009e28:	3001      	adds	r0, #1
 8009e2a:	f000 80a7 	beq.w	8009f7c <_vfiprintf_r+0x1ec>
 8009e2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e30:	445a      	add	r2, fp
 8009e32:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e34:	f89a 3000 	ldrb.w	r3, [sl]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f000 809f 	beq.w	8009f7c <_vfiprintf_r+0x1ec>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f04f 32ff 	mov.w	r2, #4294967295
 8009e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e48:	f10a 0a01 	add.w	sl, sl, #1
 8009e4c:	9304      	str	r3, [sp, #16]
 8009e4e:	9307      	str	r3, [sp, #28]
 8009e50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e54:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e56:	4654      	mov	r4, sl
 8009e58:	2205      	movs	r2, #5
 8009e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e5e:	4853      	ldr	r0, [pc, #332]	@ (8009fac <_vfiprintf_r+0x21c>)
 8009e60:	f7f6 f9b6 	bl	80001d0 <memchr>
 8009e64:	9a04      	ldr	r2, [sp, #16]
 8009e66:	b9d8      	cbnz	r0, 8009ea0 <_vfiprintf_r+0x110>
 8009e68:	06d1      	lsls	r1, r2, #27
 8009e6a:	bf44      	itt	mi
 8009e6c:	2320      	movmi	r3, #32
 8009e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e72:	0713      	lsls	r3, r2, #28
 8009e74:	bf44      	itt	mi
 8009e76:	232b      	movmi	r3, #43	@ 0x2b
 8009e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e80:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e82:	d015      	beq.n	8009eb0 <_vfiprintf_r+0x120>
 8009e84:	9a07      	ldr	r2, [sp, #28]
 8009e86:	4654      	mov	r4, sl
 8009e88:	2000      	movs	r0, #0
 8009e8a:	f04f 0c0a 	mov.w	ip, #10
 8009e8e:	4621      	mov	r1, r4
 8009e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e94:	3b30      	subs	r3, #48	@ 0x30
 8009e96:	2b09      	cmp	r3, #9
 8009e98:	d94b      	bls.n	8009f32 <_vfiprintf_r+0x1a2>
 8009e9a:	b1b0      	cbz	r0, 8009eca <_vfiprintf_r+0x13a>
 8009e9c:	9207      	str	r2, [sp, #28]
 8009e9e:	e014      	b.n	8009eca <_vfiprintf_r+0x13a>
 8009ea0:	eba0 0308 	sub.w	r3, r0, r8
 8009ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	9304      	str	r3, [sp, #16]
 8009eac:	46a2      	mov	sl, r4
 8009eae:	e7d2      	b.n	8009e56 <_vfiprintf_r+0xc6>
 8009eb0:	9b03      	ldr	r3, [sp, #12]
 8009eb2:	1d19      	adds	r1, r3, #4
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	9103      	str	r1, [sp, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	bfbb      	ittet	lt
 8009ebc:	425b      	neglt	r3, r3
 8009ebe:	f042 0202 	orrlt.w	r2, r2, #2
 8009ec2:	9307      	strge	r3, [sp, #28]
 8009ec4:	9307      	strlt	r3, [sp, #28]
 8009ec6:	bfb8      	it	lt
 8009ec8:	9204      	strlt	r2, [sp, #16]
 8009eca:	7823      	ldrb	r3, [r4, #0]
 8009ecc:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ece:	d10a      	bne.n	8009ee6 <_vfiprintf_r+0x156>
 8009ed0:	7863      	ldrb	r3, [r4, #1]
 8009ed2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ed4:	d132      	bne.n	8009f3c <_vfiprintf_r+0x1ac>
 8009ed6:	9b03      	ldr	r3, [sp, #12]
 8009ed8:	1d1a      	adds	r2, r3, #4
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	9203      	str	r2, [sp, #12]
 8009ede:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ee2:	3402      	adds	r4, #2
 8009ee4:	9305      	str	r3, [sp, #20]
 8009ee6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009fbc <_vfiprintf_r+0x22c>
 8009eea:	7821      	ldrb	r1, [r4, #0]
 8009eec:	2203      	movs	r2, #3
 8009eee:	4650      	mov	r0, sl
 8009ef0:	f7f6 f96e 	bl	80001d0 <memchr>
 8009ef4:	b138      	cbz	r0, 8009f06 <_vfiprintf_r+0x176>
 8009ef6:	9b04      	ldr	r3, [sp, #16]
 8009ef8:	eba0 000a 	sub.w	r0, r0, sl
 8009efc:	2240      	movs	r2, #64	@ 0x40
 8009efe:	4082      	lsls	r2, r0
 8009f00:	4313      	orrs	r3, r2
 8009f02:	3401      	adds	r4, #1
 8009f04:	9304      	str	r3, [sp, #16]
 8009f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f0a:	4829      	ldr	r0, [pc, #164]	@ (8009fb0 <_vfiprintf_r+0x220>)
 8009f0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f10:	2206      	movs	r2, #6
 8009f12:	f7f6 f95d 	bl	80001d0 <memchr>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d03f      	beq.n	8009f9a <_vfiprintf_r+0x20a>
 8009f1a:	4b26      	ldr	r3, [pc, #152]	@ (8009fb4 <_vfiprintf_r+0x224>)
 8009f1c:	bb1b      	cbnz	r3, 8009f66 <_vfiprintf_r+0x1d6>
 8009f1e:	9b03      	ldr	r3, [sp, #12]
 8009f20:	3307      	adds	r3, #7
 8009f22:	f023 0307 	bic.w	r3, r3, #7
 8009f26:	3308      	adds	r3, #8
 8009f28:	9303      	str	r3, [sp, #12]
 8009f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f2c:	443b      	add	r3, r7
 8009f2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f30:	e76a      	b.n	8009e08 <_vfiprintf_r+0x78>
 8009f32:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f36:	460c      	mov	r4, r1
 8009f38:	2001      	movs	r0, #1
 8009f3a:	e7a8      	b.n	8009e8e <_vfiprintf_r+0xfe>
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	3401      	adds	r4, #1
 8009f40:	9305      	str	r3, [sp, #20]
 8009f42:	4619      	mov	r1, r3
 8009f44:	f04f 0c0a 	mov.w	ip, #10
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f4e:	3a30      	subs	r2, #48	@ 0x30
 8009f50:	2a09      	cmp	r2, #9
 8009f52:	d903      	bls.n	8009f5c <_vfiprintf_r+0x1cc>
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d0c6      	beq.n	8009ee6 <_vfiprintf_r+0x156>
 8009f58:	9105      	str	r1, [sp, #20]
 8009f5a:	e7c4      	b.n	8009ee6 <_vfiprintf_r+0x156>
 8009f5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f60:	4604      	mov	r4, r0
 8009f62:	2301      	movs	r3, #1
 8009f64:	e7f0      	b.n	8009f48 <_vfiprintf_r+0x1b8>
 8009f66:	ab03      	add	r3, sp, #12
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	462a      	mov	r2, r5
 8009f6c:	4b12      	ldr	r3, [pc, #72]	@ (8009fb8 <_vfiprintf_r+0x228>)
 8009f6e:	a904      	add	r1, sp, #16
 8009f70:	4630      	mov	r0, r6
 8009f72:	f7fd fc99 	bl	80078a8 <_printf_float>
 8009f76:	4607      	mov	r7, r0
 8009f78:	1c78      	adds	r0, r7, #1
 8009f7a:	d1d6      	bne.n	8009f2a <_vfiprintf_r+0x19a>
 8009f7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f7e:	07d9      	lsls	r1, r3, #31
 8009f80:	d405      	bmi.n	8009f8e <_vfiprintf_r+0x1fe>
 8009f82:	89ab      	ldrh	r3, [r5, #12]
 8009f84:	059a      	lsls	r2, r3, #22
 8009f86:	d402      	bmi.n	8009f8e <_vfiprintf_r+0x1fe>
 8009f88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f8a:	f7fe f9f9 	bl	8008380 <__retarget_lock_release_recursive>
 8009f8e:	89ab      	ldrh	r3, [r5, #12]
 8009f90:	065b      	lsls	r3, r3, #25
 8009f92:	f53f af1f 	bmi.w	8009dd4 <_vfiprintf_r+0x44>
 8009f96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f98:	e71e      	b.n	8009dd8 <_vfiprintf_r+0x48>
 8009f9a:	ab03      	add	r3, sp, #12
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	462a      	mov	r2, r5
 8009fa0:	4b05      	ldr	r3, [pc, #20]	@ (8009fb8 <_vfiprintf_r+0x228>)
 8009fa2:	a904      	add	r1, sp, #16
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	f7fd ff17 	bl	8007dd8 <_printf_i>
 8009faa:	e7e4      	b.n	8009f76 <_vfiprintf_r+0x1e6>
 8009fac:	0800b28a 	.word	0x0800b28a
 8009fb0:	0800b294 	.word	0x0800b294
 8009fb4:	080078a9 	.word	0x080078a9
 8009fb8:	08009d6d 	.word	0x08009d6d
 8009fbc:	0800b290 	.word	0x0800b290

08009fc0 <__swbuf_r>:
 8009fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc2:	460e      	mov	r6, r1
 8009fc4:	4614      	mov	r4, r2
 8009fc6:	4605      	mov	r5, r0
 8009fc8:	b118      	cbz	r0, 8009fd2 <__swbuf_r+0x12>
 8009fca:	6a03      	ldr	r3, [r0, #32]
 8009fcc:	b90b      	cbnz	r3, 8009fd2 <__swbuf_r+0x12>
 8009fce:	f7fe f8ad 	bl	800812c <__sinit>
 8009fd2:	69a3      	ldr	r3, [r4, #24]
 8009fd4:	60a3      	str	r3, [r4, #8]
 8009fd6:	89a3      	ldrh	r3, [r4, #12]
 8009fd8:	071a      	lsls	r2, r3, #28
 8009fda:	d501      	bpl.n	8009fe0 <__swbuf_r+0x20>
 8009fdc:	6923      	ldr	r3, [r4, #16]
 8009fde:	b943      	cbnz	r3, 8009ff2 <__swbuf_r+0x32>
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	f000 f82a 	bl	800a03c <__swsetup_r>
 8009fe8:	b118      	cbz	r0, 8009ff2 <__swbuf_r+0x32>
 8009fea:	f04f 37ff 	mov.w	r7, #4294967295
 8009fee:	4638      	mov	r0, r7
 8009ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ff2:	6823      	ldr	r3, [r4, #0]
 8009ff4:	6922      	ldr	r2, [r4, #16]
 8009ff6:	1a98      	subs	r0, r3, r2
 8009ff8:	6963      	ldr	r3, [r4, #20]
 8009ffa:	b2f6      	uxtb	r6, r6
 8009ffc:	4283      	cmp	r3, r0
 8009ffe:	4637      	mov	r7, r6
 800a000:	dc05      	bgt.n	800a00e <__swbuf_r+0x4e>
 800a002:	4621      	mov	r1, r4
 800a004:	4628      	mov	r0, r5
 800a006:	f7ff fdcb 	bl	8009ba0 <_fflush_r>
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d1ed      	bne.n	8009fea <__swbuf_r+0x2a>
 800a00e:	68a3      	ldr	r3, [r4, #8]
 800a010:	3b01      	subs	r3, #1
 800a012:	60a3      	str	r3, [r4, #8]
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	1c5a      	adds	r2, r3, #1
 800a018:	6022      	str	r2, [r4, #0]
 800a01a:	701e      	strb	r6, [r3, #0]
 800a01c:	6962      	ldr	r2, [r4, #20]
 800a01e:	1c43      	adds	r3, r0, #1
 800a020:	429a      	cmp	r2, r3
 800a022:	d004      	beq.n	800a02e <__swbuf_r+0x6e>
 800a024:	89a3      	ldrh	r3, [r4, #12]
 800a026:	07db      	lsls	r3, r3, #31
 800a028:	d5e1      	bpl.n	8009fee <__swbuf_r+0x2e>
 800a02a:	2e0a      	cmp	r6, #10
 800a02c:	d1df      	bne.n	8009fee <__swbuf_r+0x2e>
 800a02e:	4621      	mov	r1, r4
 800a030:	4628      	mov	r0, r5
 800a032:	f7ff fdb5 	bl	8009ba0 <_fflush_r>
 800a036:	2800      	cmp	r0, #0
 800a038:	d0d9      	beq.n	8009fee <__swbuf_r+0x2e>
 800a03a:	e7d6      	b.n	8009fea <__swbuf_r+0x2a>

0800a03c <__swsetup_r>:
 800a03c:	b538      	push	{r3, r4, r5, lr}
 800a03e:	4b29      	ldr	r3, [pc, #164]	@ (800a0e4 <__swsetup_r+0xa8>)
 800a040:	4605      	mov	r5, r0
 800a042:	6818      	ldr	r0, [r3, #0]
 800a044:	460c      	mov	r4, r1
 800a046:	b118      	cbz	r0, 800a050 <__swsetup_r+0x14>
 800a048:	6a03      	ldr	r3, [r0, #32]
 800a04a:	b90b      	cbnz	r3, 800a050 <__swsetup_r+0x14>
 800a04c:	f7fe f86e 	bl	800812c <__sinit>
 800a050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a054:	0719      	lsls	r1, r3, #28
 800a056:	d422      	bmi.n	800a09e <__swsetup_r+0x62>
 800a058:	06da      	lsls	r2, r3, #27
 800a05a:	d407      	bmi.n	800a06c <__swsetup_r+0x30>
 800a05c:	2209      	movs	r2, #9
 800a05e:	602a      	str	r2, [r5, #0]
 800a060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a064:	81a3      	strh	r3, [r4, #12]
 800a066:	f04f 30ff 	mov.w	r0, #4294967295
 800a06a:	e033      	b.n	800a0d4 <__swsetup_r+0x98>
 800a06c:	0758      	lsls	r0, r3, #29
 800a06e:	d512      	bpl.n	800a096 <__swsetup_r+0x5a>
 800a070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a072:	b141      	cbz	r1, 800a086 <__swsetup_r+0x4a>
 800a074:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a078:	4299      	cmp	r1, r3
 800a07a:	d002      	beq.n	800a082 <__swsetup_r+0x46>
 800a07c:	4628      	mov	r0, r5
 800a07e:	f7fe ffe7 	bl	8009050 <_free_r>
 800a082:	2300      	movs	r3, #0
 800a084:	6363      	str	r3, [r4, #52]	@ 0x34
 800a086:	89a3      	ldrh	r3, [r4, #12]
 800a088:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a08c:	81a3      	strh	r3, [r4, #12]
 800a08e:	2300      	movs	r3, #0
 800a090:	6063      	str	r3, [r4, #4]
 800a092:	6923      	ldr	r3, [r4, #16]
 800a094:	6023      	str	r3, [r4, #0]
 800a096:	89a3      	ldrh	r3, [r4, #12]
 800a098:	f043 0308 	orr.w	r3, r3, #8
 800a09c:	81a3      	strh	r3, [r4, #12]
 800a09e:	6923      	ldr	r3, [r4, #16]
 800a0a0:	b94b      	cbnz	r3, 800a0b6 <__swsetup_r+0x7a>
 800a0a2:	89a3      	ldrh	r3, [r4, #12]
 800a0a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a0a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0ac:	d003      	beq.n	800a0b6 <__swsetup_r+0x7a>
 800a0ae:	4621      	mov	r1, r4
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	f000 f883 	bl	800a1bc <__smakebuf_r>
 800a0b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ba:	f013 0201 	ands.w	r2, r3, #1
 800a0be:	d00a      	beq.n	800a0d6 <__swsetup_r+0x9a>
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	60a2      	str	r2, [r4, #8]
 800a0c4:	6962      	ldr	r2, [r4, #20]
 800a0c6:	4252      	negs	r2, r2
 800a0c8:	61a2      	str	r2, [r4, #24]
 800a0ca:	6922      	ldr	r2, [r4, #16]
 800a0cc:	b942      	cbnz	r2, 800a0e0 <__swsetup_r+0xa4>
 800a0ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a0d2:	d1c5      	bne.n	800a060 <__swsetup_r+0x24>
 800a0d4:	bd38      	pop	{r3, r4, r5, pc}
 800a0d6:	0799      	lsls	r1, r3, #30
 800a0d8:	bf58      	it	pl
 800a0da:	6962      	ldrpl	r2, [r4, #20]
 800a0dc:	60a2      	str	r2, [r4, #8]
 800a0de:	e7f4      	b.n	800a0ca <__swsetup_r+0x8e>
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	e7f7      	b.n	800a0d4 <__swsetup_r+0x98>
 800a0e4:	20000018 	.word	0x20000018

0800a0e8 <_raise_r>:
 800a0e8:	291f      	cmp	r1, #31
 800a0ea:	b538      	push	{r3, r4, r5, lr}
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	d904      	bls.n	800a0fc <_raise_r+0x14>
 800a0f2:	2316      	movs	r3, #22
 800a0f4:	6003      	str	r3, [r0, #0]
 800a0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a0fe:	b112      	cbz	r2, 800a106 <_raise_r+0x1e>
 800a100:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a104:	b94b      	cbnz	r3, 800a11a <_raise_r+0x32>
 800a106:	4628      	mov	r0, r5
 800a108:	f000 f830 	bl	800a16c <_getpid_r>
 800a10c:	4622      	mov	r2, r4
 800a10e:	4601      	mov	r1, r0
 800a110:	4628      	mov	r0, r5
 800a112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a116:	f000 b817 	b.w	800a148 <_kill_r>
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d00a      	beq.n	800a134 <_raise_r+0x4c>
 800a11e:	1c59      	adds	r1, r3, #1
 800a120:	d103      	bne.n	800a12a <_raise_r+0x42>
 800a122:	2316      	movs	r3, #22
 800a124:	6003      	str	r3, [r0, #0]
 800a126:	2001      	movs	r0, #1
 800a128:	e7e7      	b.n	800a0fa <_raise_r+0x12>
 800a12a:	2100      	movs	r1, #0
 800a12c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a130:	4620      	mov	r0, r4
 800a132:	4798      	blx	r3
 800a134:	2000      	movs	r0, #0
 800a136:	e7e0      	b.n	800a0fa <_raise_r+0x12>

0800a138 <raise>:
 800a138:	4b02      	ldr	r3, [pc, #8]	@ (800a144 <raise+0xc>)
 800a13a:	4601      	mov	r1, r0
 800a13c:	6818      	ldr	r0, [r3, #0]
 800a13e:	f7ff bfd3 	b.w	800a0e8 <_raise_r>
 800a142:	bf00      	nop
 800a144:	20000018 	.word	0x20000018

0800a148 <_kill_r>:
 800a148:	b538      	push	{r3, r4, r5, lr}
 800a14a:	4d07      	ldr	r5, [pc, #28]	@ (800a168 <_kill_r+0x20>)
 800a14c:	2300      	movs	r3, #0
 800a14e:	4604      	mov	r4, r0
 800a150:	4608      	mov	r0, r1
 800a152:	4611      	mov	r1, r2
 800a154:	602b      	str	r3, [r5, #0]
 800a156:	f7f8 f976 	bl	8002446 <_kill>
 800a15a:	1c43      	adds	r3, r0, #1
 800a15c:	d102      	bne.n	800a164 <_kill_r+0x1c>
 800a15e:	682b      	ldr	r3, [r5, #0]
 800a160:	b103      	cbz	r3, 800a164 <_kill_r+0x1c>
 800a162:	6023      	str	r3, [r4, #0]
 800a164:	bd38      	pop	{r3, r4, r5, pc}
 800a166:	bf00      	nop
 800a168:	200004a0 	.word	0x200004a0

0800a16c <_getpid_r>:
 800a16c:	f7f8 b963 	b.w	8002436 <_getpid>

0800a170 <__swhatbuf_r>:
 800a170:	b570      	push	{r4, r5, r6, lr}
 800a172:	460c      	mov	r4, r1
 800a174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a178:	2900      	cmp	r1, #0
 800a17a:	b096      	sub	sp, #88	@ 0x58
 800a17c:	4615      	mov	r5, r2
 800a17e:	461e      	mov	r6, r3
 800a180:	da0d      	bge.n	800a19e <__swhatbuf_r+0x2e>
 800a182:	89a3      	ldrh	r3, [r4, #12]
 800a184:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a188:	f04f 0100 	mov.w	r1, #0
 800a18c:	bf14      	ite	ne
 800a18e:	2340      	movne	r3, #64	@ 0x40
 800a190:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a194:	2000      	movs	r0, #0
 800a196:	6031      	str	r1, [r6, #0]
 800a198:	602b      	str	r3, [r5, #0]
 800a19a:	b016      	add	sp, #88	@ 0x58
 800a19c:	bd70      	pop	{r4, r5, r6, pc}
 800a19e:	466a      	mov	r2, sp
 800a1a0:	f000 f848 	bl	800a234 <_fstat_r>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	dbec      	blt.n	800a182 <__swhatbuf_r+0x12>
 800a1a8:	9901      	ldr	r1, [sp, #4]
 800a1aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1b2:	4259      	negs	r1, r3
 800a1b4:	4159      	adcs	r1, r3
 800a1b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1ba:	e7eb      	b.n	800a194 <__swhatbuf_r+0x24>

0800a1bc <__smakebuf_r>:
 800a1bc:	898b      	ldrh	r3, [r1, #12]
 800a1be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1c0:	079d      	lsls	r5, r3, #30
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	460c      	mov	r4, r1
 800a1c6:	d507      	bpl.n	800a1d8 <__smakebuf_r+0x1c>
 800a1c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a1cc:	6023      	str	r3, [r4, #0]
 800a1ce:	6123      	str	r3, [r4, #16]
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	6163      	str	r3, [r4, #20]
 800a1d4:	b003      	add	sp, #12
 800a1d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1d8:	ab01      	add	r3, sp, #4
 800a1da:	466a      	mov	r2, sp
 800a1dc:	f7ff ffc8 	bl	800a170 <__swhatbuf_r>
 800a1e0:	9f00      	ldr	r7, [sp, #0]
 800a1e2:	4605      	mov	r5, r0
 800a1e4:	4639      	mov	r1, r7
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	f7fd fa32 	bl	8007650 <_malloc_r>
 800a1ec:	b948      	cbnz	r0, 800a202 <__smakebuf_r+0x46>
 800a1ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1f2:	059a      	lsls	r2, r3, #22
 800a1f4:	d4ee      	bmi.n	800a1d4 <__smakebuf_r+0x18>
 800a1f6:	f023 0303 	bic.w	r3, r3, #3
 800a1fa:	f043 0302 	orr.w	r3, r3, #2
 800a1fe:	81a3      	strh	r3, [r4, #12]
 800a200:	e7e2      	b.n	800a1c8 <__smakebuf_r+0xc>
 800a202:	89a3      	ldrh	r3, [r4, #12]
 800a204:	6020      	str	r0, [r4, #0]
 800a206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a20a:	81a3      	strh	r3, [r4, #12]
 800a20c:	9b01      	ldr	r3, [sp, #4]
 800a20e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a212:	b15b      	cbz	r3, 800a22c <__smakebuf_r+0x70>
 800a214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a218:	4630      	mov	r0, r6
 800a21a:	f000 f81d 	bl	800a258 <_isatty_r>
 800a21e:	b128      	cbz	r0, 800a22c <__smakebuf_r+0x70>
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	f023 0303 	bic.w	r3, r3, #3
 800a226:	f043 0301 	orr.w	r3, r3, #1
 800a22a:	81a3      	strh	r3, [r4, #12]
 800a22c:	89a3      	ldrh	r3, [r4, #12]
 800a22e:	431d      	orrs	r5, r3
 800a230:	81a5      	strh	r5, [r4, #12]
 800a232:	e7cf      	b.n	800a1d4 <__smakebuf_r+0x18>

0800a234 <_fstat_r>:
 800a234:	b538      	push	{r3, r4, r5, lr}
 800a236:	4d07      	ldr	r5, [pc, #28]	@ (800a254 <_fstat_r+0x20>)
 800a238:	2300      	movs	r3, #0
 800a23a:	4604      	mov	r4, r0
 800a23c:	4608      	mov	r0, r1
 800a23e:	4611      	mov	r1, r2
 800a240:	602b      	str	r3, [r5, #0]
 800a242:	f7f8 f960 	bl	8002506 <_fstat>
 800a246:	1c43      	adds	r3, r0, #1
 800a248:	d102      	bne.n	800a250 <_fstat_r+0x1c>
 800a24a:	682b      	ldr	r3, [r5, #0]
 800a24c:	b103      	cbz	r3, 800a250 <_fstat_r+0x1c>
 800a24e:	6023      	str	r3, [r4, #0]
 800a250:	bd38      	pop	{r3, r4, r5, pc}
 800a252:	bf00      	nop
 800a254:	200004a0 	.word	0x200004a0

0800a258 <_isatty_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4d06      	ldr	r5, [pc, #24]	@ (800a274 <_isatty_r+0x1c>)
 800a25c:	2300      	movs	r3, #0
 800a25e:	4604      	mov	r4, r0
 800a260:	4608      	mov	r0, r1
 800a262:	602b      	str	r3, [r5, #0]
 800a264:	f7f8 f95f 	bl	8002526 <_isatty>
 800a268:	1c43      	adds	r3, r0, #1
 800a26a:	d102      	bne.n	800a272 <_isatty_r+0x1a>
 800a26c:	682b      	ldr	r3, [r5, #0]
 800a26e:	b103      	cbz	r3, 800a272 <_isatty_r+0x1a>
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	bd38      	pop	{r3, r4, r5, pc}
 800a274:	200004a0 	.word	0x200004a0

0800a278 <pow>:
 800a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27a:	ed2d 8b02 	vpush	{d8}
 800a27e:	eeb0 8a40 	vmov.f32	s16, s0
 800a282:	eef0 8a60 	vmov.f32	s17, s1
 800a286:	ec55 4b11 	vmov	r4, r5, d1
 800a28a:	f000 f871 	bl	800a370 <__ieee754_pow>
 800a28e:	4622      	mov	r2, r4
 800a290:	462b      	mov	r3, r5
 800a292:	4620      	mov	r0, r4
 800a294:	4629      	mov	r1, r5
 800a296:	ec57 6b10 	vmov	r6, r7, d0
 800a29a:	f7f6 fc47 	bl	8000b2c <__aeabi_dcmpun>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d13b      	bne.n	800a31a <pow+0xa2>
 800a2a2:	ec51 0b18 	vmov	r0, r1, d8
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	f7f6 fc0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2ae:	b1b8      	cbz	r0, 800a2e0 <pow+0x68>
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	f7f6 fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	d146      	bne.n	800a34e <pow+0xd6>
 800a2c0:	ec45 4b10 	vmov	d0, r4, r5
 800a2c4:	f000 f848 	bl	800a358 <finite>
 800a2c8:	b338      	cbz	r0, 800a31a <pow+0xa2>
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	4629      	mov	r1, r5
 800a2d2:	f7f6 fc03 	bl	8000adc <__aeabi_dcmplt>
 800a2d6:	b300      	cbz	r0, 800a31a <pow+0xa2>
 800a2d8:	f7fe f826 	bl	8008328 <__errno>
 800a2dc:	2322      	movs	r3, #34	@ 0x22
 800a2de:	e01b      	b.n	800a318 <pow+0xa0>
 800a2e0:	ec47 6b10 	vmov	d0, r6, r7
 800a2e4:	f000 f838 	bl	800a358 <finite>
 800a2e8:	b9e0      	cbnz	r0, 800a324 <pow+0xac>
 800a2ea:	eeb0 0a48 	vmov.f32	s0, s16
 800a2ee:	eef0 0a68 	vmov.f32	s1, s17
 800a2f2:	f000 f831 	bl	800a358 <finite>
 800a2f6:	b1a8      	cbz	r0, 800a324 <pow+0xac>
 800a2f8:	ec45 4b10 	vmov	d0, r4, r5
 800a2fc:	f000 f82c 	bl	800a358 <finite>
 800a300:	b180      	cbz	r0, 800a324 <pow+0xac>
 800a302:	4632      	mov	r2, r6
 800a304:	463b      	mov	r3, r7
 800a306:	4630      	mov	r0, r6
 800a308:	4639      	mov	r1, r7
 800a30a:	f7f6 fc0f 	bl	8000b2c <__aeabi_dcmpun>
 800a30e:	2800      	cmp	r0, #0
 800a310:	d0e2      	beq.n	800a2d8 <pow+0x60>
 800a312:	f7fe f809 	bl	8008328 <__errno>
 800a316:	2321      	movs	r3, #33	@ 0x21
 800a318:	6003      	str	r3, [r0, #0]
 800a31a:	ecbd 8b02 	vpop	{d8}
 800a31e:	ec47 6b10 	vmov	d0, r6, r7
 800a322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a324:	2200      	movs	r2, #0
 800a326:	2300      	movs	r3, #0
 800a328:	4630      	mov	r0, r6
 800a32a:	4639      	mov	r1, r7
 800a32c:	f7f6 fbcc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a330:	2800      	cmp	r0, #0
 800a332:	d0f2      	beq.n	800a31a <pow+0xa2>
 800a334:	eeb0 0a48 	vmov.f32	s0, s16
 800a338:	eef0 0a68 	vmov.f32	s1, s17
 800a33c:	f000 f80c 	bl	800a358 <finite>
 800a340:	2800      	cmp	r0, #0
 800a342:	d0ea      	beq.n	800a31a <pow+0xa2>
 800a344:	ec45 4b10 	vmov	d0, r4, r5
 800a348:	f000 f806 	bl	800a358 <finite>
 800a34c:	e7c3      	b.n	800a2d6 <pow+0x5e>
 800a34e:	4f01      	ldr	r7, [pc, #4]	@ (800a354 <pow+0xdc>)
 800a350:	2600      	movs	r6, #0
 800a352:	e7e2      	b.n	800a31a <pow+0xa2>
 800a354:	3ff00000 	.word	0x3ff00000

0800a358 <finite>:
 800a358:	b082      	sub	sp, #8
 800a35a:	ed8d 0b00 	vstr	d0, [sp]
 800a35e:	9801      	ldr	r0, [sp, #4]
 800a360:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800a364:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a368:	0fc0      	lsrs	r0, r0, #31
 800a36a:	b002      	add	sp, #8
 800a36c:	4770      	bx	lr
	...

0800a370 <__ieee754_pow>:
 800a370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a374:	b091      	sub	sp, #68	@ 0x44
 800a376:	ed8d 1b00 	vstr	d1, [sp]
 800a37a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800a37e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800a382:	ea5a 0001 	orrs.w	r0, sl, r1
 800a386:	ec57 6b10 	vmov	r6, r7, d0
 800a38a:	d113      	bne.n	800a3b4 <__ieee754_pow+0x44>
 800a38c:	19b3      	adds	r3, r6, r6
 800a38e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800a392:	4152      	adcs	r2, r2
 800a394:	4298      	cmp	r0, r3
 800a396:	4b9a      	ldr	r3, [pc, #616]	@ (800a600 <__ieee754_pow+0x290>)
 800a398:	4193      	sbcs	r3, r2
 800a39a:	f080 84ee 	bcs.w	800ad7a <__ieee754_pow+0xa0a>
 800a39e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	4639      	mov	r1, r7
 800a3a6:	f7f5 ff71 	bl	800028c <__adddf3>
 800a3aa:	ec41 0b10 	vmov	d0, r0, r1
 800a3ae:	b011      	add	sp, #68	@ 0x44
 800a3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b4:	4a93      	ldr	r2, [pc, #588]	@ (800a604 <__ieee754_pow+0x294>)
 800a3b6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800a3ba:	4295      	cmp	r5, r2
 800a3bc:	46b8      	mov	r8, r7
 800a3be:	4633      	mov	r3, r6
 800a3c0:	d80a      	bhi.n	800a3d8 <__ieee754_pow+0x68>
 800a3c2:	d104      	bne.n	800a3ce <__ieee754_pow+0x5e>
 800a3c4:	2e00      	cmp	r6, #0
 800a3c6:	d1ea      	bne.n	800a39e <__ieee754_pow+0x2e>
 800a3c8:	45aa      	cmp	sl, r5
 800a3ca:	d8e8      	bhi.n	800a39e <__ieee754_pow+0x2e>
 800a3cc:	e001      	b.n	800a3d2 <__ieee754_pow+0x62>
 800a3ce:	4592      	cmp	sl, r2
 800a3d0:	d802      	bhi.n	800a3d8 <__ieee754_pow+0x68>
 800a3d2:	4592      	cmp	sl, r2
 800a3d4:	d10f      	bne.n	800a3f6 <__ieee754_pow+0x86>
 800a3d6:	b171      	cbz	r1, 800a3f6 <__ieee754_pow+0x86>
 800a3d8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800a3dc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800a3e0:	ea58 0803 	orrs.w	r8, r8, r3
 800a3e4:	d1db      	bne.n	800a39e <__ieee754_pow+0x2e>
 800a3e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a3ea:	18db      	adds	r3, r3, r3
 800a3ec:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a3f0:	4152      	adcs	r2, r2
 800a3f2:	4598      	cmp	r8, r3
 800a3f4:	e7cf      	b.n	800a396 <__ieee754_pow+0x26>
 800a3f6:	f1b8 0f00 	cmp.w	r8, #0
 800a3fa:	46ab      	mov	fp, r5
 800a3fc:	da43      	bge.n	800a486 <__ieee754_pow+0x116>
 800a3fe:	4a82      	ldr	r2, [pc, #520]	@ (800a608 <__ieee754_pow+0x298>)
 800a400:	4592      	cmp	sl, r2
 800a402:	d856      	bhi.n	800a4b2 <__ieee754_pow+0x142>
 800a404:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a408:	4592      	cmp	sl, r2
 800a40a:	f240 84c5 	bls.w	800ad98 <__ieee754_pow+0xa28>
 800a40e:	ea4f 522a 	mov.w	r2, sl, asr #20
 800a412:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a416:	2a14      	cmp	r2, #20
 800a418:	dd18      	ble.n	800a44c <__ieee754_pow+0xdc>
 800a41a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a41e:	fa21 f402 	lsr.w	r4, r1, r2
 800a422:	fa04 f202 	lsl.w	r2, r4, r2
 800a426:	428a      	cmp	r2, r1
 800a428:	f040 84b6 	bne.w	800ad98 <__ieee754_pow+0xa28>
 800a42c:	f004 0401 	and.w	r4, r4, #1
 800a430:	f1c4 0402 	rsb	r4, r4, #2
 800a434:	2900      	cmp	r1, #0
 800a436:	d159      	bne.n	800a4ec <__ieee754_pow+0x17c>
 800a438:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800a43c:	d148      	bne.n	800a4d0 <__ieee754_pow+0x160>
 800a43e:	4632      	mov	r2, r6
 800a440:	463b      	mov	r3, r7
 800a442:	4630      	mov	r0, r6
 800a444:	4639      	mov	r1, r7
 800a446:	f7f6 f8d7 	bl	80005f8 <__aeabi_dmul>
 800a44a:	e7ae      	b.n	800a3aa <__ieee754_pow+0x3a>
 800a44c:	2900      	cmp	r1, #0
 800a44e:	d14c      	bne.n	800a4ea <__ieee754_pow+0x17a>
 800a450:	f1c2 0214 	rsb	r2, r2, #20
 800a454:	fa4a f402 	asr.w	r4, sl, r2
 800a458:	fa04 f202 	lsl.w	r2, r4, r2
 800a45c:	4552      	cmp	r2, sl
 800a45e:	f040 8498 	bne.w	800ad92 <__ieee754_pow+0xa22>
 800a462:	f004 0401 	and.w	r4, r4, #1
 800a466:	f1c4 0402 	rsb	r4, r4, #2
 800a46a:	4a68      	ldr	r2, [pc, #416]	@ (800a60c <__ieee754_pow+0x29c>)
 800a46c:	4592      	cmp	sl, r2
 800a46e:	d1e3      	bne.n	800a438 <__ieee754_pow+0xc8>
 800a470:	f1b9 0f00 	cmp.w	r9, #0
 800a474:	f280 8489 	bge.w	800ad8a <__ieee754_pow+0xa1a>
 800a478:	4964      	ldr	r1, [pc, #400]	@ (800a60c <__ieee754_pow+0x29c>)
 800a47a:	4632      	mov	r2, r6
 800a47c:	463b      	mov	r3, r7
 800a47e:	2000      	movs	r0, #0
 800a480:	f7f6 f9e4 	bl	800084c <__aeabi_ddiv>
 800a484:	e791      	b.n	800a3aa <__ieee754_pow+0x3a>
 800a486:	2400      	movs	r4, #0
 800a488:	bb81      	cbnz	r1, 800a4ec <__ieee754_pow+0x17c>
 800a48a:	4a5e      	ldr	r2, [pc, #376]	@ (800a604 <__ieee754_pow+0x294>)
 800a48c:	4592      	cmp	sl, r2
 800a48e:	d1ec      	bne.n	800a46a <__ieee754_pow+0xfa>
 800a490:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800a494:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800a498:	431a      	orrs	r2, r3
 800a49a:	f000 846e 	beq.w	800ad7a <__ieee754_pow+0xa0a>
 800a49e:	4b5c      	ldr	r3, [pc, #368]	@ (800a610 <__ieee754_pow+0x2a0>)
 800a4a0:	429d      	cmp	r5, r3
 800a4a2:	d908      	bls.n	800a4b6 <__ieee754_pow+0x146>
 800a4a4:	f1b9 0f00 	cmp.w	r9, #0
 800a4a8:	f280 846b 	bge.w	800ad82 <__ieee754_pow+0xa12>
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	e77b      	b.n	800a3aa <__ieee754_pow+0x3a>
 800a4b2:	2402      	movs	r4, #2
 800a4b4:	e7e8      	b.n	800a488 <__ieee754_pow+0x118>
 800a4b6:	f1b9 0f00 	cmp.w	r9, #0
 800a4ba:	f04f 0000 	mov.w	r0, #0
 800a4be:	f04f 0100 	mov.w	r1, #0
 800a4c2:	f6bf af72 	bge.w	800a3aa <__ieee754_pow+0x3a>
 800a4c6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a4ca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a4ce:	e76c      	b.n	800a3aa <__ieee754_pow+0x3a>
 800a4d0:	4a50      	ldr	r2, [pc, #320]	@ (800a614 <__ieee754_pow+0x2a4>)
 800a4d2:	4591      	cmp	r9, r2
 800a4d4:	d10a      	bne.n	800a4ec <__ieee754_pow+0x17c>
 800a4d6:	f1b8 0f00 	cmp.w	r8, #0
 800a4da:	db07      	blt.n	800a4ec <__ieee754_pow+0x17c>
 800a4dc:	ec47 6b10 	vmov	d0, r6, r7
 800a4e0:	b011      	add	sp, #68	@ 0x44
 800a4e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e6:	f000 bd4f 	b.w	800af88 <__ieee754_sqrt>
 800a4ea:	2400      	movs	r4, #0
 800a4ec:	ec47 6b10 	vmov	d0, r6, r7
 800a4f0:	9302      	str	r3, [sp, #8]
 800a4f2:	f000 fc87 	bl	800ae04 <fabs>
 800a4f6:	9b02      	ldr	r3, [sp, #8]
 800a4f8:	ec51 0b10 	vmov	r0, r1, d0
 800a4fc:	bb43      	cbnz	r3, 800a550 <__ieee754_pow+0x1e0>
 800a4fe:	4b43      	ldr	r3, [pc, #268]	@ (800a60c <__ieee754_pow+0x29c>)
 800a500:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800a504:	429a      	cmp	r2, r3
 800a506:	d000      	beq.n	800a50a <__ieee754_pow+0x19a>
 800a508:	bb15      	cbnz	r5, 800a550 <__ieee754_pow+0x1e0>
 800a50a:	f1b9 0f00 	cmp.w	r9, #0
 800a50e:	da05      	bge.n	800a51c <__ieee754_pow+0x1ac>
 800a510:	4602      	mov	r2, r0
 800a512:	460b      	mov	r3, r1
 800a514:	2000      	movs	r0, #0
 800a516:	493d      	ldr	r1, [pc, #244]	@ (800a60c <__ieee754_pow+0x29c>)
 800a518:	f7f6 f998 	bl	800084c <__aeabi_ddiv>
 800a51c:	f1b8 0f00 	cmp.w	r8, #0
 800a520:	f6bf af43 	bge.w	800a3aa <__ieee754_pow+0x3a>
 800a524:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a528:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a52c:	4325      	orrs	r5, r4
 800a52e:	d108      	bne.n	800a542 <__ieee754_pow+0x1d2>
 800a530:	4602      	mov	r2, r0
 800a532:	460b      	mov	r3, r1
 800a534:	4610      	mov	r0, r2
 800a536:	4619      	mov	r1, r3
 800a538:	f7f5 fea6 	bl	8000288 <__aeabi_dsub>
 800a53c:	4602      	mov	r2, r0
 800a53e:	460b      	mov	r3, r1
 800a540:	e79e      	b.n	800a480 <__ieee754_pow+0x110>
 800a542:	2c01      	cmp	r4, #1
 800a544:	f47f af31 	bne.w	800a3aa <__ieee754_pow+0x3a>
 800a548:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a54c:	4619      	mov	r1, r3
 800a54e:	e72c      	b.n	800a3aa <__ieee754_pow+0x3a>
 800a550:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800a554:	3b01      	subs	r3, #1
 800a556:	ea53 0204 	orrs.w	r2, r3, r4
 800a55a:	d102      	bne.n	800a562 <__ieee754_pow+0x1f2>
 800a55c:	4632      	mov	r2, r6
 800a55e:	463b      	mov	r3, r7
 800a560:	e7e8      	b.n	800a534 <__ieee754_pow+0x1c4>
 800a562:	3c01      	subs	r4, #1
 800a564:	431c      	orrs	r4, r3
 800a566:	d016      	beq.n	800a596 <__ieee754_pow+0x226>
 800a568:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a5f0 <__ieee754_pow+0x280>
 800a56c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800a570:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a574:	f240 8110 	bls.w	800a798 <__ieee754_pow+0x428>
 800a578:	4b27      	ldr	r3, [pc, #156]	@ (800a618 <__ieee754_pow+0x2a8>)
 800a57a:	459a      	cmp	sl, r3
 800a57c:	4b24      	ldr	r3, [pc, #144]	@ (800a610 <__ieee754_pow+0x2a0>)
 800a57e:	d916      	bls.n	800a5ae <__ieee754_pow+0x23e>
 800a580:	429d      	cmp	r5, r3
 800a582:	d80b      	bhi.n	800a59c <__ieee754_pow+0x22c>
 800a584:	f1b9 0f00 	cmp.w	r9, #0
 800a588:	da0b      	bge.n	800a5a2 <__ieee754_pow+0x232>
 800a58a:	2000      	movs	r0, #0
 800a58c:	b011      	add	sp, #68	@ 0x44
 800a58e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a592:	f000 bcf1 	b.w	800af78 <__math_oflow>
 800a596:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800a5f8 <__ieee754_pow+0x288>
 800a59a:	e7e7      	b.n	800a56c <__ieee754_pow+0x1fc>
 800a59c:	f1b9 0f00 	cmp.w	r9, #0
 800a5a0:	dcf3      	bgt.n	800a58a <__ieee754_pow+0x21a>
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	b011      	add	sp, #68	@ 0x44
 800a5a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5aa:	f000 bcdd 	b.w	800af68 <__math_uflow>
 800a5ae:	429d      	cmp	r5, r3
 800a5b0:	d20c      	bcs.n	800a5cc <__ieee754_pow+0x25c>
 800a5b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	f7f6 fa8f 	bl	8000adc <__aeabi_dcmplt>
 800a5be:	3800      	subs	r0, #0
 800a5c0:	bf18      	it	ne
 800a5c2:	2001      	movne	r0, #1
 800a5c4:	f1b9 0f00 	cmp.w	r9, #0
 800a5c8:	daec      	bge.n	800a5a4 <__ieee754_pow+0x234>
 800a5ca:	e7df      	b.n	800a58c <__ieee754_pow+0x21c>
 800a5cc:	4b0f      	ldr	r3, [pc, #60]	@ (800a60c <__ieee754_pow+0x29c>)
 800a5ce:	429d      	cmp	r5, r3
 800a5d0:	f04f 0200 	mov.w	r2, #0
 800a5d4:	d922      	bls.n	800a61c <__ieee754_pow+0x2ac>
 800a5d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5da:	2300      	movs	r3, #0
 800a5dc:	f7f6 fa7e 	bl	8000adc <__aeabi_dcmplt>
 800a5e0:	3800      	subs	r0, #0
 800a5e2:	bf18      	it	ne
 800a5e4:	2001      	movne	r0, #1
 800a5e6:	f1b9 0f00 	cmp.w	r9, #0
 800a5ea:	dccf      	bgt.n	800a58c <__ieee754_pow+0x21c>
 800a5ec:	e7da      	b.n	800a5a4 <__ieee754_pow+0x234>
 800a5ee:	bf00      	nop
 800a5f0:	00000000 	.word	0x00000000
 800a5f4:	3ff00000 	.word	0x3ff00000
 800a5f8:	00000000 	.word	0x00000000
 800a5fc:	bff00000 	.word	0xbff00000
 800a600:	fff00000 	.word	0xfff00000
 800a604:	7ff00000 	.word	0x7ff00000
 800a608:	433fffff 	.word	0x433fffff
 800a60c:	3ff00000 	.word	0x3ff00000
 800a610:	3fefffff 	.word	0x3fefffff
 800a614:	3fe00000 	.word	0x3fe00000
 800a618:	43f00000 	.word	0x43f00000
 800a61c:	4b5a      	ldr	r3, [pc, #360]	@ (800a788 <__ieee754_pow+0x418>)
 800a61e:	f7f5 fe33 	bl	8000288 <__aeabi_dsub>
 800a622:	a351      	add	r3, pc, #324	@ (adr r3, 800a768 <__ieee754_pow+0x3f8>)
 800a624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a628:	4604      	mov	r4, r0
 800a62a:	460d      	mov	r5, r1
 800a62c:	f7f5 ffe4 	bl	80005f8 <__aeabi_dmul>
 800a630:	a34f      	add	r3, pc, #316	@ (adr r3, 800a770 <__ieee754_pow+0x400>)
 800a632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a636:	4606      	mov	r6, r0
 800a638:	460f      	mov	r7, r1
 800a63a:	4620      	mov	r0, r4
 800a63c:	4629      	mov	r1, r5
 800a63e:	f7f5 ffdb 	bl	80005f8 <__aeabi_dmul>
 800a642:	4b52      	ldr	r3, [pc, #328]	@ (800a78c <__ieee754_pow+0x41c>)
 800a644:	4682      	mov	sl, r0
 800a646:	468b      	mov	fp, r1
 800a648:	2200      	movs	r2, #0
 800a64a:	4620      	mov	r0, r4
 800a64c:	4629      	mov	r1, r5
 800a64e:	f7f5 ffd3 	bl	80005f8 <__aeabi_dmul>
 800a652:	4602      	mov	r2, r0
 800a654:	460b      	mov	r3, r1
 800a656:	a148      	add	r1, pc, #288	@ (adr r1, 800a778 <__ieee754_pow+0x408>)
 800a658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a65c:	f7f5 fe14 	bl	8000288 <__aeabi_dsub>
 800a660:	4622      	mov	r2, r4
 800a662:	462b      	mov	r3, r5
 800a664:	f7f5 ffc8 	bl	80005f8 <__aeabi_dmul>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	2000      	movs	r0, #0
 800a66e:	4948      	ldr	r1, [pc, #288]	@ (800a790 <__ieee754_pow+0x420>)
 800a670:	f7f5 fe0a 	bl	8000288 <__aeabi_dsub>
 800a674:	4622      	mov	r2, r4
 800a676:	4680      	mov	r8, r0
 800a678:	4689      	mov	r9, r1
 800a67a:	462b      	mov	r3, r5
 800a67c:	4620      	mov	r0, r4
 800a67e:	4629      	mov	r1, r5
 800a680:	f7f5 ffba 	bl	80005f8 <__aeabi_dmul>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	4640      	mov	r0, r8
 800a68a:	4649      	mov	r1, r9
 800a68c:	f7f5 ffb4 	bl	80005f8 <__aeabi_dmul>
 800a690:	a33b      	add	r3, pc, #236	@ (adr r3, 800a780 <__ieee754_pow+0x410>)
 800a692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a696:	f7f5 ffaf 	bl	80005f8 <__aeabi_dmul>
 800a69a:	4602      	mov	r2, r0
 800a69c:	460b      	mov	r3, r1
 800a69e:	4650      	mov	r0, sl
 800a6a0:	4659      	mov	r1, fp
 800a6a2:	f7f5 fdf1 	bl	8000288 <__aeabi_dsub>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	4680      	mov	r8, r0
 800a6ac:	4689      	mov	r9, r1
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	4639      	mov	r1, r7
 800a6b2:	f7f5 fdeb 	bl	800028c <__adddf3>
 800a6b6:	2400      	movs	r4, #0
 800a6b8:	4632      	mov	r2, r6
 800a6ba:	463b      	mov	r3, r7
 800a6bc:	4620      	mov	r0, r4
 800a6be:	460d      	mov	r5, r1
 800a6c0:	f7f5 fde2 	bl	8000288 <__aeabi_dsub>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	4640      	mov	r0, r8
 800a6ca:	4649      	mov	r1, r9
 800a6cc:	f7f5 fddc 	bl	8000288 <__aeabi_dsub>
 800a6d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a6d8:	2300      	movs	r3, #0
 800a6da:	9304      	str	r3, [sp, #16]
 800a6dc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a6e0:	4606      	mov	r6, r0
 800a6e2:	460f      	mov	r7, r1
 800a6e4:	465b      	mov	r3, fp
 800a6e6:	4652      	mov	r2, sl
 800a6e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6ec:	f7f5 fdcc 	bl	8000288 <__aeabi_dsub>
 800a6f0:	4622      	mov	r2, r4
 800a6f2:	462b      	mov	r3, r5
 800a6f4:	f7f5 ff80 	bl	80005f8 <__aeabi_dmul>
 800a6f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6fc:	4680      	mov	r8, r0
 800a6fe:	4689      	mov	r9, r1
 800a700:	4630      	mov	r0, r6
 800a702:	4639      	mov	r1, r7
 800a704:	f7f5 ff78 	bl	80005f8 <__aeabi_dmul>
 800a708:	4602      	mov	r2, r0
 800a70a:	460b      	mov	r3, r1
 800a70c:	4640      	mov	r0, r8
 800a70e:	4649      	mov	r1, r9
 800a710:	f7f5 fdbc 	bl	800028c <__adddf3>
 800a714:	465b      	mov	r3, fp
 800a716:	4606      	mov	r6, r0
 800a718:	460f      	mov	r7, r1
 800a71a:	4652      	mov	r2, sl
 800a71c:	4620      	mov	r0, r4
 800a71e:	4629      	mov	r1, r5
 800a720:	f7f5 ff6a 	bl	80005f8 <__aeabi_dmul>
 800a724:	460b      	mov	r3, r1
 800a726:	4602      	mov	r2, r0
 800a728:	4680      	mov	r8, r0
 800a72a:	4689      	mov	r9, r1
 800a72c:	4630      	mov	r0, r6
 800a72e:	4639      	mov	r1, r7
 800a730:	f7f5 fdac 	bl	800028c <__adddf3>
 800a734:	4b17      	ldr	r3, [pc, #92]	@ (800a794 <__ieee754_pow+0x424>)
 800a736:	4299      	cmp	r1, r3
 800a738:	4604      	mov	r4, r0
 800a73a:	460d      	mov	r5, r1
 800a73c:	468b      	mov	fp, r1
 800a73e:	f340 820b 	ble.w	800ab58 <__ieee754_pow+0x7e8>
 800a742:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a746:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a74a:	4303      	orrs	r3, r0
 800a74c:	f000 81ea 	beq.w	800ab24 <__ieee754_pow+0x7b4>
 800a750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a754:	2200      	movs	r2, #0
 800a756:	2300      	movs	r3, #0
 800a758:	f7f6 f9c0 	bl	8000adc <__aeabi_dcmplt>
 800a75c:	3800      	subs	r0, #0
 800a75e:	bf18      	it	ne
 800a760:	2001      	movne	r0, #1
 800a762:	e713      	b.n	800a58c <__ieee754_pow+0x21c>
 800a764:	f3af 8000 	nop.w
 800a768:	60000000 	.word	0x60000000
 800a76c:	3ff71547 	.word	0x3ff71547
 800a770:	f85ddf44 	.word	0xf85ddf44
 800a774:	3e54ae0b 	.word	0x3e54ae0b
 800a778:	55555555 	.word	0x55555555
 800a77c:	3fd55555 	.word	0x3fd55555
 800a780:	652b82fe 	.word	0x652b82fe
 800a784:	3ff71547 	.word	0x3ff71547
 800a788:	3ff00000 	.word	0x3ff00000
 800a78c:	3fd00000 	.word	0x3fd00000
 800a790:	3fe00000 	.word	0x3fe00000
 800a794:	408fffff 	.word	0x408fffff
 800a798:	4bd5      	ldr	r3, [pc, #852]	@ (800aaf0 <__ieee754_pow+0x780>)
 800a79a:	ea08 0303 	and.w	r3, r8, r3
 800a79e:	2200      	movs	r2, #0
 800a7a0:	b92b      	cbnz	r3, 800a7ae <__ieee754_pow+0x43e>
 800a7a2:	4bd4      	ldr	r3, [pc, #848]	@ (800aaf4 <__ieee754_pow+0x784>)
 800a7a4:	f7f5 ff28 	bl	80005f8 <__aeabi_dmul>
 800a7a8:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800a7ac:	468b      	mov	fp, r1
 800a7ae:	ea4f 532b 	mov.w	r3, fp, asr #20
 800a7b2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a7b6:	4413      	add	r3, r2
 800a7b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7ba:	4bcf      	ldr	r3, [pc, #828]	@ (800aaf8 <__ieee754_pow+0x788>)
 800a7bc:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800a7c0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800a7c4:	459b      	cmp	fp, r3
 800a7c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a7ca:	dd08      	ble.n	800a7de <__ieee754_pow+0x46e>
 800a7cc:	4bcb      	ldr	r3, [pc, #812]	@ (800aafc <__ieee754_pow+0x78c>)
 800a7ce:	459b      	cmp	fp, r3
 800a7d0:	f340 81a5 	ble.w	800ab1e <__ieee754_pow+0x7ae>
 800a7d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7da:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a7de:	f04f 0a00 	mov.w	sl, #0
 800a7e2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a7e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7e8:	4bc5      	ldr	r3, [pc, #788]	@ (800ab00 <__ieee754_pow+0x790>)
 800a7ea:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a7ee:	ed93 7b00 	vldr	d7, [r3]
 800a7f2:	4629      	mov	r1, r5
 800a7f4:	ec53 2b17 	vmov	r2, r3, d7
 800a7f8:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a7fc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a800:	f7f5 fd42 	bl	8000288 <__aeabi_dsub>
 800a804:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a808:	4606      	mov	r6, r0
 800a80a:	460f      	mov	r7, r1
 800a80c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a810:	f7f5 fd3c 	bl	800028c <__adddf3>
 800a814:	4602      	mov	r2, r0
 800a816:	460b      	mov	r3, r1
 800a818:	2000      	movs	r0, #0
 800a81a:	49ba      	ldr	r1, [pc, #744]	@ (800ab04 <__ieee754_pow+0x794>)
 800a81c:	f7f6 f816 	bl	800084c <__aeabi_ddiv>
 800a820:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a824:	4602      	mov	r2, r0
 800a826:	460b      	mov	r3, r1
 800a828:	4630      	mov	r0, r6
 800a82a:	4639      	mov	r1, r7
 800a82c:	f7f5 fee4 	bl	80005f8 <__aeabi_dmul>
 800a830:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a834:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800a838:	106d      	asrs	r5, r5, #1
 800a83a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a83e:	f04f 0b00 	mov.w	fp, #0
 800a842:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a846:	4661      	mov	r1, ip
 800a848:	2200      	movs	r2, #0
 800a84a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a84e:	4658      	mov	r0, fp
 800a850:	46e1      	mov	r9, ip
 800a852:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a856:	4614      	mov	r4, r2
 800a858:	461d      	mov	r5, r3
 800a85a:	f7f5 fecd 	bl	80005f8 <__aeabi_dmul>
 800a85e:	4602      	mov	r2, r0
 800a860:	460b      	mov	r3, r1
 800a862:	4630      	mov	r0, r6
 800a864:	4639      	mov	r1, r7
 800a866:	f7f5 fd0f 	bl	8000288 <__aeabi_dsub>
 800a86a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a86e:	4606      	mov	r6, r0
 800a870:	460f      	mov	r7, r1
 800a872:	4620      	mov	r0, r4
 800a874:	4629      	mov	r1, r5
 800a876:	f7f5 fd07 	bl	8000288 <__aeabi_dsub>
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a882:	f7f5 fd01 	bl	8000288 <__aeabi_dsub>
 800a886:	465a      	mov	r2, fp
 800a888:	464b      	mov	r3, r9
 800a88a:	f7f5 feb5 	bl	80005f8 <__aeabi_dmul>
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	4630      	mov	r0, r6
 800a894:	4639      	mov	r1, r7
 800a896:	f7f5 fcf7 	bl	8000288 <__aeabi_dsub>
 800a89a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a89e:	f7f5 feab 	bl	80005f8 <__aeabi_dmul>
 800a8a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a8aa:	4610      	mov	r0, r2
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	f7f5 fea3 	bl	80005f8 <__aeabi_dmul>
 800a8b2:	a37d      	add	r3, pc, #500	@ (adr r3, 800aaa8 <__ieee754_pow+0x738>)
 800a8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	460d      	mov	r5, r1
 800a8bc:	f7f5 fe9c 	bl	80005f8 <__aeabi_dmul>
 800a8c0:	a37b      	add	r3, pc, #492	@ (adr r3, 800aab0 <__ieee754_pow+0x740>)
 800a8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c6:	f7f5 fce1 	bl	800028c <__adddf3>
 800a8ca:	4622      	mov	r2, r4
 800a8cc:	462b      	mov	r3, r5
 800a8ce:	f7f5 fe93 	bl	80005f8 <__aeabi_dmul>
 800a8d2:	a379      	add	r3, pc, #484	@ (adr r3, 800aab8 <__ieee754_pow+0x748>)
 800a8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d8:	f7f5 fcd8 	bl	800028c <__adddf3>
 800a8dc:	4622      	mov	r2, r4
 800a8de:	462b      	mov	r3, r5
 800a8e0:	f7f5 fe8a 	bl	80005f8 <__aeabi_dmul>
 800a8e4:	a376      	add	r3, pc, #472	@ (adr r3, 800aac0 <__ieee754_pow+0x750>)
 800a8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ea:	f7f5 fccf 	bl	800028c <__adddf3>
 800a8ee:	4622      	mov	r2, r4
 800a8f0:	462b      	mov	r3, r5
 800a8f2:	f7f5 fe81 	bl	80005f8 <__aeabi_dmul>
 800a8f6:	a374      	add	r3, pc, #464	@ (adr r3, 800aac8 <__ieee754_pow+0x758>)
 800a8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fc:	f7f5 fcc6 	bl	800028c <__adddf3>
 800a900:	4622      	mov	r2, r4
 800a902:	462b      	mov	r3, r5
 800a904:	f7f5 fe78 	bl	80005f8 <__aeabi_dmul>
 800a908:	a371      	add	r3, pc, #452	@ (adr r3, 800aad0 <__ieee754_pow+0x760>)
 800a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90e:	f7f5 fcbd 	bl	800028c <__adddf3>
 800a912:	4622      	mov	r2, r4
 800a914:	4606      	mov	r6, r0
 800a916:	460f      	mov	r7, r1
 800a918:	462b      	mov	r3, r5
 800a91a:	4620      	mov	r0, r4
 800a91c:	4629      	mov	r1, r5
 800a91e:	f7f5 fe6b 	bl	80005f8 <__aeabi_dmul>
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
 800a926:	4630      	mov	r0, r6
 800a928:	4639      	mov	r1, r7
 800a92a:	f7f5 fe65 	bl	80005f8 <__aeabi_dmul>
 800a92e:	465a      	mov	r2, fp
 800a930:	4604      	mov	r4, r0
 800a932:	460d      	mov	r5, r1
 800a934:	464b      	mov	r3, r9
 800a936:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a93a:	f7f5 fca7 	bl	800028c <__adddf3>
 800a93e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a942:	f7f5 fe59 	bl	80005f8 <__aeabi_dmul>
 800a946:	4622      	mov	r2, r4
 800a948:	462b      	mov	r3, r5
 800a94a:	f7f5 fc9f 	bl	800028c <__adddf3>
 800a94e:	465a      	mov	r2, fp
 800a950:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a954:	464b      	mov	r3, r9
 800a956:	4658      	mov	r0, fp
 800a958:	4649      	mov	r1, r9
 800a95a:	f7f5 fe4d 	bl	80005f8 <__aeabi_dmul>
 800a95e:	4b6a      	ldr	r3, [pc, #424]	@ (800ab08 <__ieee754_pow+0x798>)
 800a960:	2200      	movs	r2, #0
 800a962:	4606      	mov	r6, r0
 800a964:	460f      	mov	r7, r1
 800a966:	f7f5 fc91 	bl	800028c <__adddf3>
 800a96a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a96e:	f7f5 fc8d 	bl	800028c <__adddf3>
 800a972:	46d8      	mov	r8, fp
 800a974:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a978:	460d      	mov	r5, r1
 800a97a:	465a      	mov	r2, fp
 800a97c:	460b      	mov	r3, r1
 800a97e:	4640      	mov	r0, r8
 800a980:	4649      	mov	r1, r9
 800a982:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a986:	f7f5 fe37 	bl	80005f8 <__aeabi_dmul>
 800a98a:	465c      	mov	r4, fp
 800a98c:	4680      	mov	r8, r0
 800a98e:	4689      	mov	r9, r1
 800a990:	4b5d      	ldr	r3, [pc, #372]	@ (800ab08 <__ieee754_pow+0x798>)
 800a992:	2200      	movs	r2, #0
 800a994:	4620      	mov	r0, r4
 800a996:	4629      	mov	r1, r5
 800a998:	f7f5 fc76 	bl	8000288 <__aeabi_dsub>
 800a99c:	4632      	mov	r2, r6
 800a99e:	463b      	mov	r3, r7
 800a9a0:	f7f5 fc72 	bl	8000288 <__aeabi_dsub>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a9ac:	f7f5 fc6c 	bl	8000288 <__aeabi_dsub>
 800a9b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9b4:	f7f5 fe20 	bl	80005f8 <__aeabi_dmul>
 800a9b8:	4622      	mov	r2, r4
 800a9ba:	4606      	mov	r6, r0
 800a9bc:	460f      	mov	r7, r1
 800a9be:	462b      	mov	r3, r5
 800a9c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9c4:	f7f5 fe18 	bl	80005f8 <__aeabi_dmul>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	4630      	mov	r0, r6
 800a9ce:	4639      	mov	r1, r7
 800a9d0:	f7f5 fc5c 	bl	800028c <__adddf3>
 800a9d4:	4606      	mov	r6, r0
 800a9d6:	460f      	mov	r7, r1
 800a9d8:	4602      	mov	r2, r0
 800a9da:	460b      	mov	r3, r1
 800a9dc:	4640      	mov	r0, r8
 800a9de:	4649      	mov	r1, r9
 800a9e0:	f7f5 fc54 	bl	800028c <__adddf3>
 800a9e4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a9e8:	a33b      	add	r3, pc, #236	@ (adr r3, 800aad8 <__ieee754_pow+0x768>)
 800a9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ee:	4658      	mov	r0, fp
 800a9f0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a9f4:	460d      	mov	r5, r1
 800a9f6:	f7f5 fdff 	bl	80005f8 <__aeabi_dmul>
 800a9fa:	465c      	mov	r4, fp
 800a9fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa00:	4642      	mov	r2, r8
 800aa02:	464b      	mov	r3, r9
 800aa04:	4620      	mov	r0, r4
 800aa06:	4629      	mov	r1, r5
 800aa08:	f7f5 fc3e 	bl	8000288 <__aeabi_dsub>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	4630      	mov	r0, r6
 800aa12:	4639      	mov	r1, r7
 800aa14:	f7f5 fc38 	bl	8000288 <__aeabi_dsub>
 800aa18:	a331      	add	r3, pc, #196	@ (adr r3, 800aae0 <__ieee754_pow+0x770>)
 800aa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1e:	f7f5 fdeb 	bl	80005f8 <__aeabi_dmul>
 800aa22:	a331      	add	r3, pc, #196	@ (adr r3, 800aae8 <__ieee754_pow+0x778>)
 800aa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa28:	4606      	mov	r6, r0
 800aa2a:	460f      	mov	r7, r1
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	4629      	mov	r1, r5
 800aa30:	f7f5 fde2 	bl	80005f8 <__aeabi_dmul>
 800aa34:	4602      	mov	r2, r0
 800aa36:	460b      	mov	r3, r1
 800aa38:	4630      	mov	r0, r6
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	f7f5 fc26 	bl	800028c <__adddf3>
 800aa40:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aa42:	4b32      	ldr	r3, [pc, #200]	@ (800ab0c <__ieee754_pow+0x79c>)
 800aa44:	4413      	add	r3, r2
 800aa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4a:	f7f5 fc1f 	bl	800028c <__adddf3>
 800aa4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aa52:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aa54:	f7f5 fd66 	bl	8000524 <__aeabi_i2d>
 800aa58:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aa5a:	4b2d      	ldr	r3, [pc, #180]	@ (800ab10 <__ieee754_pow+0x7a0>)
 800aa5c:	4413      	add	r3, r2
 800aa5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa62:	4606      	mov	r6, r0
 800aa64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa68:	460f      	mov	r7, r1
 800aa6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa6e:	f7f5 fc0d 	bl	800028c <__adddf3>
 800aa72:	4642      	mov	r2, r8
 800aa74:	464b      	mov	r3, r9
 800aa76:	f7f5 fc09 	bl	800028c <__adddf3>
 800aa7a:	4632      	mov	r2, r6
 800aa7c:	463b      	mov	r3, r7
 800aa7e:	f7f5 fc05 	bl	800028c <__adddf3>
 800aa82:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800aa86:	4632      	mov	r2, r6
 800aa88:	463b      	mov	r3, r7
 800aa8a:	4658      	mov	r0, fp
 800aa8c:	460d      	mov	r5, r1
 800aa8e:	f7f5 fbfb 	bl	8000288 <__aeabi_dsub>
 800aa92:	4642      	mov	r2, r8
 800aa94:	464b      	mov	r3, r9
 800aa96:	f7f5 fbf7 	bl	8000288 <__aeabi_dsub>
 800aa9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa9e:	f7f5 fbf3 	bl	8000288 <__aeabi_dsub>
 800aaa2:	465c      	mov	r4, fp
 800aaa4:	e036      	b.n	800ab14 <__ieee754_pow+0x7a4>
 800aaa6:	bf00      	nop
 800aaa8:	4a454eef 	.word	0x4a454eef
 800aaac:	3fca7e28 	.word	0x3fca7e28
 800aab0:	93c9db65 	.word	0x93c9db65
 800aab4:	3fcd864a 	.word	0x3fcd864a
 800aab8:	a91d4101 	.word	0xa91d4101
 800aabc:	3fd17460 	.word	0x3fd17460
 800aac0:	518f264d 	.word	0x518f264d
 800aac4:	3fd55555 	.word	0x3fd55555
 800aac8:	db6fabff 	.word	0xdb6fabff
 800aacc:	3fdb6db6 	.word	0x3fdb6db6
 800aad0:	33333303 	.word	0x33333303
 800aad4:	3fe33333 	.word	0x3fe33333
 800aad8:	e0000000 	.word	0xe0000000
 800aadc:	3feec709 	.word	0x3feec709
 800aae0:	dc3a03fd 	.word	0xdc3a03fd
 800aae4:	3feec709 	.word	0x3feec709
 800aae8:	145b01f5 	.word	0x145b01f5
 800aaec:	be3e2fe0 	.word	0xbe3e2fe0
 800aaf0:	7ff00000 	.word	0x7ff00000
 800aaf4:	43400000 	.word	0x43400000
 800aaf8:	0003988e 	.word	0x0003988e
 800aafc:	000bb679 	.word	0x000bb679
 800ab00:	0800b508 	.word	0x0800b508
 800ab04:	3ff00000 	.word	0x3ff00000
 800ab08:	40080000 	.word	0x40080000
 800ab0c:	0800b4e8 	.word	0x0800b4e8
 800ab10:	0800b4f8 	.word	0x0800b4f8
 800ab14:	4602      	mov	r2, r0
 800ab16:	460b      	mov	r3, r1
 800ab18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab1c:	e5d6      	b.n	800a6cc <__ieee754_pow+0x35c>
 800ab1e:	f04f 0a01 	mov.w	sl, #1
 800ab22:	e65e      	b.n	800a7e2 <__ieee754_pow+0x472>
 800ab24:	a3b5      	add	r3, pc, #724	@ (adr r3, 800adfc <__ieee754_pow+0xa8c>)
 800ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	4639      	mov	r1, r7
 800ab2e:	f7f5 fbad 	bl	800028c <__adddf3>
 800ab32:	4642      	mov	r2, r8
 800ab34:	e9cd 0100 	strd	r0, r1, [sp]
 800ab38:	464b      	mov	r3, r9
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	f7f5 fba3 	bl	8000288 <__aeabi_dsub>
 800ab42:	4602      	mov	r2, r0
 800ab44:	460b      	mov	r3, r1
 800ab46:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab4a:	f7f5 ffe5 	bl	8000b18 <__aeabi_dcmpgt>
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	f47f adfe 	bne.w	800a750 <__ieee754_pow+0x3e0>
 800ab54:	4ba2      	ldr	r3, [pc, #648]	@ (800ade0 <__ieee754_pow+0xa70>)
 800ab56:	e022      	b.n	800ab9e <__ieee754_pow+0x82e>
 800ab58:	4ca2      	ldr	r4, [pc, #648]	@ (800ade4 <__ieee754_pow+0xa74>)
 800ab5a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ab5e:	42a3      	cmp	r3, r4
 800ab60:	d919      	bls.n	800ab96 <__ieee754_pow+0x826>
 800ab62:	4ba1      	ldr	r3, [pc, #644]	@ (800ade8 <__ieee754_pow+0xa78>)
 800ab64:	440b      	add	r3, r1
 800ab66:	4303      	orrs	r3, r0
 800ab68:	d009      	beq.n	800ab7e <__ieee754_pow+0x80e>
 800ab6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	2300      	movs	r3, #0
 800ab72:	f7f5 ffb3 	bl	8000adc <__aeabi_dcmplt>
 800ab76:	3800      	subs	r0, #0
 800ab78:	bf18      	it	ne
 800ab7a:	2001      	movne	r0, #1
 800ab7c:	e512      	b.n	800a5a4 <__ieee754_pow+0x234>
 800ab7e:	4642      	mov	r2, r8
 800ab80:	464b      	mov	r3, r9
 800ab82:	f7f5 fb81 	bl	8000288 <__aeabi_dsub>
 800ab86:	4632      	mov	r2, r6
 800ab88:	463b      	mov	r3, r7
 800ab8a:	f7f5 ffbb 	bl	8000b04 <__aeabi_dcmpge>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d1eb      	bne.n	800ab6a <__ieee754_pow+0x7fa>
 800ab92:	4b96      	ldr	r3, [pc, #600]	@ (800adec <__ieee754_pow+0xa7c>)
 800ab94:	e003      	b.n	800ab9e <__ieee754_pow+0x82e>
 800ab96:	4a96      	ldr	r2, [pc, #600]	@ (800adf0 <__ieee754_pow+0xa80>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	f240 80e7 	bls.w	800ad6c <__ieee754_pow+0x9fc>
 800ab9e:	151b      	asrs	r3, r3, #20
 800aba0:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800aba4:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800aba8:	fa4a fa03 	asr.w	sl, sl, r3
 800abac:	44da      	add	sl, fp
 800abae:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800abb2:	4890      	ldr	r0, [pc, #576]	@ (800adf4 <__ieee754_pow+0xa84>)
 800abb4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800abb8:	4108      	asrs	r0, r1
 800abba:	ea00 030a 	and.w	r3, r0, sl
 800abbe:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800abc2:	f1c1 0114 	rsb	r1, r1, #20
 800abc6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800abca:	fa4a fa01 	asr.w	sl, sl, r1
 800abce:	f1bb 0f00 	cmp.w	fp, #0
 800abd2:	4640      	mov	r0, r8
 800abd4:	4649      	mov	r1, r9
 800abd6:	f04f 0200 	mov.w	r2, #0
 800abda:	bfb8      	it	lt
 800abdc:	f1ca 0a00 	rsblt	sl, sl, #0
 800abe0:	f7f5 fb52 	bl	8000288 <__aeabi_dsub>
 800abe4:	4680      	mov	r8, r0
 800abe6:	4689      	mov	r9, r1
 800abe8:	4632      	mov	r2, r6
 800abea:	463b      	mov	r3, r7
 800abec:	4640      	mov	r0, r8
 800abee:	4649      	mov	r1, r9
 800abf0:	f7f5 fb4c 	bl	800028c <__adddf3>
 800abf4:	2400      	movs	r4, #0
 800abf6:	a36a      	add	r3, pc, #424	@ (adr r3, 800ada0 <__ieee754_pow+0xa30>)
 800abf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfc:	4620      	mov	r0, r4
 800abfe:	460d      	mov	r5, r1
 800ac00:	f7f5 fcfa 	bl	80005f8 <__aeabi_dmul>
 800ac04:	4642      	mov	r2, r8
 800ac06:	e9cd 0100 	strd	r0, r1, [sp]
 800ac0a:	464b      	mov	r3, r9
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	4629      	mov	r1, r5
 800ac10:	f7f5 fb3a 	bl	8000288 <__aeabi_dsub>
 800ac14:	4602      	mov	r2, r0
 800ac16:	460b      	mov	r3, r1
 800ac18:	4630      	mov	r0, r6
 800ac1a:	4639      	mov	r1, r7
 800ac1c:	f7f5 fb34 	bl	8000288 <__aeabi_dsub>
 800ac20:	a361      	add	r3, pc, #388	@ (adr r3, 800ada8 <__ieee754_pow+0xa38>)
 800ac22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac26:	f7f5 fce7 	bl	80005f8 <__aeabi_dmul>
 800ac2a:	a361      	add	r3, pc, #388	@ (adr r3, 800adb0 <__ieee754_pow+0xa40>)
 800ac2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac30:	4680      	mov	r8, r0
 800ac32:	4689      	mov	r9, r1
 800ac34:	4620      	mov	r0, r4
 800ac36:	4629      	mov	r1, r5
 800ac38:	f7f5 fcde 	bl	80005f8 <__aeabi_dmul>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	460b      	mov	r3, r1
 800ac40:	4640      	mov	r0, r8
 800ac42:	4649      	mov	r1, r9
 800ac44:	f7f5 fb22 	bl	800028c <__adddf3>
 800ac48:	4604      	mov	r4, r0
 800ac4a:	460d      	mov	r5, r1
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	460b      	mov	r3, r1
 800ac50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac54:	f7f5 fb1a 	bl	800028c <__adddf3>
 800ac58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac5c:	4680      	mov	r8, r0
 800ac5e:	4689      	mov	r9, r1
 800ac60:	f7f5 fb12 	bl	8000288 <__aeabi_dsub>
 800ac64:	4602      	mov	r2, r0
 800ac66:	460b      	mov	r3, r1
 800ac68:	4620      	mov	r0, r4
 800ac6a:	4629      	mov	r1, r5
 800ac6c:	f7f5 fb0c 	bl	8000288 <__aeabi_dsub>
 800ac70:	4642      	mov	r2, r8
 800ac72:	4606      	mov	r6, r0
 800ac74:	460f      	mov	r7, r1
 800ac76:	464b      	mov	r3, r9
 800ac78:	4640      	mov	r0, r8
 800ac7a:	4649      	mov	r1, r9
 800ac7c:	f7f5 fcbc 	bl	80005f8 <__aeabi_dmul>
 800ac80:	a34d      	add	r3, pc, #308	@ (adr r3, 800adb8 <__ieee754_pow+0xa48>)
 800ac82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac86:	4604      	mov	r4, r0
 800ac88:	460d      	mov	r5, r1
 800ac8a:	f7f5 fcb5 	bl	80005f8 <__aeabi_dmul>
 800ac8e:	a34c      	add	r3, pc, #304	@ (adr r3, 800adc0 <__ieee754_pow+0xa50>)
 800ac90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac94:	f7f5 faf8 	bl	8000288 <__aeabi_dsub>
 800ac98:	4622      	mov	r2, r4
 800ac9a:	462b      	mov	r3, r5
 800ac9c:	f7f5 fcac 	bl	80005f8 <__aeabi_dmul>
 800aca0:	a349      	add	r3, pc, #292	@ (adr r3, 800adc8 <__ieee754_pow+0xa58>)
 800aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca6:	f7f5 faf1 	bl	800028c <__adddf3>
 800acaa:	4622      	mov	r2, r4
 800acac:	462b      	mov	r3, r5
 800acae:	f7f5 fca3 	bl	80005f8 <__aeabi_dmul>
 800acb2:	a347      	add	r3, pc, #284	@ (adr r3, 800add0 <__ieee754_pow+0xa60>)
 800acb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb8:	f7f5 fae6 	bl	8000288 <__aeabi_dsub>
 800acbc:	4622      	mov	r2, r4
 800acbe:	462b      	mov	r3, r5
 800acc0:	f7f5 fc9a 	bl	80005f8 <__aeabi_dmul>
 800acc4:	a344      	add	r3, pc, #272	@ (adr r3, 800add8 <__ieee754_pow+0xa68>)
 800acc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acca:	f7f5 fadf 	bl	800028c <__adddf3>
 800acce:	4622      	mov	r2, r4
 800acd0:	462b      	mov	r3, r5
 800acd2:	f7f5 fc91 	bl	80005f8 <__aeabi_dmul>
 800acd6:	4602      	mov	r2, r0
 800acd8:	460b      	mov	r3, r1
 800acda:	4640      	mov	r0, r8
 800acdc:	4649      	mov	r1, r9
 800acde:	f7f5 fad3 	bl	8000288 <__aeabi_dsub>
 800ace2:	4604      	mov	r4, r0
 800ace4:	460d      	mov	r5, r1
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	4640      	mov	r0, r8
 800acec:	4649      	mov	r1, r9
 800acee:	f7f5 fc83 	bl	80005f8 <__aeabi_dmul>
 800acf2:	2200      	movs	r2, #0
 800acf4:	e9cd 0100 	strd	r0, r1, [sp]
 800acf8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800acfc:	4620      	mov	r0, r4
 800acfe:	4629      	mov	r1, r5
 800ad00:	f7f5 fac2 	bl	8000288 <__aeabi_dsub>
 800ad04:	4602      	mov	r2, r0
 800ad06:	460b      	mov	r3, r1
 800ad08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad0c:	f7f5 fd9e 	bl	800084c <__aeabi_ddiv>
 800ad10:	4632      	mov	r2, r6
 800ad12:	4604      	mov	r4, r0
 800ad14:	460d      	mov	r5, r1
 800ad16:	463b      	mov	r3, r7
 800ad18:	4640      	mov	r0, r8
 800ad1a:	4649      	mov	r1, r9
 800ad1c:	f7f5 fc6c 	bl	80005f8 <__aeabi_dmul>
 800ad20:	4632      	mov	r2, r6
 800ad22:	463b      	mov	r3, r7
 800ad24:	f7f5 fab2 	bl	800028c <__adddf3>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	4629      	mov	r1, r5
 800ad30:	f7f5 faaa 	bl	8000288 <__aeabi_dsub>
 800ad34:	4642      	mov	r2, r8
 800ad36:	464b      	mov	r3, r9
 800ad38:	f7f5 faa6 	bl	8000288 <__aeabi_dsub>
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	4602      	mov	r2, r0
 800ad40:	492d      	ldr	r1, [pc, #180]	@ (800adf8 <__ieee754_pow+0xa88>)
 800ad42:	2000      	movs	r0, #0
 800ad44:	f7f5 faa0 	bl	8000288 <__aeabi_dsub>
 800ad48:	ec41 0b10 	vmov	d0, r0, r1
 800ad4c:	ee10 3a90 	vmov	r3, s1
 800ad50:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ad54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad58:	da0b      	bge.n	800ad72 <__ieee754_pow+0xa02>
 800ad5a:	4650      	mov	r0, sl
 800ad5c:	f000 f85c 	bl	800ae18 <scalbn>
 800ad60:	ec51 0b10 	vmov	r0, r1, d0
 800ad64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad68:	f7ff bb6d 	b.w	800a446 <__ieee754_pow+0xd6>
 800ad6c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ad70:	e73a      	b.n	800abe8 <__ieee754_pow+0x878>
 800ad72:	ec51 0b10 	vmov	r0, r1, d0
 800ad76:	4619      	mov	r1, r3
 800ad78:	e7f4      	b.n	800ad64 <__ieee754_pow+0x9f4>
 800ad7a:	491f      	ldr	r1, [pc, #124]	@ (800adf8 <__ieee754_pow+0xa88>)
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	f7ff bb14 	b.w	800a3aa <__ieee754_pow+0x3a>
 800ad82:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad86:	f7ff bb10 	b.w	800a3aa <__ieee754_pow+0x3a>
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	4639      	mov	r1, r7
 800ad8e:	f7ff bb0c 	b.w	800a3aa <__ieee754_pow+0x3a>
 800ad92:	460c      	mov	r4, r1
 800ad94:	f7ff bb69 	b.w	800a46a <__ieee754_pow+0xfa>
 800ad98:	2400      	movs	r4, #0
 800ad9a:	f7ff bb4b 	b.w	800a434 <__ieee754_pow+0xc4>
 800ad9e:	bf00      	nop
 800ada0:	00000000 	.word	0x00000000
 800ada4:	3fe62e43 	.word	0x3fe62e43
 800ada8:	fefa39ef 	.word	0xfefa39ef
 800adac:	3fe62e42 	.word	0x3fe62e42
 800adb0:	0ca86c39 	.word	0x0ca86c39
 800adb4:	be205c61 	.word	0xbe205c61
 800adb8:	72bea4d0 	.word	0x72bea4d0
 800adbc:	3e663769 	.word	0x3e663769
 800adc0:	c5d26bf1 	.word	0xc5d26bf1
 800adc4:	3ebbbd41 	.word	0x3ebbbd41
 800adc8:	af25de2c 	.word	0xaf25de2c
 800adcc:	3f11566a 	.word	0x3f11566a
 800add0:	16bebd93 	.word	0x16bebd93
 800add4:	3f66c16c 	.word	0x3f66c16c
 800add8:	5555553e 	.word	0x5555553e
 800addc:	3fc55555 	.word	0x3fc55555
 800ade0:	40900000 	.word	0x40900000
 800ade4:	4090cbff 	.word	0x4090cbff
 800ade8:	3f6f3400 	.word	0x3f6f3400
 800adec:	4090cc00 	.word	0x4090cc00
 800adf0:	3fe00000 	.word	0x3fe00000
 800adf4:	fff00000 	.word	0xfff00000
 800adf8:	3ff00000 	.word	0x3ff00000
 800adfc:	652b82fe 	.word	0x652b82fe
 800ae00:	3c971547 	.word	0x3c971547

0800ae04 <fabs>:
 800ae04:	ec51 0b10 	vmov	r0, r1, d0
 800ae08:	4602      	mov	r2, r0
 800ae0a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ae0e:	ec43 2b10 	vmov	d0, r2, r3
 800ae12:	4770      	bx	lr
 800ae14:	0000      	movs	r0, r0
	...

0800ae18 <scalbn>:
 800ae18:	b570      	push	{r4, r5, r6, lr}
 800ae1a:	ec55 4b10 	vmov	r4, r5, d0
 800ae1e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ae22:	4606      	mov	r6, r0
 800ae24:	462b      	mov	r3, r5
 800ae26:	b991      	cbnz	r1, 800ae4e <scalbn+0x36>
 800ae28:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ae2c:	4323      	orrs	r3, r4
 800ae2e:	d03b      	beq.n	800aea8 <scalbn+0x90>
 800ae30:	4b33      	ldr	r3, [pc, #204]	@ (800af00 <scalbn+0xe8>)
 800ae32:	4620      	mov	r0, r4
 800ae34:	4629      	mov	r1, r5
 800ae36:	2200      	movs	r2, #0
 800ae38:	f7f5 fbde 	bl	80005f8 <__aeabi_dmul>
 800ae3c:	4b31      	ldr	r3, [pc, #196]	@ (800af04 <scalbn+0xec>)
 800ae3e:	429e      	cmp	r6, r3
 800ae40:	4604      	mov	r4, r0
 800ae42:	460d      	mov	r5, r1
 800ae44:	da0f      	bge.n	800ae66 <scalbn+0x4e>
 800ae46:	a326      	add	r3, pc, #152	@ (adr r3, 800aee0 <scalbn+0xc8>)
 800ae48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4c:	e01e      	b.n	800ae8c <scalbn+0x74>
 800ae4e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ae52:	4291      	cmp	r1, r2
 800ae54:	d10b      	bne.n	800ae6e <scalbn+0x56>
 800ae56:	4622      	mov	r2, r4
 800ae58:	4620      	mov	r0, r4
 800ae5a:	4629      	mov	r1, r5
 800ae5c:	f7f5 fa16 	bl	800028c <__adddf3>
 800ae60:	4604      	mov	r4, r0
 800ae62:	460d      	mov	r5, r1
 800ae64:	e020      	b.n	800aea8 <scalbn+0x90>
 800ae66:	460b      	mov	r3, r1
 800ae68:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ae6c:	3936      	subs	r1, #54	@ 0x36
 800ae6e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ae72:	4296      	cmp	r6, r2
 800ae74:	dd0d      	ble.n	800ae92 <scalbn+0x7a>
 800ae76:	2d00      	cmp	r5, #0
 800ae78:	a11b      	add	r1, pc, #108	@ (adr r1, 800aee8 <scalbn+0xd0>)
 800ae7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae7e:	da02      	bge.n	800ae86 <scalbn+0x6e>
 800ae80:	a11b      	add	r1, pc, #108	@ (adr r1, 800aef0 <scalbn+0xd8>)
 800ae82:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae86:	a318      	add	r3, pc, #96	@ (adr r3, 800aee8 <scalbn+0xd0>)
 800ae88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8c:	f7f5 fbb4 	bl	80005f8 <__aeabi_dmul>
 800ae90:	e7e6      	b.n	800ae60 <scalbn+0x48>
 800ae92:	1872      	adds	r2, r6, r1
 800ae94:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ae98:	428a      	cmp	r2, r1
 800ae9a:	dcec      	bgt.n	800ae76 <scalbn+0x5e>
 800ae9c:	2a00      	cmp	r2, #0
 800ae9e:	dd06      	ble.n	800aeae <scalbn+0x96>
 800aea0:	f36f 531e 	bfc	r3, #20, #11
 800aea4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aea8:	ec45 4b10 	vmov	d0, r4, r5
 800aeac:	bd70      	pop	{r4, r5, r6, pc}
 800aeae:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800aeb2:	da08      	bge.n	800aec6 <scalbn+0xae>
 800aeb4:	2d00      	cmp	r5, #0
 800aeb6:	a10a      	add	r1, pc, #40	@ (adr r1, 800aee0 <scalbn+0xc8>)
 800aeb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aebc:	dac3      	bge.n	800ae46 <scalbn+0x2e>
 800aebe:	a10e      	add	r1, pc, #56	@ (adr r1, 800aef8 <scalbn+0xe0>)
 800aec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aec4:	e7bf      	b.n	800ae46 <scalbn+0x2e>
 800aec6:	3236      	adds	r2, #54	@ 0x36
 800aec8:	f36f 531e 	bfc	r3, #20, #11
 800aecc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aed0:	4620      	mov	r0, r4
 800aed2:	4b0d      	ldr	r3, [pc, #52]	@ (800af08 <scalbn+0xf0>)
 800aed4:	4629      	mov	r1, r5
 800aed6:	2200      	movs	r2, #0
 800aed8:	e7d8      	b.n	800ae8c <scalbn+0x74>
 800aeda:	bf00      	nop
 800aedc:	f3af 8000 	nop.w
 800aee0:	c2f8f359 	.word	0xc2f8f359
 800aee4:	01a56e1f 	.word	0x01a56e1f
 800aee8:	8800759c 	.word	0x8800759c
 800aeec:	7e37e43c 	.word	0x7e37e43c
 800aef0:	8800759c 	.word	0x8800759c
 800aef4:	fe37e43c 	.word	0xfe37e43c
 800aef8:	c2f8f359 	.word	0xc2f8f359
 800aefc:	81a56e1f 	.word	0x81a56e1f
 800af00:	43500000 	.word	0x43500000
 800af04:	ffff3cb0 	.word	0xffff3cb0
 800af08:	3c900000 	.word	0x3c900000

0800af0c <with_errno>:
 800af0c:	b510      	push	{r4, lr}
 800af0e:	ed2d 8b02 	vpush	{d8}
 800af12:	eeb0 8a40 	vmov.f32	s16, s0
 800af16:	eef0 8a60 	vmov.f32	s17, s1
 800af1a:	4604      	mov	r4, r0
 800af1c:	f7fd fa04 	bl	8008328 <__errno>
 800af20:	eeb0 0a48 	vmov.f32	s0, s16
 800af24:	eef0 0a68 	vmov.f32	s1, s17
 800af28:	ecbd 8b02 	vpop	{d8}
 800af2c:	6004      	str	r4, [r0, #0]
 800af2e:	bd10      	pop	{r4, pc}

0800af30 <xflow>:
 800af30:	4603      	mov	r3, r0
 800af32:	b507      	push	{r0, r1, r2, lr}
 800af34:	ec51 0b10 	vmov	r0, r1, d0
 800af38:	b183      	cbz	r3, 800af5c <xflow+0x2c>
 800af3a:	4602      	mov	r2, r0
 800af3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800af40:	e9cd 2300 	strd	r2, r3, [sp]
 800af44:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af48:	f7f5 fb56 	bl	80005f8 <__aeabi_dmul>
 800af4c:	ec41 0b10 	vmov	d0, r0, r1
 800af50:	2022      	movs	r0, #34	@ 0x22
 800af52:	b003      	add	sp, #12
 800af54:	f85d eb04 	ldr.w	lr, [sp], #4
 800af58:	f7ff bfd8 	b.w	800af0c <with_errno>
 800af5c:	4602      	mov	r2, r0
 800af5e:	460b      	mov	r3, r1
 800af60:	e7ee      	b.n	800af40 <xflow+0x10>
 800af62:	0000      	movs	r0, r0
 800af64:	0000      	movs	r0, r0
	...

0800af68 <__math_uflow>:
 800af68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800af70 <__math_uflow+0x8>
 800af6c:	f7ff bfe0 	b.w	800af30 <xflow>
 800af70:	00000000 	.word	0x00000000
 800af74:	10000000 	.word	0x10000000

0800af78 <__math_oflow>:
 800af78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800af80 <__math_oflow+0x8>
 800af7c:	f7ff bfd8 	b.w	800af30 <xflow>
 800af80:	00000000 	.word	0x00000000
 800af84:	70000000 	.word	0x70000000

0800af88 <__ieee754_sqrt>:
 800af88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	4a66      	ldr	r2, [pc, #408]	@ (800b128 <__ieee754_sqrt+0x1a0>)
 800af8e:	ec55 4b10 	vmov	r4, r5, d0
 800af92:	43aa      	bics	r2, r5
 800af94:	462b      	mov	r3, r5
 800af96:	4621      	mov	r1, r4
 800af98:	d110      	bne.n	800afbc <__ieee754_sqrt+0x34>
 800af9a:	4622      	mov	r2, r4
 800af9c:	4620      	mov	r0, r4
 800af9e:	4629      	mov	r1, r5
 800afa0:	f7f5 fb2a 	bl	80005f8 <__aeabi_dmul>
 800afa4:	4602      	mov	r2, r0
 800afa6:	460b      	mov	r3, r1
 800afa8:	4620      	mov	r0, r4
 800afaa:	4629      	mov	r1, r5
 800afac:	f7f5 f96e 	bl	800028c <__adddf3>
 800afb0:	4604      	mov	r4, r0
 800afb2:	460d      	mov	r5, r1
 800afb4:	ec45 4b10 	vmov	d0, r4, r5
 800afb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afbc:	2d00      	cmp	r5, #0
 800afbe:	dc0e      	bgt.n	800afde <__ieee754_sqrt+0x56>
 800afc0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800afc4:	4322      	orrs	r2, r4
 800afc6:	d0f5      	beq.n	800afb4 <__ieee754_sqrt+0x2c>
 800afc8:	b19d      	cbz	r5, 800aff2 <__ieee754_sqrt+0x6a>
 800afca:	4622      	mov	r2, r4
 800afcc:	4620      	mov	r0, r4
 800afce:	4629      	mov	r1, r5
 800afd0:	f7f5 f95a 	bl	8000288 <__aeabi_dsub>
 800afd4:	4602      	mov	r2, r0
 800afd6:	460b      	mov	r3, r1
 800afd8:	f7f5 fc38 	bl	800084c <__aeabi_ddiv>
 800afdc:	e7e8      	b.n	800afb0 <__ieee754_sqrt+0x28>
 800afde:	152a      	asrs	r2, r5, #20
 800afe0:	d115      	bne.n	800b00e <__ieee754_sqrt+0x86>
 800afe2:	2000      	movs	r0, #0
 800afe4:	e009      	b.n	800affa <__ieee754_sqrt+0x72>
 800afe6:	0acb      	lsrs	r3, r1, #11
 800afe8:	3a15      	subs	r2, #21
 800afea:	0549      	lsls	r1, r1, #21
 800afec:	2b00      	cmp	r3, #0
 800afee:	d0fa      	beq.n	800afe6 <__ieee754_sqrt+0x5e>
 800aff0:	e7f7      	b.n	800afe2 <__ieee754_sqrt+0x5a>
 800aff2:	462a      	mov	r2, r5
 800aff4:	e7fa      	b.n	800afec <__ieee754_sqrt+0x64>
 800aff6:	005b      	lsls	r3, r3, #1
 800aff8:	3001      	adds	r0, #1
 800affa:	02dc      	lsls	r4, r3, #11
 800affc:	d5fb      	bpl.n	800aff6 <__ieee754_sqrt+0x6e>
 800affe:	1e44      	subs	r4, r0, #1
 800b000:	1b12      	subs	r2, r2, r4
 800b002:	f1c0 0420 	rsb	r4, r0, #32
 800b006:	fa21 f404 	lsr.w	r4, r1, r4
 800b00a:	4323      	orrs	r3, r4
 800b00c:	4081      	lsls	r1, r0
 800b00e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b012:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800b016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b01a:	07d2      	lsls	r2, r2, #31
 800b01c:	bf5c      	itt	pl
 800b01e:	005b      	lslpl	r3, r3, #1
 800b020:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b024:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b028:	bf58      	it	pl
 800b02a:	0049      	lslpl	r1, r1, #1
 800b02c:	2600      	movs	r6, #0
 800b02e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b032:	107f      	asrs	r7, r7, #1
 800b034:	0049      	lsls	r1, r1, #1
 800b036:	2016      	movs	r0, #22
 800b038:	4632      	mov	r2, r6
 800b03a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b03e:	1915      	adds	r5, r2, r4
 800b040:	429d      	cmp	r5, r3
 800b042:	bfde      	ittt	le
 800b044:	192a      	addle	r2, r5, r4
 800b046:	1b5b      	suble	r3, r3, r5
 800b048:	1936      	addle	r6, r6, r4
 800b04a:	0fcd      	lsrs	r5, r1, #31
 800b04c:	3801      	subs	r0, #1
 800b04e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800b052:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b056:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b05a:	d1f0      	bne.n	800b03e <__ieee754_sqrt+0xb6>
 800b05c:	4605      	mov	r5, r0
 800b05e:	2420      	movs	r4, #32
 800b060:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b064:	4293      	cmp	r3, r2
 800b066:	eb0c 0e00 	add.w	lr, ip, r0
 800b06a:	dc02      	bgt.n	800b072 <__ieee754_sqrt+0xea>
 800b06c:	d113      	bne.n	800b096 <__ieee754_sqrt+0x10e>
 800b06e:	458e      	cmp	lr, r1
 800b070:	d811      	bhi.n	800b096 <__ieee754_sqrt+0x10e>
 800b072:	f1be 0f00 	cmp.w	lr, #0
 800b076:	eb0e 000c 	add.w	r0, lr, ip
 800b07a:	da3f      	bge.n	800b0fc <__ieee754_sqrt+0x174>
 800b07c:	2800      	cmp	r0, #0
 800b07e:	db3d      	blt.n	800b0fc <__ieee754_sqrt+0x174>
 800b080:	f102 0801 	add.w	r8, r2, #1
 800b084:	1a9b      	subs	r3, r3, r2
 800b086:	458e      	cmp	lr, r1
 800b088:	bf88      	it	hi
 800b08a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b08e:	eba1 010e 	sub.w	r1, r1, lr
 800b092:	4465      	add	r5, ip
 800b094:	4642      	mov	r2, r8
 800b096:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b09a:	3c01      	subs	r4, #1
 800b09c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b0a0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b0a4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b0a8:	d1dc      	bne.n	800b064 <__ieee754_sqrt+0xdc>
 800b0aa:	4319      	orrs	r1, r3
 800b0ac:	d01b      	beq.n	800b0e6 <__ieee754_sqrt+0x15e>
 800b0ae:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800b12c <__ieee754_sqrt+0x1a4>
 800b0b2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800b130 <__ieee754_sqrt+0x1a8>
 800b0b6:	e9da 0100 	ldrd	r0, r1, [sl]
 800b0ba:	e9db 2300 	ldrd	r2, r3, [fp]
 800b0be:	f7f5 f8e3 	bl	8000288 <__aeabi_dsub>
 800b0c2:	e9da 8900 	ldrd	r8, r9, [sl]
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	4640      	mov	r0, r8
 800b0cc:	4649      	mov	r1, r9
 800b0ce:	f7f5 fd0f 	bl	8000af0 <__aeabi_dcmple>
 800b0d2:	b140      	cbz	r0, 800b0e6 <__ieee754_sqrt+0x15e>
 800b0d4:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b0d8:	e9da 0100 	ldrd	r0, r1, [sl]
 800b0dc:	e9db 2300 	ldrd	r2, r3, [fp]
 800b0e0:	d10e      	bne.n	800b100 <__ieee754_sqrt+0x178>
 800b0e2:	3601      	adds	r6, #1
 800b0e4:	4625      	mov	r5, r4
 800b0e6:	1073      	asrs	r3, r6, #1
 800b0e8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800b0ec:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800b0f0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800b0f4:	086b      	lsrs	r3, r5, #1
 800b0f6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800b0fa:	e759      	b.n	800afb0 <__ieee754_sqrt+0x28>
 800b0fc:	4690      	mov	r8, r2
 800b0fe:	e7c1      	b.n	800b084 <__ieee754_sqrt+0xfc>
 800b100:	f7f5 f8c4 	bl	800028c <__adddf3>
 800b104:	e9da 8900 	ldrd	r8, r9, [sl]
 800b108:	4602      	mov	r2, r0
 800b10a:	460b      	mov	r3, r1
 800b10c:	4640      	mov	r0, r8
 800b10e:	4649      	mov	r1, r9
 800b110:	f7f5 fce4 	bl	8000adc <__aeabi_dcmplt>
 800b114:	b120      	cbz	r0, 800b120 <__ieee754_sqrt+0x198>
 800b116:	1cab      	adds	r3, r5, #2
 800b118:	bf08      	it	eq
 800b11a:	3601      	addeq	r6, #1
 800b11c:	3502      	adds	r5, #2
 800b11e:	e7e2      	b.n	800b0e6 <__ieee754_sqrt+0x15e>
 800b120:	1c6b      	adds	r3, r5, #1
 800b122:	f023 0501 	bic.w	r5, r3, #1
 800b126:	e7de      	b.n	800b0e6 <__ieee754_sqrt+0x15e>
 800b128:	7ff00000 	.word	0x7ff00000
 800b12c:	0800b520 	.word	0x0800b520
 800b130:	0800b518 	.word	0x0800b518

0800b134 <_init>:
 800b134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b136:	bf00      	nop
 800b138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b13a:	bc08      	pop	{r3}
 800b13c:	469e      	mov	lr, r3
 800b13e:	4770      	bx	lr

0800b140 <_fini>:
 800b140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b142:	bf00      	nop
 800b144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b146:	bc08      	pop	{r3}
 800b148:	469e      	mov	lr, r3
 800b14a:	4770      	bx	lr
